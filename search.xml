<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>学习笔记·平衡树</title>
      <link href="/2018/12/01/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
      <url>/2018/12/01/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E5%B9%B3%E8%A1%A1%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>平衡树是一种使用较为广泛的数据结构，代码比较长。<br><a id="more"></a></p><h3 id="Splay"><a href="#Splay" class="headerlink" title="Splay"></a>Splay</h3><p>Splay最主要的一点是它能反转区间，而Treap以及替罪羊不能，这也是为什么它作为Link Cut Tree的辅助树。</p><h4 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h4><p>首先需要写一个这样的程序框架：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEBUG printf(<span class="meta-string">"In function %s, line %d\n"</span>,__FUNCTION__,__LINE__)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">2e5</span>+<span class="number">51</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line">ll cnt,qcnt,l,r;</span><br><span class="line"><span class="keyword">namespace</span> Splay&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">        ll fa,val,size,tag;</span><br><span class="line">        ll ch[<span class="number">2</span>];</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Splay</span>&#123;</span></span><br><span class="line">    ll tot,root;</span><br><span class="line">        Node nd[MAXN];</span><br><span class="line">        <span class="comment">//Code goes here</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以下代码片段全部接在注释处。</p><h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><p>首先是$update$，用于更新节点的$size$。<br>既然写过线段树，那么这个操作应该不难。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">nd[x].size=nd[nd[x].ch[<span class="number">0</span>]].size+nd[nd[x].ch[<span class="number">1</span>]].size+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接下来是$id$，用于判断一个节点是它的父亲的哪一个孩子。<br>这个很简单，只需要几行代码。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">id</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> nd[nd[x].fa].ch[<span class="number">1</span>]==x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下一个是$connect$，用于建立新的父子关系，这个也不难。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">(ll x,ll fa,ll dir)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    nd[x].fa=fa,nd[fa].ch[dir]=x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="关键操作"><a href="#关键操作" class="headerlink" title="关键操作"></a>关键操作</h4><p>以下两个操作是旋转操作，很关键，而且不好调。<br>首先是$rotate$，用于平衡旋转。<br>举个栗子，这是原来的平衡树。<br><img src="/2018/12/01/学习笔记·平衡树/splay0.jpg" alt=""><br>其中蓝色指向父亲，红色指向儿子。<br>调用$rotate(y)$之后，平衡树就变成这个样子了：<br><img src="/2018/12/01/学习笔记·平衡树/splay1.jpg" alt=""><br>由于之前$connect$的实现，这个就变得不难了，因为旋转依次要改变$3$对父子关系。<br>第一对，对照第二幅图可以发现，可以直接在$y$与$R$建立关系，就像这样<br><img src="/2018/12/01/学习笔记·平衡树/splay2.jpg" alt=""><br>第二对，在$B$与$x$之间建立父子关系，然后就变成了这个<br><img src="/2018/12/01/学习笔记·平衡树/splay3.jpg" alt=""><br>最后，在$x$与$y$建立父子关系就大功告成啦qwq。<br>所以，上代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll fa=nd[x].fa,gfa=nd[fa].fa,dir=id(x);</span><br><span class="line">    connect(x,gfa,id(fa));</span><br><span class="line">    connect(nd[x].ch[dir^<span class="number">1</span>],fa,dir);</span><br><span class="line">    connect(fa,x,dir^<span class="number">1</span>);</span><br><span class="line">    update(fa),update(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>还有一个是$splay$，这个尽管代码不长，但是很难调。</p><h4 id="一些特例"><a href="#一些特例" class="headerlink" title="一些特例"></a>一些特例</h4>]]></content>
      
      
      
        <tags>
            
            <tag> 平衡树 </tag>
            
            <tag> Splay </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P3391」【模板】文艺平衡树（Splay）</title>
      <link href="/2018/11/30/%E3%80%8CLuogu-P3391%E3%80%8D%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%96%87%E8%89%BA%E5%B9%B3%E8%A1%A1%E6%A0%91%EF%BC%88Splay%EF%BC%89/"/>
      <url>/2018/11/30/%E3%80%8CLuogu-P3391%E3%80%8D%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%96%87%E8%89%BA%E5%B9%B3%E8%A1%A1%E6%A0%91%EF%BC%88Splay%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>给一个$1$到$n$的排列，每一次能将区间$[l,r]$反转，求最后的排列<br><a id="more"></a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>实测暴力能<script type="math/tex">Rush\ 48pts</script>，但是不能用暴力，只能老老实实写Splay。<br>作为一道模板题，还是说一下我犯过的错误吧qwq。<br>第一，<strong>$splay$函数中旋转完了一定要更新$fa$和$x$的信息</strong>，由于这个，我居然调了一下午+一晚上。<br>第二，<strong>注意$reverse$中更新信息的语句</strong>，又调了一中午。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEBUG printf(<span class="meta-string">"In function %s, line %d\n"</span>,__FUNCTION__,__LINE__)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">2e5</span>+<span class="number">51</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line">ll cnt,qcnt,l,r;</span><br><span class="line"><span class="keyword">namespace</span> Splay&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">        ll fa,val,size,tag;</span><br><span class="line">        ll ch[<span class="number">2</span>];</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">reset</span><span class="params">(ll val=<span class="number">0</span>,ll fa=<span class="number">0</span>)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;fa=fa,<span class="keyword">this</span>-&gt;val=val,<span class="keyword">this</span>-&gt;size=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">this</span>-&gt;tag=<span class="keyword">this</span>-&gt;ch[<span class="number">0</span>]=<span class="keyword">this</span>-&gt;ch[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Splay</span>&#123;</span></span><br><span class="line">        ll tot,root;</span><br><span class="line">        Node nd[MAXN];</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">id</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> nd[nd[x].fa].ch[<span class="number">1</span>]==x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            nd[x].size=nd[nd[x].ch[<span class="number">0</span>]].size+nd[nd[x].ch[<span class="number">1</span>]].size+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">spread</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(nd[x].tag)</span><br><span class="line">            &#123;</span><br><span class="line">                nd[nd[x].ch[<span class="number">0</span>]].tag^=<span class="number">1</span>,nd[nd[x].ch[<span class="number">1</span>]].tag^=<span class="number">1</span>;</span><br><span class="line">                nd[x].tag=<span class="number">0</span>;</span><br><span class="line">                swap(nd[x].ch[<span class="number">0</span>],nd[x].ch[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">(ll x,ll fa,ll dir)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            nd[x].fa=fa,nd[fa].ch[dir]=x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            ll fa=nd[x].fa,gfa=nd[fa].fa,dir=id(x);</span><br><span class="line">            connect(x,gfa,id(fa));</span><br><span class="line">            connect(nd[x].ch[dir^<span class="number">1</span>],fa,dir);</span><br><span class="line">            connect(fa,x,dir^<span class="number">1</span>);</span><br><span class="line">            update(fa),update(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">splay</span><span class="params">(ll cur,ll target)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(nd[cur].fa!=target)</span><br><span class="line">            &#123;</span><br><span class="line">                ll fa=nd[cur].fa,gfa=nd[fa].fa;</span><br><span class="line">                <span class="keyword">if</span>(gfa!=target)</span><br><span class="line">                &#123;</span><br><span class="line">                    rotate(id(cur)^id(fa)?cur:fa);</span><br><span class="line">                &#125;</span><br><span class="line">                rotate(cur);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!target)</span><br><span class="line">            &#123;</span><br><span class="line">                root=cur;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(ll val)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            ll cur=root,fa=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(cur)</span><br><span class="line">            &#123;</span><br><span class="line">                fa=cur,cur=nd[cur].ch[val&gt;nd[cur].val];</span><br><span class="line">            &#125;</span><br><span class="line">            cur=++tot;</span><br><span class="line">            <span class="keyword">if</span>(fa)</span><br><span class="line">            &#123;</span><br><span class="line">                nd[fa].ch[val&gt;nd[fa].val]=cur;</span><br><span class="line">            &#125;</span><br><span class="line">            nd[cur].reset(val,fa);</span><br><span class="line">            splay(cur,<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> ll <span class="title">findRank</span><span class="params">(ll val)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            ll cur=root;</span><br><span class="line">            <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                spread(cur);</span><br><span class="line">                <span class="keyword">if</span>(nd[nd[cur].ch[<span class="number">0</span>]].size&gt;=val)</span><br><span class="line">                &#123;</span><br><span class="line">                    cur=nd[cur].ch[<span class="number">0</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(nd[nd[cur].ch[<span class="number">0</span>]].size+<span class="number">1</span>==val)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">return</span> cur;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        val-=nd[nd[cur].ch[<span class="number">0</span>]].size+<span class="number">1</span>,cur=nd[cur].ch[<span class="number">1</span>];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(ll l,ll r)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            l=findRank(l),r=findRank(r+<span class="number">2</span>);</span><br><span class="line">            splay(l,<span class="number">0</span>),splay(r,l);</span><br><span class="line">            nd[nd[nd[root].ch[<span class="number">1</span>]].ch[<span class="number">0</span>]].tag^=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">op</span><span class="params">(ll cur)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            spread(cur);</span><br><span class="line">            <span class="keyword">if</span>(nd[cur].ch[<span class="number">0</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                op(nd[cur].ch[<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(nd[cur].val&gt;<span class="number">1</span>&amp;&amp;nd[cur].val&lt;cnt+<span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d "</span>,nd[cur].val<span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(nd[cur].ch[<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                op(nd[cur].ch[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">Splay::Splay splay;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt=read(),qcnt=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt+<span class="number">2</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        splay.insert(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;qcnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        l=read(),r=read();</span><br><span class="line">        splay.reverse(l,r);</span><br><span class="line">    &#125;</span><br><span class="line">    splay.op(splay.root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 平衡树 </tag>
            
            <tag> Splay </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「SP1043」Can you answer these queries I</title>
      <link href="/2018/11/29/%E3%80%8CSP1043%E3%80%8DCan-you-answer-these-queries-I/"/>
      <url>/2018/11/29/%E3%80%8CSP1043%E3%80%8DCan-you-answer-these-queries-I/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>「Luogu P3701」「伪模板」主席树</title>
      <link href="/2018/11/29/%E3%80%8CLuogu-P3701%E3%80%8D%E4%B8%BB%E5%B8%AD%E6%A0%91/"/>
      <url>/2018/11/29/%E3%80%8CLuogu-P3701%E3%80%8D%E4%B8%BB%E5%B8%AD%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>A和B有五种不同的人物，共$n$个，两人之间要比$m$场。A的的$i$个人物的寿命为$hpA_i$，B的为$hpB_i$。<br>每一次A和B选出不同的人物进行PK，每一次PK使得两边人物的寿命$-1s$，当寿命为$0$时就不能比赛了，两个人之间只能比一场。<br>同时，当J的寿命为$0$时，同一棵树上的YYY可以为他$+1s$。每个YYY只能给每个J续一次，最大化A能赢的场次的数目。<br><a id="more"></a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>一个比较巧妙的网络流建模题。<br>首先打出人物之间输赢的表，然后考虑从源点像A的第$i$个人物连边，容量为$hpA_i$，从B的第$i$个人物像汇点连边，容量为$hpB_i$。<br>以上连边，如果第$i$个人是J，则将容量增加本方YYY的数量。<br>对于A的第$i$个人能赢B的第$j$个人，就从A的第$i$个人向B的第$j$个人A的人连边，容量为$1$。跑一边最大流即可。<br>下面分析为什么这样连边是对的。<br>先不考虑续命，这个人物不能出战即找不到经过这个人物的增广路，而<strong>通过这个人物的增广路只能是从源点直接到这个人物再到后面或是前面找到的增广路到这个人物再到汇点。</strong><br>以上这句话很重要，请仔细理解。所以，<strong>当源点到这个人物或这个人物到汇点的边为零流边就找不到增广路了，即这个人没命了。</strong>所以从源点发出或到汇点连边是正确的。<br>由于两个人之间只能比一场，而题目要求只求胜利场次数，所以中间的连边也是正确的。<br>现在考虑续命。对于一个J，无论YYY是死是活，总能在它死的时候续命，对于每一个J都是一样。所以将从源点连到J的边或是J连到汇点的边的容量增加本方YYY的个数。<br>至此，连边的正确性就已经说明清楚了。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">1e5</span>+<span class="number">51</span>,inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    ll to,prev,flow;</span><br><span class="line">&#125;;</span><br><span class="line">Edge ed[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,ll&gt;mp;</span><br><span class="line">ll nc,ec,source,sink,tot=<span class="number">1</span>,from,to,flow,maxFlow;</span><br><span class="line">ll cnt,ccnt,life,xx,yy;</span><br><span class="line">ll last[MAXN],depth[MAXN],inQueue[MAXN];</span><br><span class="line">ll win[<span class="number">5</span>][<span class="number">5</span>]=&#123;</span><br><span class="line">    <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,</span><br><span class="line">    <span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line">    <span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,</span><br><span class="line">    <span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">string</span> x[<span class="number">151</span>],y[<span class="number">151</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(ll from,ll to,ll flow)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ed[++tot].prev=last[from];</span><br><span class="line">    ed[tot].to=to;</span><br><span class="line">    ed[tot].flow=flow;</span><br><span class="line">    last[from]=tot; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Min</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x:y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;ll&gt;q;</span><br><span class="line">    ll top,to;</span><br><span class="line">    <span class="built_in">memset</span>(depth,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(depth));</span><br><span class="line">    depth[source]=<span class="number">0</span>,q.push(source);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        top=q.front();</span><br><span class="line">        q.pop(),inQueue[top]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=last[top];i;i=ed[i].prev)</span><br><span class="line">        &#123;</span><br><span class="line">            to=ed[i].to;</span><br><span class="line">            <span class="keyword">if</span>(depth[to]&gt;depth[top]+<span class="number">1</span>&amp;&amp;ed[i].flow)</span><br><span class="line">            &#123;</span><br><span class="line">                depth[to]=depth[top]+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(!inQueue[to])</span><br><span class="line">                &#123;</span><br><span class="line">                    q.push(to),inQueue[to]=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(depth[sink]!=<span class="number">0x3f3f3f3f</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">dfs</span><span class="params">(ll cur,ll flow)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll low;</span><br><span class="line">    <span class="keyword">if</span>(cur==sink)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> flow;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=last[cur];i;i=ed[i].prev)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ed[i].flow&amp;&amp;depth[ed[i].to]==depth[cur]+<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(low=dfs(ed[i].to,Min(flow,ed[i].flow)))</span><br><span class="line">            &#123;</span><br><span class="line">                ed[i].flow-=low,ed[i^<span class="number">1</span>].flow+=low;</span><br><span class="line">                <span class="keyword">return</span> low;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll flow;</span><br><span class="line">    <span class="keyword">while</span>(bfs())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(flow=dfs(source,inf))</span><br><span class="line">        &#123;</span><br><span class="line">            maxFlow+=flow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxFlow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt=read(),ccnt=read();</span><br><span class="line">    nc=sink=(cnt+<span class="number">1</span>)&lt;&lt;<span class="number">1</span>,source=<span class="number">1</span>;</span><br><span class="line">    mp[<span class="string">"J"</span>]=<span class="number">0</span>,mp[<span class="string">"E"</span>]=<span class="number">1</span>,mp[<span class="string">"YYY"</span>]=<span class="number">2</span>,mp[<span class="string">"HK"</span>]=<span class="number">3</span>,mp[<span class="string">"W"</span>]=<span class="number">4</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x[i];</span><br><span class="line">        xx+=(x[i]==<span class="string">"YYY"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;y[i];</span><br><span class="line">    yy+=(y[i]==<span class="string">"YYY"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=cnt+<span class="number">1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        life=read();</span><br><span class="line">        addEdge(source,i,life+(x[i<span class="number">-1</span>]==<span class="string">"J"</span>?xx:<span class="number">0</span>)),addEdge(i,source,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=cnt+<span class="number">1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        life=read();</span><br><span class="line">        addEdge(i+cnt,sink,life+(y[i<span class="number">-1</span>]==<span class="string">"J"</span>?yy:<span class="number">0</span>)),addEdge(sink,i+cnt,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        xx=mp[x[i]];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            yy=mp[y[j]];</span><br><span class="line">            <span class="keyword">if</span>(win[xx][yy])</span><br><span class="line">            &#123;</span><br><span class="line">                addEdge(i+<span class="number">1</span>,j+<span class="number">1</span>+cnt,<span class="number">1</span>),addEdge(j+<span class="number">1</span>+cnt,i+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,min(ccnt,Dinic()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
            <tag> 网络流 </tag>
            
            <tag> 最大流 </tag>
            
            <tag> Dinic </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「CodeForces 558E」A Simple Task</title>
      <link href="/2018/11/24/%E3%80%8CCodeForces-558E%E3%80%8DA-Simple-Task/"/>
      <url>/2018/11/24/%E3%80%8CCodeForces-558E%E3%80%8DA-Simple-Task/</url>
      
        <content type="html"><![CDATA[<p>给定一个字符串，每次将一个子串排序，问最后的字符串是什么。<br><a id="more"></a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>一个比较好的思维题。<br>用线段树维护区间内$26$个字母的出现次数。对于排序，将区间内每个字母出现的次数查出来，然后一个一个遍历就好了。如果是升序就从小往大覆盖，反之从大往小覆盖就好了。时间复杂度$O(26n\log n)$<del>这里常数不能省</del><br>还有，最坑爹的一点是，线段树开$4\times 10^5$过不去，会RE #9，要开$8\times 10^5$……</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">2e5</span>+<span class="number">51</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Occur</span>&#123;</span></span><br><span class="line">    ll num[<span class="number">28</span>];</span><br><span class="line">    Occur()</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">memset</span>(<span class="keyword">this</span>-&gt;num,<span class="number">0</span>,<span class="keyword">sizeof</span>(<span class="keyword">this</span>-&gt;num));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> !=(<span class="keyword">const</span> ll &amp;rhs)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">26</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(num[i]!=rhs)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(num,<span class="number">0</span>,<span class="keyword">sizeof</span>(num));</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegmentTree</span>&#123;</span></span><br><span class="line">    ll l,r;</span><br><span class="line">    Occur sum,cover;</span><br><span class="line">&#125;;</span><br><span class="line">SegmentTree tree[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line">ll cnt,qcnt,l,r,x;</span><br><span class="line"><span class="keyword">char</span> str[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Occur <span class="keyword">operator</span> +(Occur x,Occur y)</span><br><span class="line">&#123;</span><br><span class="line">    Occur res;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">26</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        res.num[i]=x.num[i]+y.num[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Occur <span class="keyword">operator</span> *(Occur x,ll y)</span><br><span class="line">&#123;</span><br><span class="line">    Occur res;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">26</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        res.num[i]=x.num[i]*y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[node].sum=tree[node&lt;&lt;<span class="number">1</span>].sum+tree[(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">(ll l,ll r,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[node].l=l,tree[node].r=r;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[node].sum.num[str[l<span class="number">-1</span>]-<span class="string">'a'</span>+<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    create(l,mid,node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    create(mid+<span class="number">1</span>,r,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">    update(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">spread</span><span class="params">(ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll ls=node&lt;&lt;<span class="number">1</span>,rs=ls|<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(tree[node].cover!=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">tree[ls].sum=tree[node].cover*(tree[ls].r-tree[ls].l+<span class="number">1</span>);</span><br><span class="line">tree[rs].sum=tree[node].cover*(tree[rs].r-tree[rs].l+<span class="number">1</span>);</span><br><span class="line">tree[ls].cover=tree[node].cover;</span><br><span class="line">tree[rs].cover=tree[node].cover;</span><br><span class="line">tree[node].cover.clear();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cover</span><span class="params">(ll l,ll r,Occur val,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=tree[node].l&amp;&amp;r&gt;=tree[node].r)</span><br><span class="line">&#123;</span><br><span class="line">tree[node].sum=val*(tree[node].r-tree[node].l+<span class="number">1</span>);</span><br><span class="line">tree[node].cover=val;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">ll mid=(tree[node].l+tree[node].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">spread(node);</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid)</span><br><span class="line">&#123;</span><br><span class="line">cover(l,r,val,node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid)</span><br><span class="line">&#123;</span><br><span class="line">cover(l,r,val,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">update(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Occur <span class="title">query</span><span class="params">(ll l,ll r,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=tree[node].l&amp;&amp;r&gt;=tree[node].r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> tree[node].sum;</span><br><span class="line">&#125; </span><br><span class="line">ll mid=(tree[node].l+tree[node].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">Occur res;</span><br><span class="line">spread(node);</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid)</span><br><span class="line">&#123;</span><br><span class="line">res=res+query(l,r,node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid)</span><br><span class="line">&#123;</span><br><span class="line">res=res+query(l,r,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">sorts</span><span class="params">(ll l,ll r,ll cmp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll cur=l;</span><br><span class="line">Occur val=query(l,r,<span class="number">1</span>),curr;</span><br><span class="line"><span class="keyword">if</span>(!cmp)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">26</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">curr.num[i]=<span class="number">1</span>,curr.num[i<span class="number">-1</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(val.num[i])</span><br><span class="line">&#123;</span><br><span class="line">cover(l,l+val.num[i]<span class="number">-1</span>,curr,<span class="number">1</span>);</span><br><span class="line">l=l+val.num[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">26</span>;i;i--)</span><br><span class="line">&#123;</span><br><span class="line">curr.num[i]=<span class="number">1</span>,curr.num[i+<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(val.num[i])</span><br><span class="line">&#123;</span><br><span class="line">cover(l,l+val.num[i]<span class="number">-1</span>,curr,<span class="number">1</span>);</span><br><span class="line">l=l+val.num[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">spreadAll</span><span class="params">(ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">spread(node);</span><br><span class="line"><span class="keyword">if</span>(tree[node].l==tree[node].r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">spreadAll(node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">spreadAll((node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">update(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">preorder</span><span class="params">(ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tree[node].l==tree[node].r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">26</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(tree[node].sum.num[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">putchar</span>((<span class="keyword">char</span>)(i+<span class="string">'a'</span><span class="number">-1</span>));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">preorder(node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">preorder((node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt=read(),qcnt=read();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,&amp;str);</span><br><span class="line">    create(<span class="number">1</span>,cnt,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;qcnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    l=read(),r=read(),x=read();</span><br><span class="line">    sorts(l,r,!x);</span><br><span class="line">&#125;</span><br><span class="line">spreadAll(<span class="number">1</span>),preorder(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「CodeForces 501D」Misha and Permutations Summation</title>
      <link href="/2018/11/19/%E3%80%8CCodeForces-501D%E3%80%8DMisha-and-Permutations-Summation/"/>
      <url>/2018/11/19/%E3%80%8CCodeForces-501D%E3%80%8DMisha-and-Permutations-Summation/</url>
      
        <content type="html"><![CDATA[<p>设$P$是一个长度为$n$的排列，定义$\operatorname{ord}P$为$P$在所有排列中的名次。<br>给定两个长度为$n$的排列$P_1,P_2$，求第$\operatorname{ord}P_1+\operatorname{ord}P_2 \bmod n!$小的排列。<br><a id="more"></a></p><h3 id="前置技能"><a href="#前置技能" class="headerlink" title="前置技能"></a>前置技能</h3><p><a href="https://karry5307.github.io/2018/11/18/%E3%80%8CUVa-11525%E3%80%8DPermutation/" target="_blank" rel="noopener">康托展开</a><br>这里讲从排列映射到数的过程，还是假设这个排列长度为$n$。<br>对于第$i$次操作，统计这个数后面有多少个比它小的数，记为$a_i$<br>那么答案是$\sum_{i=1}^{n}a_i(n-i)!$</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这一个题和<a href="https://www.luogu.org/problemnew/show/UVA11525" target="_blank" rel="noopener">UVa 11525</a>很像，不会做的可以参考一下<a href="https://karry5307.github.io/2018/11/18/%E3%80%8CUVa-11525%E3%80%8DPermutation/" target="_blank" rel="noopener">本蒟蒻的题解</a>，做法就是用一颗权值线段树维护全局没被放进排列中的第$k$小，所以做这个题可以先把它转化为上面那个题。<br>首先把两个排列映射到整数，这里要统计后面有多少个比第$i$个数$a_i$小的数。如果暴力找的话是$O(n^2)$的。但是，可以发现排列是由$0,1\cdots n-1$组成的，那么<strong>排列里比这个数小的数的个数就是这个数</strong>。<br>这句话不是很好懂，但是很重要。因为排列里比这个数$x$小的只有$0,1\cdots x-1$，共有$x$个，所以有$x$个数比$x$小。<br>所以可以显然推出后面比$a_i$小的数的个$=$总共比$a_i$小的数$-$在$a_i$前面比$a_i$小的数。而排在前面比$a_i$小的数可以用树状数组维护。<br>用一个树状数组维护第$i$个数是否出现过。对于当前的数，统计$1$到当前数$-1$中的和，就是在这个数前面比它小的数。<br>所以说，可以用$O(n\log n)$的时间复杂度把$a_{P_1,i}$和$a_{P_2,i}$（$a$指的是前置技能里的$a$数组）求出来，记$S_i=a_{P_1,i}+a_{P_2,i}$。<br>接下来化简$S$，由于$(x+1)\cdot x!=(x+1)!$，于是可以用这个性质化简$S_i$，使得$0\leq S_i\leq n-i$。<br>具体方法是，对于$S_i$，$S_{i+1}+=S_i \% n-i,S_i\%=n-i$就可以简化$S$数组了。<br>最后我们就把问题转化为上面的那个题了，用那个题的方法做就可以了qwq。<br>时间复杂度$O(n\log n)$，常数不大<del>除了权值线段树</del>，跑了$2270$ms，拿了最优解qwq。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">2e5</span>+<span class="number">51</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BIT</span>&#123;</span></span><br><span class="line">    ll size;</span><br><span class="line">    ll num[MAXN];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">lowbit</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x&amp;-x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(ll pos,ll val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(;pos&lt;=size;pos+=lowbit(pos))</span><br><span class="line">        &#123;</span><br><span class="line">            num[pos]+=val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">queryPrefix</span><span class="params">(ll pos)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ll res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;pos;pos-=lowbit(pos))</span><br><span class="line">        &#123;</span><br><span class="line">            res+=num[pos];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegmentTree</span>&#123;</span></span><br><span class="line">    ll l,r,size;</span><br><span class="line">&#125;;</span><br><span class="line">BIT bit,bit2;</span><br><span class="line">SegmentTree tree[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line">ll cnt,num;</span><br><span class="line">ll perm[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[node].size=tree[node&lt;&lt;<span class="number">1</span>].size+tree[(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">(ll l,ll r,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[node].l=l,tree[node].r=r;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[node].size=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    create(l,mid,node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    create(mid+<span class="number">1</span>,r,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">    update(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">findVal</span><span class="params">(ll rk,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[node].l==tree[node].r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[node].size=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> tree[node].l;</span><br><span class="line">    &#125;</span><br><span class="line">    ll res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(rk&lt;=tree[node&lt;&lt;<span class="number">1</span>].size)</span><br><span class="line">    &#123;</span><br><span class="line">        res=findVal(rk,node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        res=findVal(rk-tree[node&lt;&lt;<span class="number">1</span>].size,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">    &#125; </span><br><span class="line">    update(node);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    bit.size=bit2.size=cnt=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        num=read();</span><br><span class="line">        perm[i]=num-bit.queryPrefix(num),bit.add(num+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        num=read();</span><br><span class="line">        perm[i]+=num-bit2.queryPrefix(num),bit2.add(num+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=cnt,j=<span class="number">0</span>;i;i--,j++)</span><br><span class="line">    &#123;</span><br><span class="line">        perm[i<span class="number">-1</span>]+=perm[i]/(j+<span class="number">1</span>),perm[i]%=(j+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    create(<span class="number">1</span>,cnt,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,findVal(perm[i]+<span class="number">1</span>,<span class="number">1</span>)<span class="number">-1</span>);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CodeForces </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 权值线段树 </tag>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「UVa 11525」Permutation</title>
      <link href="/2018/11/18/%E3%80%8CUVa-11525%E3%80%8DPermutation/"/>
      <url>/2018/11/18/%E3%80%8CUVa-11525%E3%80%8DPermutation/</url>
      
        <content type="html"><![CDATA[<p>给定$n$个数$x_1,x_2\cdots x_n$，已知$S=\sum^{n}_{i=1}x_i(n-i)!$，求第$S$个排列<br><a id="more"></a></p><h3 id="前置技能"><a href="#前置技能" class="headerlink" title="前置技能"></a>前置技能</h3><p>康托展开是一个比较常用的哈希技巧，可以将一个排列$a_1,a_2\cdots a_n$映射到一个整数$k$，这个整数$k$就是这个排列在所有排列中的名次。<br>由于它是双射的，所以也可以从一个整数还原这个整数所对应的全排列。<br>假定这个排列是由$n$个数组成的，那么有从一个整数$k$映射到第$k$小的排列的方法：<br>将$k$写成$\sum^{n}_{i=1}x_i(n-i)!$的形式，其中对于任意$x_i$，有$0\leq x_i\leq i$。<br>对于第$i$次操作，选择当前没有选过的第$x_i$大的数加入排列。<br>进行第二步$n$次，所得的排列即为所求。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>注意到，题目已经完成了第一步，所以只需要完成第二步就可以了。<br>而数据范围$k\leq 5\times10^4$，所以要写一种高效的数据结构，支持区间第$k$小和删除一个数。<br>这里用权值线段树实现，由于$1\leq x_i\leq n$（这里的变量都是值上面的题意而言的），所以不用离散化。于是查询变得很简单了，但删除呢？<br>可以将这个数置为$0$，意思是被删除了。如果这个节点的值为$0$，那么整个子树都不复存在。<br>这份代码还是跑的蛮快的，$60$ms。<del>可还是没有最优解跑的快</del><br>最后，<strong>此题卡输出格式，</strong>要像我这么写才能AC</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">5e4</span>+<span class="number">51</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegmentTree</span>&#123;</span></span><br><span class="line">    ll l,r,size;</span><br><span class="line">&#125;;</span><br><span class="line">ll test,cnt,num;</span><br><span class="line">SegmentTree tree[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[node].size=tree[node&lt;&lt;<span class="number">1</span>].size+tree[(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">(ll l,ll r,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[node].l=l,tree[node].r=r;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[node].size=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    create(l,mid,node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    create(mid+<span class="number">1</span>,r,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">    update(node);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">findVal</span><span class="params">(ll rk,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[node].l==tree[node].r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[node].size=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> tree[node].l;</span><br><span class="line">    &#125;</span><br><span class="line">    ll res;</span><br><span class="line">    <span class="keyword">if</span>(rk&lt;=tree[node&lt;&lt;<span class="number">1</span>].size)</span><br><span class="line">    &#123;</span><br><span class="line">        res=findVal(rk,node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        res=findVal(rk-tree[node&lt;&lt;<span class="number">1</span>].size,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    update(node);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    test=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;test;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt=read();</span><br><span class="line">        create(<span class="number">1</span>,cnt,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cnt;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            num=read()+<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>,findVal(num,<span class="number">1</span>));</span><br><span class="line">            <span class="built_in">putchar</span>(j==cnt<span class="number">-1</span>?<span class="string">'\n'</span>:<span class="string">' '</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 权值线段树 </tag>
            
            <tag> UVa </tag>
            
            <tag> 组合数学 </tag>
            
            <tag> 康托展开 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「UVa 11297」Census</title>
      <link href="/2018/11/16/%E3%80%8CUVa-11297%E3%80%8DCensus/"/>
      <url>/2018/11/16/%E3%80%8CUVa-11297%E3%80%8DCensus/</url>
      
        <content type="html"><![CDATA[<p>给定一个$n\times n$的矩阵，支持单点修改，查询子矩阵最大值和子矩阵最小值。<br><a id="more"></a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.org/problemnew/show/UVA11297" target="_blank" rel="noopener">UVa 11297</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>经典的二维带修RMQ问题。<br>一个暴力的思想是建$500$棵线段树，对于修改就在对应的线段树上修改，对于查询的时候就一行一行的查询，每一次把答案与之前的答案合并一下就好了qwq。<br>这样子做的时间复杂度是$O(qn\log n)$，不会TLE，但是跑的极慢，在测的时候跑了$1070$ms，没有树套树跑的快……</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">551</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegmentTree</span>&#123;</span></span><br><span class="line">    ll l,r,minn,maxn;  </span><br><span class="line">&#125;;</span><br><span class="line">SegmentTree tree[MAXN][MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line">ll size,qcnt,lx,ly,rx,ry,x,y,val,minn,maxn;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line">ll num[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(ll dim,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[dim][node].maxn=max(tree[dim][node&lt;&lt;<span class="number">1</span>].maxn,tree[dim][(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].maxn);</span><br><span class="line">    tree[dim][node].minn=min(tree[dim][node&lt;&lt;<span class="number">1</span>].minn,tree[dim][(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].minn);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">(ll dim,ll l,ll r,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[dim][node].l=l,tree[dim][node].r=r;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[dim][node].minn=tree[dim][node].maxn=num[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    create(dim,l,mid,node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    create(dim,mid+<span class="number">1</span>,r,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">    update(dim,node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">changePoint</span><span class="params">(ll dim,ll pos,ll val,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[dim][node].l==tree[dim][node].r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[dim][node].minn=tree[dim][node].maxn=val;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mid=(tree[dim][node].l+tree[dim][node].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(pos&lt;=mid)</span><br><span class="line">    &#123;</span><br><span class="line">        changePoint(dim,pos,val,node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        changePoint(dim,pos,val,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    update(dim,node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">queryMax</span><span class="params">(ll dim,ll l,ll r,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tree[dim][node].l&amp;&amp;r&gt;=tree[dim][node].r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> tree[dim][node].maxn;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mid=(tree[dim][node].l+tree[dim][node].r)&gt;&gt;<span class="number">1</span>,res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid)</span><br><span class="line">    &#123;</span><br><span class="line">        res=max(res,queryMax(dim,l,r,node&lt;&lt;<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid)</span><br><span class="line">    &#123;</span><br><span class="line">        res=max(res,queryMax(dim,l,r,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">queryMin</span><span class="params">(ll dim,ll l,ll r,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tree[dim][node].l&amp;&amp;r&gt;=tree[dim][node].r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> tree[dim][node].minn;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mid=(tree[dim][node].l+tree[dim][node].r)&gt;&gt;<span class="number">1</span>,res=<span class="number">0x7fffffff</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid)</span><br><span class="line">    &#123;</span><br><span class="line">        res=min(res,queryMin(dim,l,r,node&lt;&lt;<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid)</span><br><span class="line">    &#123;</span><br><span class="line">        res=min(res,queryMin(dim,l,r,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    size=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=size;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=size;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            num[j]=read();</span><br><span class="line">        &#125;</span><br><span class="line">        create(i,<span class="number">1</span>,size,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    qcnt=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;qcnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;ch;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">'q'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            lx=read(),ly=read(),rx=read(),ry=read();</span><br><span class="line">            maxn=<span class="number">0</span>,minn=<span class="number">0x7fffffff</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=lx;j&lt;=rx;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                maxn=max(maxn,queryMax(j,ly,ry,<span class="number">1</span>));</span><br><span class="line">                minn=min(minn,queryMin(j,ly,ry,<span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,maxn,minn);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            x=read(),y=read(),val=read();</span><br><span class="line">            changePoint(x,y,val,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> UVa </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「UVa 11992」Fast Matrix Operations</title>
      <link href="/2018/11/15/%E3%80%8CUVa-11992%E3%80%8DFast-Matrix-Operations/"/>
      <url>/2018/11/15/%E3%80%8CUVa-11992%E3%80%8DFast-Matrix-Operations/</url>
      
        <content type="html"><![CDATA[<p>给定一个$r\times c$矩阵，支持子矩阵加某一个值，子矩阵覆盖为某一个值，查询某个子矩阵的值。<br><a id="more"></a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>一如既往放洛谷的链接……<br><a href="https://www.luogu.org/problemnew/show/UVA11992" target="_blank" rel="noopener">UVa 11992</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>一个暴力的想法是由于$r$不超过$20$，所以可以开$20$棵线段树，修改和覆盖就不难啦qwq。<br>至于查询，可以处理这一行的时候合并这一行的答案和原来的答案就好了qwq。<del>所以我查询了$3$次</del><br>这个时间复杂度是$O(r\log c)$，绝对不会T掉的</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>代码略丑，$233$行……</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">5e4</span>+<span class="number">51</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegmentTree</span>&#123;</span></span><br><span class="line">    ll l,r,sum,maxn,minn,tag,cover;</span><br><span class="line">&#125;; </span><br><span class="line">SegmentTree tree[<span class="number">21</span>][MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line">ll length,width,qcnt,lx,rx,ly,ry,op,val,sum,maxn,minn;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(ll dim,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[dim][node].sum=tree[dim][node&lt;&lt;<span class="number">1</span>].sum+tree[dim][(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].sum;</span><br><span class="line">    tree[dim][node].maxn=max(tree[dim][node&lt;&lt;<span class="number">1</span>].maxn,tree[dim][(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].maxn);</span><br><span class="line">    tree[dim][node].minn=min(tree[dim][node&lt;&lt;<span class="number">1</span>].minn,tree[dim][(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].minn);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">(ll dim,ll l,ll r,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[dim][node].l=l,tree[dim][node].r=r,tree[dim][node].cover=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[dim][node].sum=tree[dim][node].maxn=tree[dim][node].minn=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    create(dim,l,mid,node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    create(dim,mid+<span class="number">1</span>,r,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">    update(dim,node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">spread</span><span class="params">(ll dim,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ls=node&lt;&lt;<span class="number">1</span>,rs=ls|<span class="number">1</span>;</span><br><span class="line">    ll lx=(tree[dim][ls].r-tree[dim][ls].l+<span class="number">1</span>);</span><br><span class="line">    ll rx=(tree[dim][rs].r-tree[dim][rs].l+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(tree[dim][node].cover!=<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[dim][ls].maxn=tree[dim][node].cover;</span><br><span class="line">        tree[dim][rs].maxn=tree[dim][node].cover;</span><br><span class="line">        tree[dim][ls].minn=tree[dim][node].cover;</span><br><span class="line">        tree[dim][rs].minn=tree[dim][node].cover;</span><br><span class="line">        tree[dim][ls].sum=tree[dim][node].cover*lx;</span><br><span class="line">        tree[dim][rs].sum=tree[dim][node].cover*rx;</span><br><span class="line">        tree[dim][ls].cover=tree[dim][rs].cover=tree[dim][node].cover;</span><br><span class="line">        tree[dim][ls].tag=tree[dim][rs].tag=<span class="number">0</span>;</span><br><span class="line">        tree[dim][node].cover=<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(tree[dim][node].tag)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[dim][ls].maxn+=tree[dim][node].tag;</span><br><span class="line">        tree[dim][rs].maxn+=tree[dim][node].tag;</span><br><span class="line">        tree[dim][ls].minn+=tree[dim][node].tag;</span><br><span class="line">        tree[dim][rs].minn+=tree[dim][node].tag;</span><br><span class="line">        tree[dim][ls].sum+=tree[dim][node].tag*lx;</span><br><span class="line">        tree[dim][rs].sum+=tree[dim][node].tag*rx;</span><br><span class="line">        tree[dim][ls].tag+=tree[dim][node].tag;</span><br><span class="line">        tree[dim][rs].tag+=tree[dim][node].tag;</span><br><span class="line">        tree[dim][node].tag=<span class="number">0</span>;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(ll dim,ll l,ll r,ll val,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tree[dim][node].l&amp;&amp;r&gt;=tree[dim][node].r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[dim][node].sum+=(tree[dim][node].r-tree[dim][node].l+<span class="number">1</span>)*val;</span><br><span class="line">        tree[dim][node].maxn+=val,tree[dim][node].minn+=val;</span><br><span class="line">        tree[dim][node].tag+=val;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    spread(dim,node);</span><br><span class="line">    ll mid=(tree[dim][node].l+tree[dim][node].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid)</span><br><span class="line">    &#123;</span><br><span class="line">        add(dim,l,r,val,node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid)</span><br><span class="line">    &#123;</span><br><span class="line">        add(dim,l,r,val,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    update(dim,node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cover</span><span class="params">(ll dim,ll l,ll r,ll val,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tree[dim][node].l&amp;&amp;r&gt;=tree[dim][node].r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[dim][node].sum=(tree[dim][node].r-tree[dim][node].l+<span class="number">1</span>)*val;</span><br><span class="line">        tree[dim][node].maxn=tree[dim][node].minn=val;</span><br><span class="line">        tree[dim][node].cover=val;</span><br><span class="line">        tree[dim][node].tag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    spread(dim,node);</span><br><span class="line">    ll mid=(tree[dim][node].l+tree[dim][node].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid)</span><br><span class="line">    &#123;</span><br><span class="line">        cover(dim,l,r,val,node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid)</span><br><span class="line">    &#123;</span><br><span class="line">        cover(dim,l,r,val,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    update(dim,node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">query</span><span class="params">(ll dim,ll l,ll r,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tree[dim][node].l&amp;&amp;r&gt;=tree[dim][node].r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> tree[dim][node].sum;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mid=(tree[dim][node].l+tree[dim][node].r)&gt;&gt;<span class="number">1</span>,res=<span class="number">0</span>;</span><br><span class="line">    spread(dim,node);</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid)</span><br><span class="line">    &#123;</span><br><span class="line">        res+=query(dim,l,r,node&lt;&lt;<span class="number">1</span>);  </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid)</span><br><span class="line">    &#123;</span><br><span class="line">        res+=query(dim,l,r,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">queryMax</span><span class="params">(ll dim,ll l,ll r,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tree[dim][node].l&amp;&amp;r&gt;=tree[dim][node].r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> tree[dim][node].maxn;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mid=(tree[dim][node].l+tree[dim][node].r)&gt;&gt;<span class="number">1</span>,res=<span class="number">0</span>;</span><br><span class="line">    spread(dim,node);</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid)</span><br><span class="line">    &#123;</span><br><span class="line">        res=max(res,queryMax(dim,l,r,node&lt;&lt;<span class="number">1</span>));  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid)</span><br><span class="line">    &#123;</span><br><span class="line">        res=max(res,queryMax(dim,l,r,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">queryMin</span><span class="params">(ll dim,ll l,ll r,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tree[dim][node].l&amp;&amp;r&gt;=tree[dim][node].r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> tree[dim][node].minn;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mid=(tree[dim][node].l+tree[dim][node].r)&gt;&gt;<span class="number">1</span>,res=<span class="number">0x7fffffff</span>;</span><br><span class="line">    spread(dim,node);</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid)</span><br><span class="line">    &#123;</span><br><span class="line">        res=min(res,queryMin(dim,l,r,node&lt;&lt;<span class="number">1</span>));  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid)</span><br><span class="line">    &#123;</span><br><span class="line">        res=min(res,queryMin(dim,l,r,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    width=read(),qcnt=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=length;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        create(i,<span class="number">1</span>,width,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=qcnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        op=read(),lx=read(),ly=read(),rx=read(),ry=read();</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            val=read();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=lx;j&lt;=rx;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                add(j,ly,ry,val,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            val=read(); </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=lx;j&lt;=rx;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                cover(j,ly,ry,val,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sum=maxn=<span class="number">0</span>,minn=<span class="number">0x7fffffff</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=lx;j&lt;=rx;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                sum+=query(j,ly,ry,<span class="number">1</span>);</span><br><span class="line">                maxn=max(maxn,queryMax(j,ly,ry,<span class="number">1</span>));</span><br><span class="line">                minn=min(minn,queryMin(j,ly,ry,<span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>,sum,minn,maxn);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">4</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=length;j++) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=width;k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%d "</span>,query(j,k,k,<span class="number">1</span>));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;length)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        solve();</span><br><span class="line">        <span class="built_in">memset</span>(tree,<span class="number">0</span>,<span class="keyword">sizeof</span>(tree));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> UVa </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>NOIP2018滚粗记</title>
      <link href="/2018/11/15/NOIP2018%E6%BB%9A%E7%B2%97%E8%AE%B0/"/>
      <url>/2018/11/15/NOIP2018%E6%BB%9A%E7%B2%97%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>NOIP要咕咕了……<br><a id="more"></a></p><h3 id="Day-0"><a href="#Day-0" class="headerlink" title="Day 0"></a>Day 0</h3><p>上午写模板,lca,Heap+Dijkstra,k短路,网络流，好像背不下来……<br>下午与全机房的大佬颓slay，咕咕咕……</p><h3 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h3><h4 id="Task-1-road"><a href="#Task-1-road" class="headerlink" title="Task 1 road"></a>Task 1 road</h4><p>开始：先写个线段树再说吧……<br>后来:这……这不是积木大赛吗？我怎么一开始就写的线段树……</p><h4 id="Task-2-money"><a href="#Task-2-money" class="headerlink" title="Task 2 money"></a>Task 2 money</h4><p>开始：一脸茫然的样子……<br>后来：可以乱搞诶，消掉其他货币组成的货币，剩下的直接选，标记一下，$O(Tn25000)$应该不会TLE……</p><h4 id="Task-3-track"><a href="#Task-3-track" class="headerlink" title="Task 3 track"></a>Task 3 track</h4><p>开始：应该是个二分答案……<br>后来：觉得$m=1$可做，好像有$10$分啊，后面的骗一下分吧，今天要$100+100+10=210$滚粗了……</p><h3 id="Day-2"><a href="#Day-2" class="headerlink" title="Day 2"></a>Day 2</h3><h4 id="Task-1-travel"><a href="#Task-1-travel" class="headerlink" title="Task 1 travel"></a>Task 1 travel</h4><p>开始：树上$60$分真好做，基环树？不会……<br>后来：好像可以找环，断边乱搞……（事实上这是非正解，咕咕，但是可以过咕咕F的数据）</p><h4 id="Task-2-game"><a href="#Task-2-game" class="headerlink" title="Task 2 game"></a>Task 2 game</h4><p>开始：先爆搜，打个表再说……<br>后来：为什么$3\times3$不对，搜出$144$，为什么……骗一点分吧</p><h4 id="Task-3-defense"><a href="#Task-3-defense" class="headerlink" title="Task 3 defense"></a>Task 3 defense</h4><p>开始：好像是个$dp$……<br>后来：我擦！$ddp$？不会做，今天是不是要$76+33+0=109$滚粗……</p><h3 id="Day-log-n"><a href="#Day-log-n" class="headerlink" title="Day $log(n)$"></a>Day $log(n)$</h3><p>洛谷成绩$100+100+25+76+55+0=356$滚粗……</p><h3 id="Day-n"><a href="#Day-n" class="headerlink" title="Day $n$"></a>Day $n$</h3><p>咕咕F的成绩再一次咕掉了，我的博客也要咕掉……</p><h3 id="Day-n-log-n"><a href="#Day-n-log-n" class="headerlink" title="Day $n\log(n)$"></a>Day $n\log(n)$</h3><p><img src="/2018/11/15/NOIP2018滚粗记/score.JPG" alt=""><br>成绩？呵呵……技不如人，被吊打</p>]]></content>
      
      
      
        <tags>
            
            <tag> 游记/考试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P2532」[AHOI2012]树屋阶梯</title>
      <link href="/2018/11/10/%E3%80%8CLuogu-P2532%E3%80%8D-AHOI2012-%E6%A0%91%E5%B1%8B%E9%98%B6%E6%A2%AF/"/>
      <url>/2018/11/10/%E3%80%8CLuogu-P2532%E3%80%8D-AHOI2012-%E6%A0%91%E5%B1%8B%E9%98%B6%E6%A2%AF/</url>
      
        <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>NOIP rp++!<br><a id="more"></a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.org/problemnew/show/P2532" target="_blank" rel="noopener">Luogu P2532</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>考虑$f_i$表示搭$i$层高的阶梯的方案数，$g_{i,j}$表示最左下角的钢材上面有$i$层高，右边有$j$层高的方案数，那么如图<br><img src="/2018/11/10/「Luogu-P2532」-AHOI2012-树屋阶梯/42848.jpg" alt=""><br>$f_n=\sum^{n-1}_{i=1}g_{i,j}$<br>而<br>$i+j=n$且$g_{i,j}=f_if_j$<br>$\therefore f_n=\sum^{n-1}_{i=1}f_if_{n-i}$<br><del>显然</del>是卡特兰的递推式，所以就可以用卡特兰数求，但是要用高精度……</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">2e4</span>+<span class="number">51</span>; </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BigInt</span>&#123;</span></span><br><span class="line">    ll digit;</span><br><span class="line">    ll num[MAXN];</span><br><span class="line">    BigInt()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(num,<span class="number">0</span>,<span class="keyword">sizeof</span>(num));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">void</span> <span class="keyword">operator</span> =(ll x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(x)</span><br><span class="line">        &#123;</span><br><span class="line">            num[digit++]=x%<span class="number">10000</span>,x/=<span class="number">10000</span>;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">op</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,num[digit<span class="number">-1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=digit<span class="number">-2</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!num[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"0000"</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ll rest=<span class="number">3</span>-(ll)(<span class="built_in">log10</span>(num[i]));</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=rest;j;j--)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">putchar</span>(<span class="string">'0'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>,num[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &gt;(<span class="keyword">const</span> BigInt &amp;rhs)<span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(digit!=rhs.digit)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> digit&gt;rhs.digit;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=digit<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(num[i]!=rhs.num[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> num[i]&gt;rhs.num[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;; </span><br><span class="line">ll num;</span><br><span class="line">BigInt res;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> BigInt <span class="keyword">operator</span> +(BigInt x,BigInt y)</span><br><span class="line">&#123;</span><br><span class="line">    BigInt res;</span><br><span class="line">    ll carry=<span class="number">0</span>;</span><br><span class="line">    res.digit=max(x.digit,y.digit)+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=res.digit;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        res.num[i]=x.num[i]+y.num[i]+carry;</span><br><span class="line">        carry=res.num[i]/<span class="number">10000</span>,res.num[i]%=<span class="number">10000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!res.num[res.digit<span class="number">-1</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        res.digit--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> BigInt <span class="keyword">operator</span> *(BigInt x,ll y)</span><br><span class="line">&#123;</span><br><span class="line">    BigInt res;</span><br><span class="line">    ll carry=<span class="number">0</span>;</span><br><span class="line">    res.digit=x.digit+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=res.digit;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        res.num[i]=x.num[i]*y+carry;</span><br><span class="line">        carry=res.num[i]/<span class="number">10000</span>,res.num[i]%=<span class="number">10000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!res.num[res.digit<span class="number">-1</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        res.digit--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> BigInt <span class="keyword">operator</span> /(BigInt x,ll y)</span><br><span class="line">&#123;</span><br><span class="line">    BigInt res;</span><br><span class="line">    ll cur=<span class="number">0</span>;</span><br><span class="line">    res.digit=x.digit;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=x.digit<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        cur=cur*<span class="number">10000</span>+x.num[i];</span><br><span class="line">        <span class="keyword">if</span>(cur&gt;=y)</span><br><span class="line">        &#123;</span><br><span class="line">            res.num[i]=cur/y,cur%=y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!res.num[res.digit<span class="number">-1</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        res.digit--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    num=read();</span><br><span class="line">    res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2</span>*num;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        res=res*i;</span><br><span class="line">    &#125;</span><br><span class="line">    res=res/(num+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=num;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        res=res/i/i;</span><br><span class="line">    &#125;</span><br><span class="line">    res.op();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 高精 </tag>
            
            <tag> 数论 </tag>
            
            <tag> 卡特兰 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P3939」数颜色</title>
      <link href="/2018/11/08/%E3%80%8CLuogu-P3939%E3%80%8D%E6%95%B0%E9%A2%9C%E8%89%B2/"/>
      <url>/2018/11/08/%E3%80%8CLuogu-P3939%E3%80%8D%E6%95%B0%E9%A2%9C%E8%89%B2/</url>
      
        <content type="html"><![CDATA[<p>给定一个序列，支持交换两个元素和询问区间$(l,r)$内等于这个值的位置的数量。<br><a id="more"></a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.org/problemnew/show/P3939" target="_blank" rel="noopener">Luogu P3939</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>肯定有人学数据结构学傻了吧，我们机房有写cdq的，有写主席树的，跑的都<del>很快</del>亲测这份代码不吸氧比上面两份代码吸氧还快……<br><a href="https://www.luogu.org/record/show?rid=13432611" target="_blank" rel="noopener">评测结果</a><br>用vector记录每一种颜色的兔子出现在从左到右的哪几个位置，对于每个询问，二分查找出当前右端点$r$的位置和左端点$l-1$的位置，两个值相减即得答案，但是要注意边界处理。<br>对于交换，找到两个兔子的位置，直接进行交换即可，注意要把所有的信息都交换……</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">3e5</span>+<span class="number">51</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;ll&gt;rabbit[MAXN];</span><br><span class="line">ll cnt,ccnt,op,l,r,x,lx,rx,maxn;</span><br><span class="line"><span class="built_in">vector</span>&lt;ll&gt;::iterator bg,ed;</span><br><span class="line">ll color[MAXN],ind[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt=read(),ccnt=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        color[i]=read();</span><br><span class="line">        rabbit[color[i]].push_back(i);</span><br><span class="line">        ind[i]=rabbit[color[i]].size()<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=ccnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        op=read();</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            l=read()<span class="number">-1</span>,r=read(),x=read();</span><br><span class="line">            bg=rabbit[x].begin();</span><br><span class="line">            ed=rabbit[x].end();</span><br><span class="line">            <span class="keyword">if</span>(bg==ed)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            lx=lower_bound(bg,ed,l)-bg,rx=lower_bound(bg,ed,r)-bg;</span><br><span class="line">            <span class="keyword">if</span>(rabbit[x][lx]==l)</span><br><span class="line">            &#123;</span><br><span class="line">                lx++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(rabbit[x][rx]==r)</span><br><span class="line">            &#123;</span><br><span class="line">                rx++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,rx-lx);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            x=read();</span><br><span class="line">            <span class="keyword">if</span>(color[x]!=color[x+<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                rabbit[color[x]][ind[x]]=x+<span class="number">1</span>;</span><br><span class="line">                rabbit[color[x+<span class="number">1</span>]][ind[x+<span class="number">1</span>]]=x;</span><br><span class="line">                swap(color[x],color[x+<span class="number">1</span>]);</span><br><span class="line">                swap(ind[x],ind[x+<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
            <tag> 模拟 </tag>
            
            <tag> 二分查找 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>那些年我们做过的模板 I</title>
      <link href="/2018/11/08/%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E4%BB%AC%E5%81%9A%E8%BF%87%E7%9A%84%E6%A8%A1%E6%9D%BF/"/>
      <url>/2018/11/08/%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E4%BB%AC%E5%81%9A%E8%BF%87%E7%9A%84%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 树链剖分 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 最短路 </tag>
            
            <tag> DijkStra </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P1337」[JSOI2004]平衡点 / 吊打XXX</title>
      <link href="/2018/11/05/%E3%80%8CLuogu-P1337%E3%80%8D-JSOI2004-%E5%B9%B3%E8%A1%A1%E7%82%B9-%E5%90%8A%E6%89%93XXX/"/>
      <url>/2018/11/05/%E3%80%8CLuogu-P1337%E3%80%8D-JSOI2004-%E5%B9%B3%E8%A1%A1%E7%82%B9-%E5%90%8A%E6%89%93XXX/</url>
      
        <content type="html"><![CDATA[<p>给定一些带权点，求它们的带权费马点。<br><a id="more"></a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.org/problemnew/show/P1337" target="_blank" rel="noopener">Luogu P1337</a><br><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3680" target="_blank" rel="noopener">BZOJ 3680</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这题备选的解很多，所以采用<del>猜答案的方法</del>模拟退火来做此题。<br>注意下一些常数吧……<del>我是不会告诉你我卡了7次的</del></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">1e4</span>+<span class="number">51</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> delta=<span class="number">0.997</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x,y,weight; </span><br><span class="line">&#125;;</span><br><span class="line">Node nd[MAXN];</span><br><span class="line">ll cnt;</span><br><span class="line"><span class="keyword">double</span> resx,resy,res=<span class="number">1e18</span>,t; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">randInt</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>*rand()-RAND_MAX;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">potentialEnergy</span><span class="params">(<span class="keyword">double</span> x,<span class="keyword">double</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> sum=<span class="number">0</span>,xx,yy;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        xx=x-nd[i].x,yy=y-nd[i].y;</span><br><span class="line">        sum+=<span class="built_in">sqrt</span>(xx*xx+yy*yy)*nd[i].weight;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">simulatedAnnealing</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> x=resx,y=resy,rd,xx,yy,dt;</span><br><span class="line">    t=<span class="number">19260</span>;</span><br><span class="line">    <span class="keyword">while</span>(t&gt;<span class="number">1e-18</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        xx=resx+randInt()*t,yy=resy+randInt()*t;</span><br><span class="line">        rd=potentialEnergy(xx,yy),dt=rd-res;</span><br><span class="line">        <span class="keyword">if</span>(dt&lt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            x=xx,y=yy,resx=x,resy=y,res=rd;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">exp</span>(-dt/t)*RAND_MAX&gt;rand())</span><br><span class="line">            &#123;</span><br><span class="line">                x=xx,y=yy;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        t*=delta; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">SA</span><span class="params">(ll times)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;times;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        simulatedAnnealing();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    srand(time(<span class="number">0</span>)); </span><br><span class="line">    cnt=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        nd[i].x=read(),nd[i].y=read(),nd[i].weight=read();</span><br><span class="line">    &#125;</span><br><span class="line">    SA(<span class="number">9</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.3lf %.3lf"</span>,resx,resy);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
            <tag> BZOJ </tag>
            
            <tag> JSOI </tag>
            
            <tag> 随机化 </tag>
            
            <tag> 模拟退火 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P2197」【模板】nim游戏</title>
      <link href="/2018/11/02/%E3%80%8CLuogu-P2197%E3%80%8D%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91nim%E6%B8%B8%E6%88%8F/"/>
      <url>/2018/11/02/%E3%80%8CLuogu-P2197%E3%80%8D%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91nim%E6%B8%B8%E6%88%8F/</url>
      
        <content type="html"><![CDATA[<p>有$n$堆石子，第$i$堆有$a_i$个，$Alice$和$Bob$轮流取石子，$Alice$先取。每个游戏者只能取一堆石子，至少取一个，问哪个游戏者会赢。<br><a id="more"></a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.org/problemnew/show/P2197" target="_blank" rel="noopener">Luogu P2197</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>最基础的Nim游戏，先手必赢当且仅当$a_1 \operatorname{xor} a_2 \operatorname{xor} \cdots \operatorname{xor} a_n \not = 0$，代码很短。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line">ll test,cnt,res;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        res^=read();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(res!=<span class="number">0</span>?<span class="string">"Yes"</span>:<span class="string">"No"</span>);</span><br><span class="line">    res=<span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    test=read();</span><br><span class="line">    <span class="keyword">while</span>(test--)</span><br><span class="line">    &#123;</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
            <tag> 博弈论 </tag>
            
            <tag> Nim游戏 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P4438」[HNOI/AHOI2018]道路</title>
      <link href="/2018/11/01/%E3%80%8CLuogu-P4438%E3%80%8D-HNOI-AHOI2018-%E9%81%93%E8%B7%AF/"/>
      <url>/2018/11/01/%E3%80%8CLuogu-P4438%E3%80%8D-HNOI-AHOI2018-%E9%81%93%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<p>给你一颗有$2n-1$个节点的树，这一棵树的非叶节点均有两个儿子，左儿子与它连红边，右儿子与它连绿边，定义节点$i$的不便利值为<br>$c_i\cdot(a_i+x)\cdot(b_i+y)$<br>其中$x$表示根节点到节点$i$的未加粗红边数量，$y$表示根节点到节点$i$的未加粗绿边数量。<br>求加粗边数量为$n-1$的所有叶节点的不便利值。<br><a id="more"></a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.org/problemnew/show/P4438" target="_blank" rel="noopener">Luogu P4438</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>一道比较好的树形dp题。<br>将每一个城市标号$1$到$n-1$，乡村标号$n$到$2n-1$，设$dp[i][j][k]$表示标号后的$i$号节点到根节点要走过$j$条没有翻修的公路和$k$条没有翻修的铁路最小的不便利值。<br>设$l[i]$指的是通过公路连接$i$号结点的城市或乡村，$r[i]$指的是通过铁路连接$i$号结点的城市或乡村，那么<br>如果$i$是乡村，直接暴力算不便利值即可，即<br>$dp[i][j][k]=c_i\cdot(a_i+j)\cdot(b_i+k)$<br>如果$i$是城市，因为最多翻修$n-1$条路，所以考虑对通向每一个城市的公路或铁路进行翻修。<br>翻修通往城市$i$的公路的不便利值是$dp[l_i][j+1][k]+dp[r_i[j][k]$（因为通向$i$的铁路没翻修），铁路同理，即<br>$dp[i][j][k]=\min(dp[l_i][j+1][k]+dp[r_i[j][k],dp[l_i[j][k]+dp[r_i][j][k+1])$<br>所以就得到了转移方程。<br>最后善意的提醒一句，<strong>本题卡空间</strong>，大佬们可以将$dp$的一维改成$dfn$，蒟蒻不会，只能暴力</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">4e4</span>+<span class="number">51</span>;</span><br><span class="line">ll cnt;</span><br><span class="line">ll l[MAXN],r[MAXN],lx[MAXN],rx[MAXN];</span><br><span class="line">ll x[MAXN],y[MAXN],z[MAXN];</span><br><span class="line">ll dp[MAXN][<span class="number">41</span>][<span class="number">41</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node&gt;=cnt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    lx[l[node]]=lx[node]+<span class="number">1</span>,lx[r[node]]=lx[node];</span><br><span class="line">    rx[r[node]]=rx[node]+<span class="number">1</span>,rx[l[node]]=rx[node];</span><br><span class="line">    dfs(l[node]);</span><br><span class="line">    dfs(r[node]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ddp</span><span class="params">(ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll lc,rc;</span><br><span class="line">    <span class="keyword">if</span>(node&gt;=cnt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=lx[node];i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=rx[node];j++)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[node][i][j]=<span class="number">1l</span>l*(x[node]+i)*(y[node]+j)*z[node];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        ddp(l[node]);</span><br><span class="line">        ddp(r[node]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=lx[node];i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=rx[node];j++)</span><br><span class="line">            &#123;</span><br><span class="line">                lc=dp[l[node]][i][j]+dp[r[node]][i][j+<span class="number">1</span>];</span><br><span class="line">                rc=dp[r[node]][i][j]+dp[l[node]][i+<span class="number">1</span>][j];</span><br><span class="line">                dp[node][i][j]=min(lc,rc);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        l[i]=read(),r[i]=read();</span><br><span class="line">        l[i]=l[i]&lt;<span class="number">0</span>?-l[i]+cnt<span class="number">-1</span>:l[i],r[i]=r[i]&lt;<span class="number">0</span>?-r[i]+cnt<span class="number">-1</span>:r[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        x[i+cnt<span class="number">-1</span>]=read(),y[i+cnt<span class="number">-1</span>]=read(),z[i+cnt<span class="number">-1</span>]=read();</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>),ddp(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>,dp[<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
            <tag> 各省省选 </tag>
            
            <tag> DP </tag>
            
            <tag> 树形DP </tag>
            
            <tag> HNOI </tag>
            
            <tag> AHOI </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「SPOJ 2713」Can you answer these queries IV</title>
      <link href="/2018/10/28/%E3%80%8CSPOJ-2713%E3%80%8DCan-you-answer-these-queries-IV/"/>
      <url>/2018/10/28/%E3%80%8CSPOJ-2713%E3%80%8DCan-you-answer-these-queries-IV/</url>
      
        <content type="html"><![CDATA[<p>给一段正整数构成的区间，支持区间开平方以及询问区间和。<br><a id="more"></a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.org/problemnew/show/SP2713" target="_blank" rel="noopener">SPOJ 2713</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>考虑线段树，显然区间开平方是不能用<script type="math/tex">lazy\ tag</script>的，所以我们选择暴力修改。<br>先证明一个引理，区间最大值为<script type="math/tex">1</script>的区间进行修改是没有意义的。（这个证明算是补了一个坑）<br>证明：由于区间内所有数是正整数，所以区间最大值为<script type="math/tex">1</script>的区间内所有数均为<script type="math/tex">1</script>，而<script type="math/tex">\sqrt{1}=1</script>，故修改区间内的值没有意义，证毕。<br>于是我们考虑在修改区间时判断一下当前区间最大值是不是<script type="math/tex">1</script>，如果是，就没有修改的必要。如果这个节点的左右端点重合，直接修改即可，这样可以少修改许多修改了也没用的区间，至于查询还是一样的。<br>提醒大家有多组数据，<strong>记得初始化</strong></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">1e5</span>+<span class="number">51</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegmentTree</span>&#123;</span></span><br><span class="line">    ll l,r,sum,maxn;</span><br><span class="line">&#125;;</span><br><span class="line">SegmentTree tree[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line">ll cnt,qcnt,op,l,r,ccnt;</span><br><span class="line">ll num[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[node].sum=tree[node&lt;&lt;<span class="number">1</span>].sum+tree[(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].sum;</span><br><span class="line">    tree[node].maxn=max(tree[node&lt;&lt;<span class="number">1</span>].maxn,tree[(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].maxn);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">(ll l,ll r,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[node].l=l,tree[node].r=r;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[node].sum=tree[node].maxn=num[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    create(l,mid,node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    create(mid+<span class="number">1</span>,r,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">    update(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(ll l,ll r,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[node].maxn&lt;=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(tree[node].l==tree[node].r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[node].sum=tree[node].maxn=<span class="built_in">sqrt</span>(tree[node].sum);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mid=(tree[node].l+tree[node].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid)</span><br><span class="line">    &#123;</span><br><span class="line">        change(l,r,node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid)</span><br><span class="line">    &#123;</span><br><span class="line">        change(l,r,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    update(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">querySum</span><span class="params">(ll l,ll r,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tree[node].l&amp;&amp;r&gt;=tree[node].r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> tree[node].sum;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mid=(tree[node].l+tree[node].r)&gt;&gt;<span class="number">1</span>,res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid)</span><br><span class="line">    &#123;</span><br><span class="line">        res+=querySum(l,r,node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid)</span><br><span class="line">    &#123;</span><br><span class="line">        res+=querySum(l,r,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">queryMax</span><span class="params">(ll l,ll r,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tree[node].l&amp;&amp;r&gt;=tree[node].r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> tree[node].maxn;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mid=(tree[node].l+tree[node].r)&gt;&gt;<span class="number">1</span>,res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid)</span><br><span class="line">    &#123;</span><br><span class="line">        res=max(res,queryMax(l,r,node&lt;&lt;<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid)</span><br><span class="line">    &#123;</span><br><span class="line">        res=max(res,queryMax(l,r,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;cnt)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%lld:\n"</span>,++ccnt);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            num[i]=read();</span><br><span class="line">        &#125;</span><br><span class="line">        create(<span class="number">1</span>,cnt,<span class="number">1</span>);</span><br><span class="line">        qcnt=read();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;qcnt;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            op=read(),l=read(),r=read();</span><br><span class="line">            <span class="keyword">if</span>(l&gt;r)</span><br><span class="line">            &#123;</span><br><span class="line">                swap(l,r);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(op)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,querySum(l,r,<span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(queryMax(l,r,<span class="number">1</span>)&gt;<span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    change(l,r,<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(num,<span class="number">0</span>,<span class="keyword">sizeof</span>(num));</span><br><span class="line">        <span class="built_in">memset</span>(tree,<span class="number">0</span>,<span class="keyword">sizeof</span>(tree));</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> SPOJ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P2742」【模板】二维凸包</title>
      <link href="/2018/10/21/%E3%80%8CLuogu-P2742%E3%80%8D%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E4%BA%8C%E7%BB%B4%E5%87%B8%E5%8C%85/"/>
      <url>/2018/10/21/%E3%80%8CLuogu-P2742%E3%80%8D%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E4%BA%8C%E7%BB%B4%E5%87%B8%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<p>给定一个点集，求它的凸包的周长。<br><a id="more"></a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.org/problemnew/show/P2742" target="_blank" rel="noopener">Luogu P2742</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>二维凸包的模板题，没有什么好说的。<br><a href="https://karry5307.github.io/2018/10/21/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E4%BA%8C%E7%BB%B4%E5%87%B8%E5%8C%85/" target="_blank" rel="noopener">不会凸包的右转这里</a><br>但是最后求周长是一定要算点的距离，而不是向量的长度。<del>被卡了两次</del></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">1e4</span>+<span class="number">51</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span>&#123;</span></span><br><span class="line">    db x,y;</span><br><span class="line">    Point(ll x=<span class="number">0</span>,ll y=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;x=x,<span class="keyword">this</span>-&gt;y=y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> Point &amp;rhs)<span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> y==rhs.y?x&lt;rhs.x:y&lt;rhs.y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> db <span class="title">polar</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">atan2</span>(y,x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> Point Vector;</span><br><span class="line">Point p[MAXN];</span><br><span class="line">ll cnt,minn;</span><br><span class="line">db res;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Vector <span class="keyword">operator</span> +(Vector x,Vector y)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> Vector(x.x+y.x,x.y+y.y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Vector <span class="keyword">operator</span> -(Vector x,Vector y)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> Vector(x.x-y.x,x.y-y.y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Vector <span class="keyword">operator</span> *(Vector x,db y)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> Vector(x.x*y,x.y*y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Vector <span class="keyword">operator</span> /(Vector x,db y)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> Vector(x.x/y,x.y/y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> db <span class="title">dot</span><span class="params">(Vector x,Vector y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.x*y.x+x.y*y.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> db <span class="title">length</span><span class="params">(Vector x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(dot(x,x));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> db <span class="title">angle</span><span class="params">(Vector x,Vector y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">acos</span>(dot(x,y)/length(x)/length(y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> db <span class="title">cross</span><span class="params">(Vector x,Vector y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.x*y.y-x.y*y.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> db <span class="title">dist</span><span class="params">(Vector x,Vector y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    db xx=x.x-y.x,yy=x.y-y.y;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(xx*xx+yy*yy);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Point x,Point y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> xx=cross(x-p[<span class="number">1</span>],y-p[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span>(xx&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!xx&amp;&amp;length(x-p[<span class="number">1</span>])&lt;length(y-p[<span class="number">1</span>]))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="built_in">deque</span>&lt;Point&gt; convexHull(Point *p,ll size)</span><br><span class="line">&#123;</span><br><span class="line">    Point top;</span><br><span class="line">    <span class="built_in">deque</span>&lt;Point&gt;vec;</span><br><span class="line">    <span class="keyword">if</span>(size==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        vec.push_back(p[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> vec;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(size==<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        vec.push_back(p[<span class="number">1</span>]),vec.push_back(p[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">return</span> vec;</span><br><span class="line">    &#125;</span><br><span class="line">    vec.push_back(p[<span class="number">1</span>]),vec.push_back(p[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=size;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        top=vec.back();</span><br><span class="line">        <span class="keyword">while</span>(cross(top-vec[vec.size()<span class="number">-2</span>],p[i]-top)&lt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            vec.pop_back(),top=vec.back();</span><br><span class="line">        &#125;</span><br><span class="line">        vec.push_back(p[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> vec;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt=read();</span><br><span class="line">    p[<span class="number">0</span>].x=p[<span class="number">0</span>].y=<span class="number">100000000000.0</span>;</span><br><span class="line">    <span class="keyword">if</span>(cnt==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"0.00"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>,&amp;p[i].x,&amp;p[i].y);</span><br><span class="line">        <span class="keyword">if</span>(p[i]&lt;p[minn])</span><br><span class="line">        &#123;</span><br><span class="line">            minn=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(p[minn],p[<span class="number">1</span>]),sort(p+<span class="number">2</span>,p+cnt+<span class="number">1</span>,cmp);</span><br><span class="line">    <span class="built_in">deque</span>&lt;Point&gt;pt=convexHull(p,cnt);</span><br><span class="line">    <span class="keyword">if</span>(pt.size()==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.2lf"</span>,<span class="number">0.0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;pt.size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            res+=dist(pt[i],pt[i<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        res+=dist(pt[<span class="number">0</span>],pt[pt.size()<span class="number">-1</span>]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.2lf"</span>,res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
            <tag> 计算几何 </tag>
            
            <tag> 凸包 </tag>
            
            <tag> 二维凸包 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>学习笔记·二维凸包</title>
      <link href="/2018/10/21/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E4%BA%8C%E7%BB%B4%E5%87%B8%E5%8C%85/"/>
      <url>/2018/10/21/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E4%BA%8C%E7%BB%B4%E5%87%B8%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<p>二维凸包是指一个面积最小的凸多边形，使得一个给定的点集都分布在这个凸多边形的内部或者边上。<br><a id="more"></a></p><h3 id="前置技能"><a href="#前置技能" class="headerlink" title="前置技能"></a>前置技能</h3><p><strong>计算几何基础</strong>，这个大概不用说了。</p><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><p>咕咕咕，这里我们使用比较好想的<script type="math/tex">Graham</script>算法进行求解。<br>前方大图警告。<br>首先呢，是一个点集。<br><img src="/2018/10/21/学习笔记·二维凸包/ch0.jpg" alt=""><br>因为<script type="math/tex">y</script>坐标最小的点肯定在这个凸包上，所以我们先找出<script type="math/tex">y</script>坐标最小的点,记为<script type="math/tex">P_1</script>。<br><img src="/2018/10/21/学习笔记·二维凸包/ch1.jpg" alt=""><br>接着考虑把剩下的点对于<script type="math/tex">P_1</script>从右往左编号。<br><img src="/2018/10/21/学习笔记·二维凸包/ch2.jpg" alt=""><br>PS:截图的锅，<script type="math/tex">P_{11}</script>上面那个点是<script type="math/tex">P_{12}</script>。<br>预处理完毕，接下来我们需要一个栈。由于<script type="math/tex">P_1</script>和<script type="math/tex">P_2</script>在凸包边界上，考虑将<script type="math/tex">P_1</script>和<script type="math/tex">P_2</script>入栈。<br>未完成的凸包用红色线条表示。<br><img src="/2018/10/21/学习笔记·二维凸包/ch4.JPG" alt=""><br>考虑<script type="math/tex">P_3</script>，加入它之后红色边界仍然是凸的，<script type="math/tex">P_3</script>入栈。<br><img src="/2018/10/21/学习笔记·二维凸包/ch5.jpg" alt=""><br>接下来考虑<script type="math/tex">P_4</script>，加入它之后边界是凹的，把当前栈顶<script type="math/tex">P_3</script>出栈。<br><img src="/2018/10/21/学习笔记·二维凸包/ch6.jpg" alt=""><br>考虑加入<script type="math/tex">P_4</script>当前红色边界加入<script type="math/tex">P_4</script>仍然是凸的，所以<script type="math/tex">P_4</script>入栈。<br><img src="/2018/10/21/学习笔记·二维凸包/ch7.JPG" alt=""><br>由于连续加入<script type="math/tex">P_5</script>，<script type="math/tex">P_6</script>，<script type="math/tex">P_7</script>后所得的红色边界仍然是凸的，所以将它们依次入栈。<br><img src="/2018/10/21/学习笔记·二维凸包/ch8.jpg" alt=""><br><img src="/2018/10/21/学习笔记·二维凸包/ch9.JPG" alt=""><br><img src="/2018/10/21/学习笔记·二维凸包/ch10.JPG" alt=""><br>在考虑<script type="math/tex">P_8</script>时，发现边界是凹的，将栈顶<script type="math/tex">P_7</script>出栈，而<script type="math/tex">P_8</script>入栈。<br><img src="/2018/10/21/学习笔记·二维凸包/ch11.JPG" alt=""><br><img src="/2018/10/21/学习笔记·二维凸包/ch12.JPG" alt=""><br>考虑<script type="math/tex">P_9</script>。在连续出栈<script type="math/tex">P_8</script>和<script type="math/tex">P_6</script>都不能满足红色边界为凸的，所以一出栈，将<script type="math/tex">P_9</script>入栈。<br><img src="/2018/10/21/学习笔记·二维凸包/ch13.JPG" alt=""><br><img src="/2018/10/21/学习笔记·二维凸包/ch14.JPG" alt=""><br><img src="/2018/10/21/学习笔记·二维凸包/ch15.JPG" alt=""><br>依次进行以下操作，可以得到一个处理到最后一个点的图像，然后就完结撒花了！<br><img src="/2018/10/21/学习笔记·二维凸包/ch16.JPG" alt=""><br><img src="/2018/10/21/学习笔记·二维凸包/complete.JPG" alt=""><br>所以说，<script type="math/tex">code</script>呢？<br>对不起，没有<del>个鬼</del>。<br><a href="https://karry5307.github.io/2018/10/21/%E3%80%8CLuogu-P2742%E3%80%8D%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E4%BA%8C%E7%BB%B4%E5%87%B8%E5%8C%85/" target="_blank" rel="noopener">出门右转看代码</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算几何 </tag>
            
            <tag> 凸包 </tag>
            
            <tag> 二维凸包 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「CodeForces 1060C」Maximum Subrectangle</title>
      <link href="/2018/10/15/%E3%80%8CCodeForces-1060C%E3%80%8DMaximum-Subrectangle/"/>
      <url>/2018/10/15/%E3%80%8CCodeForces-1060C%E3%80%8DMaximum-Subrectangle/</url>
      
        <content type="html"><![CDATA[<p>给一个数<script type="math/tex">x</script>，序列<script type="math/tex">a</script>和另一个序列<script type="math/tex">b</script>，构造一个矩阵<script type="math/tex">c</script>使得<script type="math/tex">c_{i,j}=a_{i}\times b_{j}</script>。在矩阵中找出一个最大的矩形使得矩形内所有数的和小于<script type="math/tex">x</script>。<br><a id="more"></a><br>因为要求子矩阵的和，所以考虑二维前缀和。<br>但是由于矩阵的特殊性质<script type="math/tex">c_{i,j}=a_{i}\times b_{j}</script>，所以可以将二维前缀和转化为两个一维前缀和的乘积。</p>]]></content>
      
      
      
        <tags>
            
            <tag> CodeForces </tag>
            
            <tag> 前缀和 </tag>
            
            <tag> 贪心 </tag>
            
            <tag> two pointers </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P4315」月下“毛景树”</title>
      <link href="/2018/10/15/%E3%80%8CLuogu-P4315%E3%80%8D%E6%9C%88%E4%B8%8B%E6%AF%9B%E6%99%AF%E6%A0%91/"/>
      <url>/2018/10/15/%E3%80%8CLuogu-P4315%E3%80%8D%E6%9C%88%E4%B8%8B%E6%AF%9B%E6%99%AF%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>给一棵树，支持修改边上的权值，将两点间路经全部增加<script type="math/tex">k</script>或全部覆盖为<script type="math/tex">k</script>，多次求当前树上两点间路径上的边权最大值。<br><a id="more"></a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.org/problemnew/show/P4315" target="_blank" rel="noopener">Luogu P4315</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p><del>我不会告诉你这道毒瘤题我调了两个月</del><br>吐槽一下毒瘤出题人，这份代码我足足写了<script type="math/tex">297</script>行，无语……<del>好吧当时交题的时候并没有把求<script type="math/tex">lca</script>删掉</del><br>此题一眼看过去是树剖+边权下放，把边权下放之后就是普通的树剖。<br>这里还有个奇淫技巧，就是在最后修改与查询时，为了不统计<script type="math/tex">LCA</script>，将<script type="math/tex">id[x]</script>改成<script type="math/tex">id[x]+1</script>，具体看注释。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    ll to,prev;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegmentTree</span>&#123;</span></span><br><span class="line">    ll l,r,maxn,tag,cover;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">2e5</span>+<span class="number">51</span>; </span><br><span class="line">edge ed[MAXN];</span><br><span class="line">SegmentTree tree[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line">ll last[MAXN],val[MAXN],depth[MAXN],fa[MAXN],size[MAXN],heavy[MAXN];</span><br><span class="line">ll id[MAXN],pre[MAXN],top[MAXN],from[MAXN],to[MAXN],dist[MAXN];</span><br><span class="line">ll tot,nc,ccnt,tx,x,y,z;</span><br><span class="line"><span class="built_in">string</span> op;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(ll from,ll to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ed[++tot].prev=last[from];</span><br><span class="line">    ed[tot].to=to;</span><br><span class="line">    last[from]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[node].maxn=max(tree[node&lt;&lt;<span class="number">1</span>].maxn,tree[(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].maxn);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">(ll l,ll r,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[node].l=l,tree[node].r=r,tree[node].cover=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[node].maxn=val[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    create(l,mid,node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    create(mid+<span class="number">1</span>,r,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">    update(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">spread</span><span class="params">(ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[node].cover!=<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[node&lt;&lt;<span class="number">1</span>].maxn=tree[node].cover;</span><br><span class="line">        tree[(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].maxn=tree[node].cover;        </span><br><span class="line">        tree[node&lt;&lt;<span class="number">1</span>].cover=tree[node].cover;</span><br><span class="line">        tree[(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].cover=tree[node].cover;</span><br><span class="line">        tree[node&lt;&lt;<span class="number">1</span>].tag=tree[(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].tag=<span class="number">0</span>;</span><br><span class="line">        tree[node].cover=<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(tree[node].tag)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[node&lt;&lt;<span class="number">1</span>].maxn+=tree[node].tag;</span><br><span class="line">        tree[(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].maxn+=tree[node].tag;</span><br><span class="line">        tree[node&lt;&lt;<span class="number">1</span>].tag+=tree[node].tag;</span><br><span class="line">        tree[(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].tag+=tree[node].tag;</span><br><span class="line">        tree[node].tag=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(ll pos,ll val,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[node].l==tree[node].r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[node].maxn=val;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mid=(tree[node].l+tree[node].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    spread(node);</span><br><span class="line">    <span class="keyword">if</span>(pos&lt;=mid)</span><br><span class="line">    &#123;</span><br><span class="line">        change(pos,val,node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        change(pos,val,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    update(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cover</span><span class="params">(ll l,ll r,ll val,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tree[node].l&amp;&amp;r&gt;=tree[node].r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[node].maxn=val;</span><br><span class="line">        tree[node].cover=val;</span><br><span class="line">        tree[node].tag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    spread(node);</span><br><span class="line">    ll mid=(tree[node].l+tree[node].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid)</span><br><span class="line">    &#123;</span><br><span class="line">        cover(l,r,val,node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid)</span><br><span class="line">    &#123;</span><br><span class="line">        cover(l,r,val,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    update(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(ll l,ll r,ll val,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tree[node].l&amp;&amp;r&gt;=tree[node].r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[node].maxn+=val;</span><br><span class="line">        tree[node].tag+=val;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    spread(node);</span><br><span class="line">    ll mid=(tree[node].l+tree[node].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid)</span><br><span class="line">    &#123;</span><br><span class="line">        add(l,r,val,node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid)</span><br><span class="line">    &#123;</span><br><span class="line">        add(l,r,val,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    update(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">queryMax</span><span class="params">(ll l,ll r,ll node)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tree[node].l&amp;&amp;r&gt;=tree[node].r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> tree[node].maxn;</span><br><span class="line">    &#125;</span><br><span class="line">    spread(node);</span><br><span class="line">    ll mid=(tree[node].l+tree[node].r)&gt;&gt;<span class="number">1</span>,val=-(<span class="number">1</span>&lt;&lt;<span class="number">30</span>);</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid)</span><br><span class="line">    &#123;</span><br><span class="line">        val=max(val,queryMax(l,r,node&lt;&lt;<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid)</span><br><span class="line">    &#123;</span><br><span class="line">        val=max(val,queryMax(l,r,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(ll node,ll f,ll dep)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    depth[node]=dep,fa[node]=f,size[node]=<span class="number">1</span>;</span><br><span class="line">    ll maxn=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=last[node];i;i=ed[i].prev)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ed[i].to!=f)</span><br><span class="line">        &#123;</span><br><span class="line">            dfs(ed[i].to,node,dep+<span class="number">1</span>);</span><br><span class="line">            size[node]+=size[ed[i].to];</span><br><span class="line">            <span class="keyword">if</span>(size[ed[i].to]&gt;maxn)</span><br><span class="line">            &#123;</span><br><span class="line">                heavy[node]=ed[i].to,maxn=size[ed[i].to];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ddfs</span><span class="params">(ll node,ll link)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    id[node]=++ccnt,val[ccnt]=pre[node],top[node]=link;</span><br><span class="line">    <span class="keyword">if</span>(!heavy[node])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ddfs(heavy[node],link);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=last[node];i;i=ed[i].prev)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ed[i].to!=fa[node]&amp;&amp;ed[i].to!=heavy[node])</span><br><span class="line">        &#123;</span><br><span class="line">            ddfs(ed[i].to,ed[i].to);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">queryPathMax</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans=-(<span class="number">1</span>&lt;&lt;<span class="number">30</span>);</span><br><span class="line">    <span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(depth[top[x]]&lt;depth[top[y]])</span><br><span class="line">        &#123;</span><br><span class="line">            swap(x,y);</span><br><span class="line">        &#125;</span><br><span class="line">        ans=max(ans,queryMax(id[top[x]],id[x],<span class="number">1</span>));</span><br><span class="line">        x=fa[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(depth[x]&gt;depth[y])</span><br><span class="line">    &#123;</span><br><span class="line">        swap(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    ans=max(ans,queryMax(id[x]+<span class="number">1</span>,id[y],<span class="number">1</span>));<span class="comment">//</span></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">changePoint</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    change(id[x],y,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">changePath</span><span class="params">(ll x,ll y,ll val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(depth[top[x]]&lt;depth[top[y]])</span><br><span class="line">        &#123;</span><br><span class="line">            swap(x,y);</span><br><span class="line">        &#125;</span><br><span class="line">        add(id[top[x]],id[x],val,<span class="number">1</span>);</span><br><span class="line">        x=fa[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(depth[x]&gt;depth[y])</span><br><span class="line">    &#123;</span><br><span class="line">        swap(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    add(id[x]+<span class="number">1</span>,id[y],val,<span class="number">1</span>);<span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">coverPath</span><span class="params">(ll x,ll y,ll val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(depth[top[x]]&lt;depth[top[y]])</span><br><span class="line">        &#123;</span><br><span class="line">            swap(x,y);</span><br><span class="line">        &#125;</span><br><span class="line">        cover(id[top[x]],id[x],val,<span class="number">1</span>);</span><br><span class="line">        x=fa[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(depth[x]&gt;depth[y])</span><br><span class="line">    &#123;</span><br><span class="line">        swap(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    cover(id[x]+<span class="number">1</span>,id[y],val,<span class="number">1</span>);<span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    nc=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nc<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        from[i]=read(),to[i]=read(),dist[i]=read();</span><br><span class="line">        addEdge(from[i],to[i]),addEdge(to[i],from[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>),ddfs(<span class="number">1</span>,<span class="number">1</span>),create(<span class="number">1</span>,nc,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nc<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    changePoint(depth[from[i]]&gt;depth[to[i]]?from[i]:to[i],dist[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;op,op!=<span class="string">"Stop"</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">if</span>(op==<span class="string">"Max"</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            x=read(),y=read();</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;queryPathMax(x,y)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="string">"Change"</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            x=read(),y=read();</span><br><span class="line">            tx=depth[from[x<span class="number">-1</span>]]&gt;depth[to[x<span class="number">-1</span>]]?from[x<span class="number">-1</span>]:to[x<span class="number">-1</span>];</span><br><span class="line">    changePoint(tx,y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="string">"Add"</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            x=read(),y=read(),z=read();</span><br><span class="line">            changePath(x,y,z);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="string">"Cover"</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            x=read(),y=read(),z=read();</span><br><span class="line">            coverPath(x,y,z);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 树链剖分 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>NOIP2018之前的琐记</title>
      <link href="/2018/10/09/NOIP2018%E4%B9%8B%E5%89%8D%E7%9A%84%E7%90%90%E8%AE%B0/"/>
      <url>/2018/10/09/NOIP2018%E4%B9%8B%E5%89%8D%E7%9A%84%E7%90%90%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>既然Karry5307已经变成了初二的小蒟蒻了，那么还是写点<script type="math/tex">NOIP2018</script>之前的琐记吧。<br><a id="more"></a></p><h3 id="考试"><a href="#考试" class="headerlink" title="考试"></a>考试</h3><p><script type="math/tex">2018.10.8</script>：出题人<script type="math/tex">xzy</script>，毒瘤题。<script type="math/tex">T1</script>什么鬼，<script type="math/tex">7</script>合<script type="math/tex">1</script>，<script type="math/tex">gg</script>。<script type="math/tex">T3</script>辣鸡模拟，让你算空间，最后交卷时发现<script type="math/tex">bitset</script>没开<script type="math/tex">long\ long</script>，写了个快速乘<script type="math/tex">\% 998244353</script>，读入出锅了，居然没看到有个空格没搞好，<script type="math/tex">0+0+10=10</script>分滚粗。（我不会告诉你我是因为没看大样例而导致的）</p><p><script type="math/tex">2018.10.9</script>：出题人<script type="math/tex">Despair</script>，毒瘤题。第一题什么鬼，<script type="math/tex">yyb</script>大佬说是迭代，结果还真的是迭代（顺便吐槽一句，题解写的矩乘看都没看懂）<script type="math/tex">T3</script>随手开了个<script type="math/tex">10^7</script>的数组，MLE了。 </p><p><script type="math/tex">2018.10.10</script>：出题人<script type="math/tex">Tyher</script>，这次我觉得海星。<script type="math/tex">T1</script>被卡精度原地爆炸，<del><script type="math/tex">log_{10}</script>改成<script type="math/tex">log_2</script>就会有<script type="math/tex">35</script>分的好成绩啦</del>，<script type="math/tex">T3</script>良心，<script type="math/tex">Task\ 4</script>特判了一下，其余线段树乱搞还有<script type="math/tex">40</script>分，拿了<script type="math/tex">20+40+25=85</script>分滚粗，<script type="math/tex">yyb</script>大佬太强了，又阿克了。</p><p><script type="math/tex">2018.10.11</script>：<script type="math/tex">T1</script>毒瘤三合一，布星啊，墙裂谴责，乱搞还没分，幸好<script type="math/tex">T2</script>乱搞有<script type="math/tex">20</script>分。<script type="math/tex">T3</script>全场切<script type="math/tex">except\ me</script>，告辞告辞，<script type="math/tex">0+20+0=20</script>滚粗。</p><p><script type="math/tex">2018.10.12</script>：出题人<script type="math/tex">DarkFire</script>，题目海星，只是我太蒟蒻了，连<script type="math/tex">T2</script>都没切。<script type="math/tex">Despair</script>大佬又阿克了，%%%，我这个小蒟蒻继续<script type="math/tex">0+20+0=20</script>滚粗。</p><p><script type="math/tex">2018.10.13</script>：上午初赛模拟，什么鬼，一个排完序后的水题硬是考递归，体验极差。<br>(最近有点懒，没更)</p><p><script type="math/tex">2018.10.26</script>：<script type="math/tex">T1</script>不会莫比乌斯反演，被吊打，只好拿<script type="math/tex">20</script>分滚粗。<script type="math/tex">T2</script>不会写，跳过。<script type="math/tex">T3</script>居然还下放了一个<script type="math/tex">game</script>，什么鬼，最后才知道这<script type="math/tex">game</script>考有限状态自动机，我太蒻了，居然没玩通关，苟且<script type="math/tex">21</script>分。总共<script type="math/tex">20+0+21=41</script>分滚粗。<script type="math/tex">tbr</script>大佬玩个游戏<script type="math/tex">T3</script>都拿了<script type="math/tex">66</script>分，我竟无言以对。<br><del>我突然觉得我连游戏都不会玩了</del></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>「Luogu P4884」多少个1？</title>
      <link href="/2018/10/07/%E3%80%8CLuogu-P4884%E3%80%8D%E5%A4%9A%E5%B0%91%E4%B8%AA1%EF%BC%9F/"/>
      <url>/2018/10/07/%E3%80%8CLuogu-P4884%E3%80%8D%E5%A4%9A%E5%B0%91%E4%B8%AA1%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p>给定<script type="math/tex">p</script>和模数<script type="math/tex">yyb</script>，保证<script type="math/tex">yyb</script>为质数，求最小的<script type="math/tex">x</script>使得$111\cdots 1$(<script type="math/tex">x</script>个)<script type="math/tex">\equiv 1\pmod {yyb}</script><br><a id="more"></a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.org/problemnew/show/P4884" target="_blank" rel="noopener">Luogu P4884</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>注意到<script type="math/tex">111\cdots 1</script>(<script type="math/tex">x</script>个)<script type="math/tex">=\cfrac{10^x-1}{9}</script>,则</p><script type="math/tex; mode=display">111\cdots 1\equiv (10^x-1)\times 9^{-1}</script><script type="math/tex; mode=display">\therefore (10^x-1)\times 9^{-1}\equiv yyb</script><script type="math/tex; mode=display">\therefore 10^x \equiv 9\times yyb+1</script><p>然后这个方程就化为<script type="math/tex">BSGS</script>的标准形式了，由于模数<script type="math/tex">yyb</script>为质数，直接利用<script type="math/tex">BSGS</script>即可。<br>由于<script type="math/tex">yyb</script>会很大，所以再次建议不要用自己写的哈希表，而使用<script type="math/tex">map</script>。<del>我是不会告诉你我因为这个原因被洛谷的数据坑了好几次了</del></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>为了保险，这里开了<script type="math/tex">int128</script>，美中不足的是要自己写读写，顺便写了一个<script type="math/tex">O(1)</script>的龟速乘。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> __int128 ll;</span><br><span class="line"><span class="built_in">map</span>&lt;ll,ll&gt;ht;</span><br><span class="line">ll mod,val;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(ll num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(num&gt;<span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        write(num/<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(num%<span class="number">10</span>+<span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">qmul</span><span class="params">(ll x,ll y,ll mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll l=(y&gt;&gt;<span class="number">25</span>)*x%mod*((<span class="number">1</span>&lt;&lt;<span class="number">25</span>)%mod),r=(y&amp;((<span class="number">1</span>&lt;&lt;<span class="number">25</span>)<span class="number">-1</span>))*x%mod;</span><br><span class="line">    <span class="keyword">return</span> (l+r)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">qpow</span><span class="params">(ll base,ll exponent,ll mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!exponent)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll temp=qpow(base,exponent&gt;&gt;<span class="number">1</span>,mod);</span><br><span class="line">    ll res=qmul(temp,temp,mod);</span><br><span class="line">    <span class="keyword">if</span>(exponent&amp;<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        res=qmul(res,base,mod);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">BSGS</span><span class="params">(ll base,ll res,ll mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ht.clear(),res%=mod;</span><br><span class="line">    ll temp,val,fail;</span><br><span class="line">    temp=<span class="built_in">sqrt</span>((<span class="keyword">long</span> <span class="keyword">double</span>)(mod))+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;temp;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        val=qmul(res,qpow(base,i,mod),mod);</span><br><span class="line">        ht[val]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    base=qpow(base,temp,mod);</span><br><span class="line">    <span class="keyword">if</span>(!base)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> !res?<span class="number">1</span>:<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=temp;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        val=qpow(base,i,mod),fail=ht.find(val)==ht.end()?<span class="number">-1</span>:ht[val];</span><br><span class="line">        <span class="keyword">if</span>(fail&gt;=<span class="number">0</span>&amp;&amp;i*temp-fail&gt;=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> i*temp-fail;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    val=read(),mod=read();</span><br><span class="line">    val=(qmul(<span class="number">9</span>,val,mod)+<span class="number">1</span>)%mod;</span><br><span class="line">    write(BSGS(<span class="number">10</span>,val,mod));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
            <tag> 数论 </tag>
            
            <tag> BSGS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P2756」飞行员配对方案问题</title>
      <link href="/2018/09/24/%E3%80%8CLuogu-P2756%E3%80%8D%E9%A3%9E%E8%A1%8C%E5%91%98%E9%85%8D%E5%AF%B9%E6%96%B9%E6%A1%88%E9%97%AE%E9%A2%98/"/>
      <url>/2018/09/24/%E3%80%8CLuogu-P2756%E3%80%8D%E9%A3%9E%E8%A1%8C%E5%91%98%E9%85%8D%E5%AF%B9%E6%96%B9%E6%A1%88%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>这个题是网络流24题中的第1题。<br>给一个二分图，求最大匹配以及匹配方案。<br><a id="more"></a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.org/problemnew/show/P2756" target="_blank" rel="noopener">Luogu P2756</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这个题目的模型是二分图最大匹配，有多个源点和汇点。所以可以增加一个超级源点和一个超级汇点。<br>超级源点1与2-(m+1)连流量为1的边；(m+2)-(n+1)与超级汇点n+2连流量为1的边；所给的边全部连流量为1的边。<br>最后，这个网络的最大流即为二分图的最大匹配。<br>对于每一条在二分图内的边，即它和它的反向边不连向源点和汇点，如果反向边有流量，就输出这条边连向的两个点。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">1e5</span>+<span class="number">51</span>,inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    ll to,prev,flow;</span><br><span class="line">&#125;;</span><br><span class="line">Edge ed[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line">ll l,nc,source,sink,tot=<span class="number">1</span>,from,to,flow,maxFlow;</span><br><span class="line">ll last[MAXN],depth[MAXN],inQueue[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(ll from,ll to,ll flow)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ed[++tot].prev=last[from];</span><br><span class="line">    ed[tot].to=to;</span><br><span class="line">    ed[tot].flow=flow;</span><br><span class="line">    last[from]=tot; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Min</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x:y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;ll&gt;q;</span><br><span class="line">    ll top,to;</span><br><span class="line">    <span class="built_in">memset</span>(depth,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(depth));</span><br><span class="line">    depth[source]=<span class="number">0</span>,q.push(source);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        top=q.front();</span><br><span class="line">        q.pop(),inQueue[top]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=last[top];i;i=ed[i].prev)</span><br><span class="line">        &#123;</span><br><span class="line">            to=ed[i].to;</span><br><span class="line">            <span class="keyword">if</span>(depth[to]&gt;depth[top]+<span class="number">1</span>&amp;&amp;ed[i].flow)</span><br><span class="line">            &#123;</span><br><span class="line">                depth[to]=depth[top]+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(!inQueue[to])</span><br><span class="line">                &#123;</span><br><span class="line">                    q.push(to),inQueue[to]=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(depth[sink]!=<span class="number">0x3f3f3f3f</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">dfs</span><span class="params">(ll cur,ll flow)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll low;</span><br><span class="line">    <span class="keyword">if</span>(cur==sink)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> flow;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=last[cur];i;i=ed[i].prev)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ed[i].flow&amp;&amp;depth[ed[i].to]==depth[cur]+<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(low=dfs(ed[i].to,Min(flow,ed[i].flow)))</span><br><span class="line">            &#123;</span><br><span class="line">                ed[i].flow-=low,ed[i^<span class="number">1</span>].flow+=low;</span><br><span class="line">                <span class="keyword">return</span> low;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll flow;</span><br><span class="line">    <span class="keyword">while</span>(bfs())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(flow=dfs(source,inf))</span><br><span class="line">        &#123;</span><br><span class="line">            maxFlow+=flow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxFlow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    l=read(),nc=read(),source=<span class="number">1</span>,sink=nc+<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        from=read()+<span class="number">1</span>,to=read()+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(!from||!to)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        addEdge(from,to,<span class="number">1</span>),addEdge(to,from,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=l+<span class="number">1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        addEdge(source,i,<span class="number">1</span>),addEdge(i,source,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=l+<span class="number">2</span>;i&lt;=nc+<span class="number">1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        addEdge(i,sink,<span class="number">1</span>),addEdge(sink,i,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(Dinic()==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"No solution!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,maxFlow);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=tot;i+=<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(ed[i].to!=source&amp;&amp;ed[i^<span class="number">1</span>].to!=source&amp;&amp;ed[i].to!=sink&amp;&amp;ed[i^<span class="number">1</span>].to!=sink)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(ed[i^<span class="number">1</span>].flow)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,ed[i^<span class="number">1</span>].to<span class="number">-1</span>,ed[i].to<span class="number">-1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
            <tag> 网络流 </tag>
            
            <tag> 最大流 </tag>
            
            <tag> 二分图匹配 </tag>
            
            <tag> Dinic </tag>
            
            <tag> 网络流24题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P3376」【模板】网络最大流</title>
      <link href="/2018/09/24/%E3%80%8CLuogu-P3376%E3%80%8D%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E7%BD%91%E7%BB%9C%E6%9C%80%E5%A4%A7%E6%B5%81/"/>
      <url>/2018/09/24/%E3%80%8CLuogu-P3376%E3%80%8D%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E7%BD%91%E7%BB%9C%E6%9C%80%E5%A4%A7%E6%B5%81/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 未完待续 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 网络流 </tag>
            
            <tag> 最大流 </tag>
            
            <tag> Dinic </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>学习笔记·网络流</title>
      <link href="/2018/09/24/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
      <url>/2018/09/24/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E7%BD%91%E7%BB%9C%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<p>网络流是一种解决各种神仙问题的算法，通过合理地建图，可以解决各类神仙问题。<br><a id="more"></a><br>网络流的概念也许会有点难懂，于是就先上几幅图，借助水流理解。<br>众所周知，你家的水是从自来水厂通过管道流过来的，假设s是自来水厂，t是你家，1,2,3是中转节点，管道连接如图所示。<br><img src="https://i.loli.net/2018/09/24/5ba8c620b7987.png" alt=""><br>每条边上的边权是该管道允许的最大流量，即容量，如果流进来的水流流量超过容量，管道就会炸掉，这既不是自来水厂所期望的事，也不是你家所期望的事。<br>现在，你希望自来水厂到你家的水最多，所以尝试找出一条s-&gt;t路径，比如这个<br><img src="https://i.loli.net/2018/09/24/5ba8d1fa39e82.png" alt=""><br>对于这条路径，可以通过的可行流为10，所以将这些边的可行流-10，像这样：<br><img src="https://i.loli.net/2018/09/24/5ba8d42f3ac8e.png" alt=""><br>对于这个网络，一次一次找s-&gt;t路径是可以得到最大流的，但对于别的网络呢？流错了怎么办？<br>这里给一个神仙技巧——加反向边，像这样</p>]]></content>
      
      
      
        <tags>
            
            <tag> 未完待续 </tag>
            
            <tag> 网络流 </tag>
            
            <tag> 最大流 </tag>
            
            <tag> Dinic </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P3950」部落冲突</title>
      <link href="/2018/09/14/%E3%80%8CLuogu-P3950%E3%80%8D%E9%83%A8%E8%90%BD%E5%86%B2%E7%AA%81/"/>
      <url>/2018/09/14/%E3%80%8CLuogu-P3950%E3%80%8D%E9%83%A8%E8%90%BD%E5%86%B2%E7%AA%81/</url>
      
        <content type="html"><![CDATA[<p>给一棵树，每次可以使一条可以经过边设置为不可经过，也可以将不可经过的边设置成可以经过，多次询问两点间路径上的所有边是否都可以经过。<br><a id="more"></a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.org/problemnew/show/P3950" target="_blank" rel="noopener">Luogu P3950</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p><del>我不会告诉你这题我调了<script type="math/tex">10</script>天</del><br>将可以经过转换成<script type="math/tex">0</script>，不可经过转换成<script type="math/tex">1</script>，然后树剖+边权下放。对于每次询问，考虑两点间路径上的点权和减去<script type="math/tex">LCA</script>的点权是否等于<script type="math/tex">0</script>即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    ll to,prev;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegmentTree</span>&#123;</span></span><br><span class="line">    ll l,r,sum,tag;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">battle</span>&#123;</span></span><br><span class="line">    ll x,y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">700051</span>;</span><br><span class="line">battle bt[MAXN];</span><br><span class="line">edge ed[MAXN];</span><br><span class="line">SegmentTree tree[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line">ll last[MAXN],val[MAXN],depth[MAXN],fa[MAXN],size[MAXN],heavy[MAXN];</span><br><span class="line">ll id[MAXN],pre[MAXN],top[MAXN];</span><br><span class="line">ll tot,nc,cnt,ccnt,x,y,from,to,num,toto,tx;</span><br><span class="line"><span class="keyword">char</span> op; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(ll from,ll to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ed[++tot].prev=last[from];</span><br><span class="line">    ed[tot].to=to;</span><br><span class="line">    last[from]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[node].sum=tree[node&lt;&lt;<span class="number">1</span>].sum+tree[(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">(ll l,ll r,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[node].l=l,tree[node].r=r;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[node].sum=val[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    create(l,mid,node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    create(mid+<span class="number">1</span>,r,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">    update(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">spread</span><span class="params">(ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[node].tag)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[node&lt;&lt;<span class="number">1</span>].sum+=tree[node].tag*(tree[node&lt;&lt;<span class="number">1</span>].r-tree[node&lt;&lt;<span class="number">1</span>].l+<span class="number">1</span>);</span><br><span class="line">        tree[(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].sum+=tree[node].tag*(tree[(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].r-tree[(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].l+<span class="number">1</span>);</span><br><span class="line">        tree[node&lt;&lt;<span class="number">1</span>].tag+=tree[node].tag;</span><br><span class="line">        tree[(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].tag+=tree[node].tag;</span><br><span class="line">        tree[node].tag=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(ll pos,ll val,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[node].l==tree[node].r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[node].sum+=val;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mid=(tree[node].l+tree[node].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(pos&lt;=mid)</span><br><span class="line">    &#123;</span><br><span class="line">        change(pos,val,node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        change(pos,val,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    update(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(ll l,ll r,ll val,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tree[node].l&amp;&amp;r&gt;=tree[node].r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[node].sum+=val*(tree[node].r-tree[node].l+<span class="number">1</span>);</span><br><span class="line">        tree[node].tag+=val;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    spread(node);</span><br><span class="line">    ll mid=(tree[node].l+tree[node].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid)</span><br><span class="line">    &#123;</span><br><span class="line">        add(l,r,val,node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid)</span><br><span class="line">    &#123;</span><br><span class="line">        add(l,r,val,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    update(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">query</span><span class="params">(ll l,ll r,ll node)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tree[node].l&amp;&amp;r&gt;=tree[node].r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> tree[node].sum;</span><br><span class="line">    &#125;</span><br><span class="line">    spread(node);</span><br><span class="line">    ll mid=(tree[node].l+tree[node].r)&gt;&gt;<span class="number">1</span>,val=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid)</span><br><span class="line">    &#123;</span><br><span class="line">        val+=query(l,r,node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid)</span><br><span class="line">    &#123;</span><br><span class="line">        val+=query(l,r,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(ll node,ll f,ll dep)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    depth[node]=dep,fa[node]=f,size[node]=<span class="number">1</span>;</span><br><span class="line">    ll maxn=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=last[node];i;i=ed[i].prev)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ed[i].to!=f)</span><br><span class="line">        &#123;</span><br><span class="line">            dfs(ed[i].to,node,dep+<span class="number">1</span>);</span><br><span class="line">            size[node]+=size[ed[i].to];</span><br><span class="line">            <span class="keyword">if</span>(size[ed[i].to]&gt;maxn)</span><br><span class="line">            &#123;</span><br><span class="line">                heavy[node]=ed[i].to,maxn=size[ed[i].to];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ddfs</span><span class="params">(ll node,ll link)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    id[node]=++ccnt,val[ccnt]=pre[node],top[node]=link;</span><br><span class="line">    <span class="keyword">if</span>(!heavy[node])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ddfs(heavy[node],link);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=last[node];i;i=ed[i].prev)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ed[i].to!=fa[node]&amp;&amp;ed[i].to!=heavy[node])</span><br><span class="line">        &#123;</span><br><span class="line">            ddfs(ed[i].to,ed[i].to);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">queryPath</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(depth[top[x]]&lt;depth[top[y]])</span><br><span class="line">        &#123;</span><br><span class="line">            swap(x,y);</span><br><span class="line">        &#125;</span><br><span class="line">        ans+=query(id[top[x]],id[x],<span class="number">1</span>);</span><br><span class="line">        x=fa[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(depth[x]&gt;depth[y])</span><br><span class="line">    &#123;</span><br><span class="line">        swap(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    ans+=query(id[x],id[y],<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">querySubtree</span><span class="params">(ll root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> query(id[root],id[root]+size[root]<span class="number">-1</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">changePoint</span><span class="params">(ll x,ll val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    change(id[x],val,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">changePath</span><span class="params">(ll x,ll y,ll val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(depth[top[x]]&lt;depth[top[y]])</span><br><span class="line">        &#123;</span><br><span class="line">            swap(x,y);</span><br><span class="line">        &#125;</span><br><span class="line">        add(id[top[x]],id[x],val,<span class="number">1</span>);</span><br><span class="line">        x=fa[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(depth[x]&gt;depth[y])</span><br><span class="line">    &#123;</span><br><span class="line">        swap(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    add(id[x],id[y],val,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">changeSubtree</span><span class="params">(ll root,ll val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    add(id[root],id[root]+size[root]<span class="number">-1</span>,val,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">lca</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(depth[top[x]]&lt;depth[top[y]])</span><br><span class="line">        &#123;</span><br><span class="line">            swap(x,y);</span><br><span class="line">        &#125;</span><br><span class="line">        x=fa[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> depth[x]&lt;depth[y]?x:y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    nc=read(),cnt=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nc<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        from=read(),to=read();</span><br><span class="line">        addEdge(from,to),addEdge(to,from);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>),ddfs(<span class="number">1</span>,<span class="number">1</span>),create(<span class="number">1</span>,nc,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;op;</span><br><span class="line">        <span class="keyword">switch</span>(op)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'C'</span>:&#123;</span><br><span class="line">            x=read(),y=read();</span><br><span class="line">            bt[++num].x=x,bt[num].y=y;</span><br><span class="line">            tx=depth[x]&gt;depth[y]?x:y;</span><br><span class="line">            changePoint(tx,<span class="number">1</span>); </span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'U'</span>:&#123;</span><br><span class="line">                x=read();</span><br><span class="line">                y=bt[x].y,x=bt[x].x;</span><br><span class="line">                tx=depth[x]&gt;depth[y]?x:y;</span><br><span class="line">                changePoint(tx,<span class="number">-1</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'Q'</span>:&#123;</span><br><span class="line">            x=read(),y=read();</span><br><span class="line">            toto=queryPath(x,y)-queryPath(lca(x,y),lca(x,y));</span><br><span class="line">            toto?<span class="built_in">puts</span>(<span class="string">"No"</span>):<span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 树链剖分 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P4114」Qtree1</title>
      <link href="/2018/08/16/%E3%80%8CLuogu-P4114%E3%80%8DQtree1/"/>
      <url>/2018/08/16/%E3%80%8CLuogu-P4114%E3%80%8DQtree1/</url>
      
        <content type="html"><![CDATA[<p>怎么说呢，有点裸的树链剖分加上一些常用小技巧……<br><a id="more"></a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.org/problemnew/show/P3950" target="_blank" rel="noopener">Luogu P3950</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 未完待续 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 树链剖分 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P3178」[HAOI2015]树上操作</title>
      <link href="/2018/08/14/%E3%80%8CHAOI2015%E3%80%8D%E6%A0%91%E4%B8%8A%E6%93%8D%E4%BD%9C/"/>
      <url>/2018/08/14/%E3%80%8CHAOI2015%E3%80%8D%E6%A0%91%E4%B8%8A%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>给定一棵树和多个操作，对于每一个操作3，回答该询问的答案。<br><a id="more"></a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.org/problemnew/show/P3178" target="_blank" rel="noopener">Luogu P3178</a><br><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=4034" target="_blank" rel="noopener">BZOJ 4034</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>树链剖分板子题。对于每一个1操作，直接将起点和终点设为这个点，执行路径修改。对于操作2和操作3，直接使用树剖板子。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    ll to,prev;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegmentTree</span>&#123;</span></span><br><span class="line">    ll l,r,sum,tag;</span><br><span class="line">&#125;;</span><br><span class="line">edge ed[<span class="number">200051</span>];</span><br><span class="line">SegmentTree tree[<span class="number">200051</span>&lt;&lt;<span class="number">2</span>];</span><br><span class="line">ll last[<span class="number">200051</span>],val[<span class="number">200051</span>],depth[<span class="number">200051</span>],fa[<span class="number">200051</span>],size[<span class="number">200051</span>],heavy[<span class="number">200051</span>];</span><br><span class="line">ll id[<span class="number">200051</span>],pre[<span class="number">200051</span>],top[<span class="number">200051</span>];</span><br><span class="line">ll tot,nc,cnt,ccnt,op,x,y,from,to;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span><span class="comment">//快读</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(ll from,ll to)</span><span class="comment">//邻接表基本操作</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ed[++tot].prev=last[from];</span><br><span class="line">    ed[tot].to=to;</span><br><span class="line">    last[from]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//线段树基本操作</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(ll node)</span><span class="comment">//更新节点值，用位运算优化</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[node].sum=tree[node&lt;&lt;<span class="number">1</span>].sum+tree[(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">(ll l,ll r,ll node)</span><span class="comment">//建树</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[node].l=l,tree[node].r=r;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[node].sum=val[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    create(l,mid,node&lt;&lt;<span class="number">1</span>);<span class="comment">//建左子树</span></span><br><span class="line">    create(mid+<span class="number">1</span>,r,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);<span class="comment">//建右子树</span></span><br><span class="line">    update(node);<span class="comment">//更新当前节点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">spread</span><span class="params">(ll node)</span><span class="comment">//下传懒标记</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[node].tag)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//更新节点信息</span></span><br><span class="line">        tree[node&lt;&lt;<span class="number">1</span>].sum+=tree[node].tag*(tree[node&lt;&lt;<span class="number">1</span>].r-tree[node&lt;&lt;<span class="number">1</span>].l+<span class="number">1</span>);</span><br><span class="line">        tree[(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].sum+=tree[node].tag*(tree[(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].r-tree[(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].l+<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//下传懒标记</span></span><br><span class="line">        tree[node&lt;&lt;<span class="number">1</span>].tag+=tree[node].tag;</span><br><span class="line">        tree[(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].tag+=tree[node].tag;</span><br><span class="line">        <span class="comment">//清除当前节点懒标记</span></span><br><span class="line">        tree[node].tag=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(ll l,ll r,ll val,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tree[node].l&amp;&amp;r&gt;=tree[node].r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[node].sum+=val*(tree[node].r-tree[node].l+<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//做标记</span></span><br><span class="line">        tree[node].tag+=val;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    spread(node);<span class="comment">//标记下传</span></span><br><span class="line">    ll mid=(tree[node].l+tree[node].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid)</span><br><span class="line">    &#123;</span><br><span class="line">        add(l,r,val,node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid)</span><br><span class="line">    &#123;</span><br><span class="line">        add(l,r,val,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    update(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">query</span><span class="params">(ll l,ll r,ll node)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tree[node].l&amp;&amp;r&gt;=tree[node].r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> tree[node].sum;</span><br><span class="line">    &#125;</span><br><span class="line">    spread(node);<span class="comment">//标记下传</span></span><br><span class="line">    ll mid=(tree[node].l+tree[node].r)&gt;&gt;<span class="number">1</span>,val=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid)</span><br><span class="line">    &#123;</span><br><span class="line">        val+=query(l,r,node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid)</span><br><span class="line">    &#123;</span><br><span class="line">        val+=query(l,r,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(ll node,ll f,ll dep)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    depth[node]=dep,fa[node]=f,size[node]=<span class="number">1</span>;<span class="comment">//更新节点深度，父节点，节点为根的子树大小</span></span><br><span class="line">    ll maxn=<span class="number">-1</span>;<span class="comment">//重儿子</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=last[node];i;i=ed[i].prev)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ed[i].to!=f)<span class="comment">//遍历子节点</span></span><br><span class="line">        &#123;</span><br><span class="line">            dfs(ed[i].to,node,dep+<span class="number">1</span>);</span><br><span class="line">            size[node]+=size[ed[i].to];<span class="comment">//更新子树大小</span></span><br><span class="line">            <span class="keyword">if</span>(size[ed[i].to]&gt;maxn)</span><br><span class="line">            &#123;</span><br><span class="line">                heavy[node]=ed[i].to,maxn=size[ed[i].to];<span class="comment">//标记重儿子</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ddfs</span><span class="params">(ll node,ll link)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    id[node]=++ccnt,val[ccnt]=pre[node],top[node]=link;<span class="comment">//标记节点新编号，赋初始值，更新节点所在重链的顶部</span></span><br><span class="line">    <span class="keyword">if</span>(!heavy[node])<span class="comment">//连重儿子都没有，肯定没有轻儿子，回溯</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ddfs(heavy[node],link);<span class="comment">//先遍历重儿子</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=last[node];i;i=ed[i].prev)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ed[i].to!=fa[node]&amp;&amp;ed[i].to!=heavy[node])</span><br><span class="line">        &#123;</span><br><span class="line">            ddfs(ed[i].to,ed[i].to);<span class="comment">//遍历轻儿子，该节点所在重链顶部节点为自己</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//无脑操作</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">queryPath</span><span class="params">(ll x,ll y)</span><span class="comment">//查询路径点权和</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(depth[top[x]]&lt;depth[top[y]])</span><br><span class="line">        &#123;</span><br><span class="line">            swap(x,y);</span><br><span class="line">        &#125;</span><br><span class="line">        ans+=query(id[top[x]],id[x],<span class="number">1</span>);<span class="comment">//加上整个链的点权和</span></span><br><span class="line">        x=fa[top[x]];<span class="comment">//爬到链顶</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(depth[x]&gt;depth[y])</span><br><span class="line">    &#123;</span><br><span class="line">        swap(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    ans+=query(id[x],id[y],<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">querySubtree</span><span class="params">(ll root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> query(id[root],id[root]+size[root]<span class="number">-1</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">changePath</span><span class="params">(ll x,ll y,ll val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(depth[top[x]]&lt;depth[top[y]])</span><br><span class="line">        &#123;</span><br><span class="line">            swap(x,y);</span><br><span class="line">        &#125;</span><br><span class="line">        add(id[top[x]],id[x],val,<span class="number">1</span>);</span><br><span class="line">        x=fa[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(depth[x]&gt;depth[y])</span><br><span class="line">    &#123;</span><br><span class="line">        swap(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    add(id[x],id[y],val,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">changeSubtree</span><span class="params">(ll root,ll val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    add(id[root],id[root]+size[root]<span class="number">-1</span>,val,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    nc=read(),cnt=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=nc;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pre[i]=read();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nc<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        from=read(),to=read();</span><br><span class="line">        addEdge(from,to),addEdge(to,from);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>),ddfs(<span class="number">1</span>,<span class="number">1</span>),create(<span class="number">1</span>,nc,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        op=read();</span><br><span class="line">        <span class="keyword">switch</span>(op)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:&#123;</span><br><span class="line">                x=read(),y=read();</span><br><span class="line">                changePath(x,x,y);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:&#123;</span><br><span class="line">                x=read(),y=read();</span><br><span class="line">                changeSubtree(x,y);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:&#123;</span><br><span class="line">                x=read();</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;queryPath(x,<span class="number">1</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> BZOJ </tag>
            
            <tag> HAOI </tag>
            
            <tag> 各省省选 </tag>
            
            <tag> 树链剖分 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P3384」【模板】树链剖分</title>
      <link href="/2018/08/13/%E3%80%8CLuogu-P3384%E3%80%8D%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
      <url>/2018/08/13/%E3%80%8CLuogu-P3384%E3%80%8D%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/</url>
      
        <content type="html"><![CDATA[<p>模板题，裸的树链剖分，数组记得开大一倍，否则会WA3个点<br><a id="more"></a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.org/problemnew/show/P3384" target="_blank" rel="noopener">Luogu P3384</a></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>代码有点长qwq<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    ll to,prev;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegmentTree</span>&#123;</span></span><br><span class="line">    ll l,r,sum,tag;</span><br><span class="line">&#125;;</span><br><span class="line">edge ed[<span class="number">200051</span>];</span><br><span class="line">SegmentTree tree[<span class="number">200051</span>&lt;&lt;<span class="number">2</span>];</span><br><span class="line">ll last[<span class="number">200051</span>],val[<span class="number">200051</span>],depth[<span class="number">200051</span>],fa[<span class="number">200051</span>],size[<span class="number">200051</span>],heavy[<span class="number">200051</span>];</span><br><span class="line">ll id[<span class="number">200051</span>],pre[<span class="number">200051</span>],top[<span class="number">200051</span>];</span><br><span class="line">ll tot,nc,cnt,root,ccnt,mod,op,x,y,z,from,to;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span><span class="comment">//快读</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(ll from,ll to)</span><span class="comment">//邻接表基本操作</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ed[++tot].prev=last[from];</span><br><span class="line">    ed[tot].to=to;</span><br><span class="line">    last[from]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//线段树基本操作</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(ll node)</span><span class="comment">//更新节点值，用位运算优化</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[node].sum=(tree[node&lt;&lt;<span class="number">1</span>].sum+tree[(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].sum)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">(ll l,ll r,ll node)</span><span class="comment">//建树</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[node].l=l,tree[node].r=r;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[node].sum=val[l]%mod;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    create(l,mid,node&lt;&lt;<span class="number">1</span>);<span class="comment">//建左子树</span></span><br><span class="line">    create(mid+<span class="number">1</span>,r,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);<span class="comment">//建右子树</span></span><br><span class="line">    update(node);<span class="comment">//更新当前节点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">spread</span><span class="params">(ll node)</span><span class="comment">//下传懒标记</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[node].tag)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//更新节点信息</span></span><br><span class="line">        tree[node&lt;&lt;<span class="number">1</span>].sum+=tree[node].tag*(tree[node&lt;&lt;<span class="number">1</span>].r-tree[node&lt;&lt;<span class="number">1</span>].l+<span class="number">1</span>);</span><br><span class="line">        tree[(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].sum+=tree[node].tag*(tree[(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].r-tree[(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].l+<span class="number">1</span>);</span><br><span class="line">        tree[node&lt;&lt;<span class="number">1</span>].sum%=mod;</span><br><span class="line">        tree[(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].sum%=mod;</span><br><span class="line">        <span class="comment">//下传懒标记</span></span><br><span class="line">        tree[node&lt;&lt;<span class="number">1</span>].tag+=tree[node].tag;</span><br><span class="line">        tree[(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].tag+=tree[node].tag;</span><br><span class="line">        tree[node&lt;&lt;<span class="number">1</span>].tag%=mod;</span><br><span class="line">        tree[(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].tag%=mod;</span><br><span class="line">        <span class="comment">//清除当前节点懒标记</span></span><br><span class="line">        tree[node].tag=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(ll l,ll r,ll val,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tree[node].l&amp;&amp;r&gt;=tree[node].r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[node].sum+=val*(tree[node].r-tree[node].l+<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//做标记</span></span><br><span class="line">        tree[node].tag+=val;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    spread(node);<span class="comment">//标记下传</span></span><br><span class="line">    ll mid=(tree[node].l+tree[node].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid)</span><br><span class="line">    &#123;</span><br><span class="line">        add(l,r,val,node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid)</span><br><span class="line">    &#123;</span><br><span class="line">        add(l,r,val,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    update(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">query</span><span class="params">(ll l,ll r,ll node)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tree[node].l&amp;&amp;r&gt;=tree[node].r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> tree[node].sum%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    spread(node);<span class="comment">//标记下传</span></span><br><span class="line">    ll mid=(tree[node].l+tree[node].r)&gt;&gt;<span class="number">1</span>,val=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid)</span><br><span class="line">    &#123;</span><br><span class="line">        val+=query(l,r,node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">        val%=mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid)</span><br><span class="line">    &#123;</span><br><span class="line">        val+=query(l,r,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">        val%=mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> val%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(ll node,ll f,ll dep)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    depth[node]=dep,fa[node]=f,size[node]=<span class="number">1</span>;<span class="comment">//更新节点深度，父节点，节点为根的子树大小</span></span><br><span class="line">    ll maxn=<span class="number">-1</span>;<span class="comment">//重儿子</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=last[node];i;i=ed[i].prev)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ed[i].to!=f)<span class="comment">//遍历子节点</span></span><br><span class="line">        &#123;</span><br><span class="line">            dfs(ed[i].to,node,dep+<span class="number">1</span>);</span><br><span class="line">            size[node]+=size[ed[i].to];<span class="comment">//更新子树大小</span></span><br><span class="line">            <span class="keyword">if</span>(size[ed[i].to]&gt;maxn)</span><br><span class="line">            &#123;</span><br><span class="line">                heavy[node]=ed[i].to,maxn=size[ed[i].to];<span class="comment">//标记重儿子</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ddfs</span><span class="params">(ll node,ll link)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    id[node]=++ccnt,val[ccnt]=pre[node],top[node]=link;<span class="comment">//标记节点新编号，赋初始值，更新节点所在重链的顶部</span></span><br><span class="line">    <span class="keyword">if</span>(!heavy[node])<span class="comment">//连重儿子都没有，肯定没有轻儿子，回溯</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ddfs(heavy[node],link);<span class="comment">//先遍历重儿子</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=last[node];i;i=ed[i].prev)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ed[i].to!=fa[node]&amp;&amp;ed[i].to!=heavy[node])</span><br><span class="line">        &#123;</span><br><span class="line">            ddfs(ed[i].to,ed[i].to);<span class="comment">//遍历轻儿子，该节点所在重链顶部节点为自己</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//无脑操作</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">queryPath</span><span class="params">(ll x,ll y)</span><span class="comment">//查询路径点权和</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(depth[top[x]]&lt;depth[top[y]])</span><br><span class="line">        &#123;</span><br><span class="line">            swap(x,y);</span><br><span class="line">        &#125;</span><br><span class="line">        ans+=query(id[top[x]],id[x],<span class="number">1</span>)%mod;<span class="comment">//加上整个链的点权和</span></span><br><span class="line">        x=fa[top[x]];<span class="comment">//爬到链顶</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(depth[x]&gt;depth[y])</span><br><span class="line">    &#123;</span><br><span class="line">        swap(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    ans+=query(id[x],id[y],<span class="number">1</span>)%mod;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">querySubtree</span><span class="params">(ll root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> query(id[root],id[root]+size[root]<span class="number">-1</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">changePath</span><span class="params">(ll x,ll y,ll val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(depth[top[x]]&lt;depth[top[y]])</span><br><span class="line">        &#123;</span><br><span class="line">            swap(x,y);</span><br><span class="line">        &#125;</span><br><span class="line">        add(id[top[x]],id[x],val,<span class="number">1</span>);</span><br><span class="line">        x=fa[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(depth[x]&gt;depth[y])</span><br><span class="line">    &#123;</span><br><span class="line">        swap(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    add(id[x],id[y],val,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">changeSubtree</span><span class="params">(ll root,ll val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    add(id[root],id[root]+size[root]<span class="number">-1</span>,val,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    nc=read(),cnt=read(),root=read(),mod=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=nc;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pre[i]=read();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nc<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        from=read(),to=read();</span><br><span class="line">        addEdge(from,to),addEdge(to,from);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(root,<span class="number">0</span>,<span class="number">1</span>),ddfs(root,root),create(<span class="number">1</span>,nc,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        op=read();</span><br><span class="line">        <span class="keyword">switch</span>(op)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:&#123;</span><br><span class="line">                x=read(),y=read(),z=read();</span><br><span class="line">                changePath(x,y,z%mod);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:&#123;</span><br><span class="line">                x=read(),y=read();</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;queryPath(x,y)%mod&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:&#123;</span><br><span class="line">                x=read(),y=read();</span><br><span class="line">                changeSubtree(x,y%mod);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:&#123;</span><br><span class="line">                x=read();</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;querySubtree(x)%mod&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 树链剖分 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>学习笔记·树链剖分</title>
      <link href="/2018/08/13/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
      <url>/2018/08/13/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/</url>
      
        <content type="html"><![CDATA[<p>树链剖分是一种将一颗树通过划分不相交的来维护树上路径信息的算法。它保证每一个点仅在一个链上，并通过毒瘤数据结构来维护节点信息。<br><a id="more"></a><br>树链剖分是干什么用的呢？很简单，借助树链剖分，可以任意修改树上两点最短路径的点权和子树点权，根本用不着树上差分。<br>如果这棵树是一条链，支持修改和查询，那么我们可以重新按深度编号，这样子每棵子树上的编号都是连续的了，就可以用<strong>毒瘤数据结构</strong>来解决。<br>但是，事实上，连洛谷模板的样例都不是一条链。尽管有人说可以用LCA+树上差分过，但你觉得数据可能是纯随机的么qwq。<br>所以说，我们应该用树链剖分。</p><h3 id="前置技能"><a href="#前置技能" class="headerlink" title="前置技能"></a>前置技能</h3><p>第一个是刚才标粗的<strong>毒瘤数据结构</strong>，树链剖分是依靠毒瘤数据结构，比如线段树，树状数组，平衡树等来修改和查询，否则就GG了……<br>第二个是<strong>LCA</strong>，即<strong>最近公共祖先</strong>。<br>第三个是<strong>树的DFS序</strong>，这个有什么用后面会讲。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 未完待续 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 树链剖分 </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P2002」消息扩散</title>
      <link href="/2018/08/11/%E3%80%8CLuogu-P2002%E3%80%8D%E6%B6%88%E6%81%AF%E6%89%A9%E6%95%A3/"/>
      <url>/2018/08/11/%E3%80%8CLuogu-P2002%E3%80%8D%E6%B6%88%E6%81%AF%E6%89%A9%E6%95%A3/</url>
      
        <content type="html"><![CDATA[<p>给出一个有向图，消息沿着边扩散，求最少需要在几个点发消息才能使整个图所有点都得到消息。<br><a id="more"></a></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    ll to,prev;</span><br><span class="line">&#125;;</span><br><span class="line">edge ed[<span class="number">500001</span>],scc[<span class="number">500001</span>];</span><br><span class="line">ll test,tot,num,top,cnt,nc,ec,ans;</span><br><span class="line">ll last[<span class="number">500001</span>],sccLast[<span class="number">500001</span>],dfn[<span class="number">500001</span>],low[<span class="number">500001</span>],ins[<span class="number">500001</span>],belong[<span class="number">500001</span>];</span><br><span class="line">ll from[<span class="number">500001</span>],to[<span class="number">500001</span>],size[<span class="number">500001</span>],in[<span class="number">500001</span>];</span><br><span class="line"><span class="built_in">stack</span>&lt;ll&gt;st;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(ll from,ll to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ed[++tot].to=to;</span><br><span class="line">    ed[tot].prev=last[from];</span><br><span class="line">    last[from]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addSCC</span><span class="params">(ll from,ll to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    scc[++tot].to=to;</span><br><span class="line">    scc[tot].prev=sccLast[from];</span><br><span class="line">    sccLast[from]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dfn[node]=low[node]=++num;</span><br><span class="line">    st.push(node),ins[node]=<span class="number">1</span>;</span><br><span class="line">    ll flag=<span class="number">0</span>,to;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=last[node];i;i=ed[i].prev)</span><br><span class="line">    &#123;</span><br><span class="line">        to=ed[i].to;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[to])</span><br><span class="line">        &#123;</span><br><span class="line">            tarjan(to);</span><br><span class="line">            low[node]=min(low[node],low[to]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(ins[to])</span><br><span class="line">            &#123;</span><br><span class="line">                low[node]=min(low[node],dfn[to]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dfn[node]==low[node])</span><br><span class="line">    &#123;</span><br><span class="line">        cnt++;</span><br><span class="line">        ll nd;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            nd=st.top(),st.pop();</span><br><span class="line">            ins[nd]=<span class="number">0</span>;</span><br><span class="line">            belong[nd]=cnt;</span><br><span class="line">            size[cnt]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(node!=nd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">mergePoint</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tot=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ec;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(belong[from[i]]!=belong[to[i]])</span><br><span class="line">        &#123;</span><br><span class="line">            addSCC(belong[from[i]],belong[to[i]]);</span><br><span class="line">            in[belong[to[i]]]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;nc&gt;&gt;ec;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ec;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;from[i]&gt;&gt;to[i];</span><br><span class="line">        addEdge(from[i],to[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=nc;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[i])</span><br><span class="line">        &#123;</span><br><span class="line">            tarjan(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mergePoint();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">if</span>(!in[i])</span><br><span class="line">    &#123;</span><br><span class="line">    ans++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 强连通分量 </tag>
            
            <tag> 未完待续 </tag>
            
            <tag> 洛谷 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「CodeForces 402E」Strictly Positive Matrix</title>
      <link href="/2018/08/11/%E3%80%8CCodeForces-402E%E3%80%8DStrictly-Positive-Matrix/"/>
      <url>/2018/08/11/%E3%80%8CCodeForces-402E%E3%80%8DStrictly-Positive-Matrix/</url>
      
        <content type="html"><![CDATA[<p>给你一个$n*n$大小的矩阵，问你是否有一个正整数$k$使得这个矩阵的$k$次幂均为正数。<br><a id="more"></a><br>未完，贴代码</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    ll to,prev;</span><br><span class="line">&#125;;</span><br><span class="line">edge ed[<span class="number">5000001</span>];</span><br><span class="line">ll tot,num,dist,top,cnt,nc;</span><br><span class="line">ll last[<span class="number">5000001</span>],dfn[<span class="number">5000001</span>],low[<span class="number">5000001</span>],ins[<span class="number">5000001</span>],belong[<span class="number">5000001</span>],size[<span class="number">5000001</span>];</span><br><span class="line"><span class="built_in">stack</span>&lt;ll&gt;st;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(ll from,ll to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ed[++tot].to=to;</span><br><span class="line">    ed[tot].prev=last[from];</span><br><span class="line">    last[from]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dfn[node]=low[node]=++num;</span><br><span class="line">    st.push(node),ins[node]=<span class="number">1</span>;</span><br><span class="line">    ll flag=<span class="number">0</span>,to;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=last[node];i;i=ed[i].prev)</span><br><span class="line">    &#123;</span><br><span class="line">        to=ed[i].to;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[to])</span><br><span class="line">        &#123;</span><br><span class="line">            tarjan(to);</span><br><span class="line">            low[node]=min(low[node],low[to]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(ins[to])</span><br><span class="line">            &#123;</span><br><span class="line">                low[node]=min(low[node],dfn[to]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dfn[node]==low[node])</span><br><span class="line">    &#123;</span><br><span class="line">        cnt++;</span><br><span class="line">        ll nd;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            nd=st.top(),st.pop();</span><br><span class="line">            ins[nd]=<span class="number">0</span>;</span><br><span class="line">            belong[nd]=cnt;</span><br><span class="line">            size[cnt]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(node!=nd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;nc);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nc;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;nc;j++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;dist);</span><br><span class="line">    <span class="keyword">if</span>(dist)</span><br><span class="line">    &#123;</span><br><span class="line">    addEdge(i+<span class="number">1</span>,j+<span class="number">1</span>); </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=nc;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[i])</span><br><span class="line">        &#123;</span><br><span class="line">            tarjan(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cnt==<span class="number">1</span>?<span class="built_in">printf</span>(<span class="string">"YES\n"</span>):<span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CodeForces </tag>
            
            <tag> 图论 </tag>
            
            <tag> 强连通分量 </tag>
            
            <tag> 邻接矩阵 </tag>
            
            <tag> 未完待续 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P2341」[HAOI2006]受欢迎的牛</title>
      <link href="/2018/08/09/%E3%80%8CHAOI2006%E3%80%8D%E5%8F%97%E6%AC%A2%E8%BF%8E%E7%9A%84%E7%89%9B/"/>
      <url>/2018/08/09/%E3%80%8CHAOI2006%E3%80%8D%E5%8F%97%E6%AC%A2%E8%BF%8E%E7%9A%84%E7%89%9B/</url>
      
        <content type="html"><![CDATA[<p>给定一个有向图，找出与其他点均可达的点的个数。<br><a id="more"></a></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    ll to,prev;</span><br><span class="line">&#125;;</span><br><span class="line">edge ed[<span class="number">150001</span>],scc[<span class="number">150001</span>];</span><br><span class="line">ll sccno,tot,num,top,cnt,nc,ec,ans;</span><br><span class="line">ll last[<span class="number">150001</span>],sccLast[<span class="number">150001</span>],dfn[<span class="number">150001</span>],low[<span class="number">150001</span>],ins[<span class="number">150001</span>],belong[<span class="number">150001</span>];</span><br><span class="line">ll from[<span class="number">150001</span>],to[<span class="number">150001</span>],size[<span class="number">150001</span>],out[<span class="number">150001</span>];</span><br><span class="line"><span class="built_in">stack</span>&lt;ll&gt;st;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(ll from,ll to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ed[++tot].to=to;</span><br><span class="line">    ed[tot].prev=last[from];</span><br><span class="line">    last[from]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addSCC</span><span class="params">(ll from,ll to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    scc[++tot].to=to;</span><br><span class="line">    scc[tot].prev=sccLast[from];</span><br><span class="line">    sccLast[from]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dfn[node]=low[node]=++num;</span><br><span class="line">    st.push(node),ins[node]=<span class="number">1</span>;</span><br><span class="line">    ll flag=<span class="number">0</span>,to;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=last[node];i;i=ed[i].prev)</span><br><span class="line">    &#123;</span><br><span class="line">        to=ed[i].to;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[to])</span><br><span class="line">        &#123;</span><br><span class="line">            tarjan(to);</span><br><span class="line">            low[node]=min(low[node],low[to]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(ins[to])</span><br><span class="line">            &#123;</span><br><span class="line">                low[node]=min(low[node],dfn[to]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dfn[node]==low[node])</span><br><span class="line">    &#123;</span><br><span class="line">        cnt++;</span><br><span class="line">        ll nd;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            nd=st.top(),st.pop();</span><br><span class="line">            ins[nd]=<span class="number">0</span>;</span><br><span class="line">            belong[nd]=cnt;</span><br><span class="line">            size[cnt]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(node!=nd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">mergePoint</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tot=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ec;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(belong[from[i]]!=belong[to[i]])</span><br><span class="line">        &#123;</span><br><span class="line">            addSCC(belong[from[i]],belong[to[i]]);</span><br><span class="line">            out[belong[from[i]]]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;nc&gt;&gt;ec;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ec;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;from[i]&gt;&gt;to[i];</span><br><span class="line">        addEdge(from[i],to[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=nc;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[i])</span><br><span class="line">        &#123;</span><br><span class="line">            tarjan(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mergePoint();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">if</span>(!out[i])</span><br><span class="line">    &#123;</span><br><span class="line">    ans++;</span><br><span class="line">    sccno=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ans!=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;size[sccno];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 强连通分量 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> BZOJ </tag>
            
            <tag> HAOI </tag>
            
            <tag> 缩点 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「UVa 11324」The Largest Clique</title>
      <link href="/2018/08/08/%E3%80%8CUVa-11324%E3%80%8DThe-Largest-Clique/"/>
      <url>/2018/08/08/%E3%80%8CUVa-11324%E3%80%8DThe-Largest-Clique/</url>
      
        <content type="html"><![CDATA[<p>给定一个有向图，找出一个子图使得对于该子图的任意两个点$u$,$v$,$u$可以到达$v$或$v$可以到达$u$,判断这样的最大子图的节点个数。<br><a id="more"></a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>登不了UVa，只能用洛谷的链接惹qwq<br><a href="https://www.luogu.org/problemnew/show/UVA11324" target="_blank" rel="noopener">UVa 11324</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>求出图中的强连通分量，缩点，变成DAG。每一个点给一个权值，权值设为每个强连通分量的结点数。最后用记忆化搜索给出最长路。<br>求最长路时写炸了，<del>输入居然可以决定最长路的总权值</del></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    ll to,prev;</span><br><span class="line">&#125;;</span><br><span class="line">edge ed[<span class="number">150001</span>],scc[<span class="number">150001</span>];</span><br><span class="line">ll test,tot,num,top,cnt,nc,ec,ans;</span><br><span class="line">ll last[<span class="number">150001</span>],sccLast[<span class="number">150001</span>],dfn[<span class="number">150001</span>],low[<span class="number">150001</span>],ins[<span class="number">150001</span>],belong[<span class="number">150001</span>];</span><br><span class="line">ll from[<span class="number">150001</span>],to[<span class="number">150001</span>],size[<span class="number">150001</span>],dp[<span class="number">150001</span>];</span><br><span class="line"><span class="built_in">stack</span>&lt;ll&gt;st;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(ll from,ll to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ed[++tot].to=to;</span><br><span class="line">    ed[tot].prev=last[from];</span><br><span class="line">    last[from]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addSCC</span><span class="params">(ll from,ll to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    scc[++tot].to=to;</span><br><span class="line">    scc[tot].prev=sccLast[from];</span><br><span class="line">    sccLast[from]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dfn[node]=low[node]=++num;</span><br><span class="line">    st.push(node),ins[node]=<span class="number">1</span>;</span><br><span class="line">    ll flag=<span class="number">0</span>,to;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=last[node];i;i=ed[i].prev)</span><br><span class="line">    &#123;</span><br><span class="line">        to=ed[i].to;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[to])</span><br><span class="line">        &#123;</span><br><span class="line">            tarjan(to);</span><br><span class="line">            low[node]=min(low[node],low[to]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(ins[to])</span><br><span class="line">            &#123;</span><br><span class="line">                low[node]=min(low[node],dfn[to]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dfn[node]==low[node])</span><br><span class="line">    &#123;</span><br><span class="line">        cnt++;</span><br><span class="line">        ll nd;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            nd=st.top(),st.pop();</span><br><span class="line">            ins[nd]=<span class="number">0</span>;</span><br><span class="line">            belong[nd]=cnt;</span><br><span class="line">            size[cnt]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(node!=nd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">mergePoint</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tot=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ec;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(belong[from[i]]!=belong[to[i]])</span><br><span class="line">        &#123;</span><br><span class="line">            addSCC(belong[from[i]],belong[to[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">search</span><span class="params">(ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dp[node]) </span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dp[node]=size[node];</span><br><span class="line">    ll maxn=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=sccLast[node];i;i=scc[i].prev)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!dp[scc[i].to])</span><br><span class="line">        &#123;</span><br><span class="line">        search(scc[i].to);</span><br><span class="line">        &#125;</span><br><span class="line">        maxn=max(maxn,dp[scc[i].to]);</span><br><span class="line">    &#125;</span><br><span class="line">    dp[node]+=maxn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;test;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;test;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;nc&gt;&gt;ec;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ec;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;from[i]&gt;&gt;to[i];</span><br><span class="line">            addEdge(from[i],to[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=nc;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!dfn[i])</span><br><span class="line">            &#123;</span><br><span class="line">                tarjan(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mergePoint();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">if</span>(!dp[i])</span><br><span class="line">        &#123;</span><br><span class="line">        search(i);</span><br><span class="line">        ans=max(ans,dp[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        tot=num=top=cnt=nc=ec=ans=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(last,<span class="number">0</span>,<span class="keyword">sizeof</span>(last));</span><br><span class="line">        <span class="built_in">memset</span>(sccLast,<span class="number">0</span>,<span class="keyword">sizeof</span>(sccLast));</span><br><span class="line">        <span class="built_in">memset</span>(dfn,<span class="number">0</span>,<span class="keyword">sizeof</span>(dfn));</span><br><span class="line">        <span class="built_in">memset</span>(low,<span class="number">0</span>,<span class="keyword">sizeof</span>(low));</span><br><span class="line">        <span class="built_in">memset</span>(ins,<span class="number">0</span>,<span class="keyword">sizeof</span>(ins));</span><br><span class="line">        <span class="built_in">memset</span>(belong,<span class="number">0</span>,<span class="keyword">sizeof</span>(belong));</span><br><span class="line">        <span class="built_in">memset</span>(from,<span class="number">0</span>,<span class="keyword">sizeof</span>(from));</span><br><span class="line">        <span class="built_in">memset</span>(to,<span class="number">0</span>,<span class="keyword">sizeof</span>(to));</span><br><span class="line">        <span class="built_in">memset</span>(size,<span class="number">0</span>,<span class="keyword">sizeof</span>(size));</span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">150001</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            ed[i].prev=ed[i].to=scc[i].prev=scc[i].to=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 强连通分量 </tag>
            
            <tag> 缩点 </tag>
            
            <tag> UVa </tag>
            
            <tag> 记忆化搜索 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P3128」最大流</title>
      <link href="/2018/08/08/%E3%80%8CLuogu-P3128%E3%80%8D%E6%9C%80%E5%A4%A7%E6%B5%81/"/>
      <url>/2018/08/08/%E3%80%8CLuogu-P3128%E3%80%8D%E6%9C%80%E5%A4%A7%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<p>给出一棵树和一些操作，每次操作都将两点间所有经过的点的点权+1，求出点权最大的点的权值。<br><a id="more"></a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.org/problemnew/show/P3128" target="_blank" rel="noopener">Luogu P3128</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>怎么说呢，一道<strong>树上点差分</strong>模板题，当然树链剖分也可以做。<br>定义$diff[i]$为点$i$的差分值，那么对于每一次修改的参数$start$和$end$，将$diff[start++,diff[end++,diff[\operatorname{lca}(start,end)—]$。为了不让路线修改蔓延到祖先，把LCA的父节点的差分值-1。<br>最后用DFS求出子树差分数组的和就得到该节点修改后的点权啦。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    ll to,prev;  </span><br><span class="line">&#125;;</span><br><span class="line">ll nc,ec,query,root,from,to;</span><br><span class="line">ll depth[<span class="number">500010</span>],anc[<span class="number">500010</span>][<span class="number">31</span>],last[<span class="number">500010</span>],diff[<span class="number">500010</span>],LCA,maxn;</span><br><span class="line">edge ed[<span class="number">500010</span>*<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(ll from,ll to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ed[++ec].prev=last[from];</span><br><span class="line">    ed[ec].to=to;</span><br><span class="line">    last[from]=ec;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll son;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=last[node];i!=<span class="number">0</span>;i=ed[i].prev)</span><br><span class="line">    &#123;</span><br><span class="line">        son=ed[i].to;</span><br><span class="line">        <span class="keyword">if</span>(!depth[son])</span><br><span class="line">        &#123;</span><br><span class="line">            depth[son]=depth[node]+<span class="number">1</span>;</span><br><span class="line">            anc[son][<span class="number">0</span>]=node;</span><br><span class="line">            dfs(son);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">LCASetup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    depth[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    anc[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    dfs(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">21</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=nc;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            anc[j][i]=anc[anc[j][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">lca</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(depth[x]&gt;depth[y])</span><br><span class="line">    &#123;</span><br><span class="line">        swap(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">21</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(depth[anc[y][i]]&gt;=depth[x])</span><br><span class="line">        &#123;</span><br><span class="line">            y=anc[y][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x==y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">21</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(anc[x][i]!=anc[y][i])</span><br><span class="line">        &#123;</span><br><span class="line">            x=anc[x][i];</span><br><span class="line">            y=anc[y][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> anc[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">ddfs</span><span class="params">(ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=last[node];i;i=ed[i].prev)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ed[i].to==anc[node][<span class="number">0</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ddfs(ed[i].to);</span><br><span class="line">        diff[node]+=diff[ed[i].to];</span><br><span class="line">    &#125;</span><br><span class="line">    maxn=max(maxn,diff[node]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;nc,&amp;query);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nc<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;from,&amp;to);</span><br><span class="line">        addEdge(from,to);</span><br><span class="line">        addEdge(to,from);</span><br><span class="line">    &#125;</span><br><span class="line">    LCASetup();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;query;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;from,&amp;to);</span><br><span class="line">        LCA=lca(from,to);</span><br><span class="line">        diff[from]++,diff[to]++,diff[LCA]--,diff[anc[LCA][<span class="number">0</span>]]--;</span><br><span class="line">    &#125;</span><br><span class="line">    ddfs(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;maxn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> LCA </tag>
            
            <tag> 树上差分 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 树链剖分 </tag>
            
            <tag> USACO </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「CodeForces 191C」Fools and Roads</title>
      <link href="/2018/08/07/%E3%80%8CCodeForces-191C%E3%80%8DFools-and-Roads/"/>
      <url>/2018/08/07/%E3%80%8CCodeForces-191C%E3%80%8DFools-and-Roads/</url>
      
        <content type="html"><![CDATA[<p>给一棵有根树和一些路线，路线上的边权都+1，求所有边的权值<br><a id="more"></a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="http://codeforces.com/problemset/problem/191/C" target="_blank" rel="noopener">CodeForces 191C</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这个题目的输出是每一条边所经过的次数，所以想到<strong>树上边差分</strong>。<br>在差分之后确实是晕了，没有想到好的方法，但是突然想到了<strong>DFS求树上前缀和</strong>，对于每一条边，只要计算深度小的前缀和-深度大的前缀和即得答案。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    ll to,prev;  </span><br><span class="line">&#125;;</span><br><span class="line">ll nc,ec,query,root,from,to;</span><br><span class="line">ll depth[<span class="number">500010</span>],anc[<span class="number">500010</span>][<span class="number">31</span>],last[<span class="number">500010</span>],diff[<span class="number">500010</span>],prefix[<span class="number">500010</span>],LCA,maxn;</span><br><span class="line">ll From[<span class="number">500010</span>],To[<span class="number">500010</span>];</span><br><span class="line">edge ed[<span class="number">500010</span>*<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(ll from,ll to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ed[++ec].prev=last[from];</span><br><span class="line">    ed[ec].to=to;</span><br><span class="line">    last[from]=ec;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll son;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=last[node];i!=<span class="number">0</span>;i=ed[i].prev)</span><br><span class="line">    &#123;</span><br><span class="line">        son=ed[i].to;</span><br><span class="line">        <span class="keyword">if</span>(!depth[son])</span><br><span class="line">        &#123;</span><br><span class="line">            depth[son]=depth[node]+<span class="number">1</span>;</span><br><span class="line">            anc[son][<span class="number">0</span>]=node;</span><br><span class="line">            dfs(son);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">LCASetup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    depth[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    anc[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    dfs(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">21</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=nc;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            anc[j][i]=anc[anc[j][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">lca</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(depth[x]&gt;depth[y])</span><br><span class="line">    &#123;</span><br><span class="line">        swap(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">21</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(depth[anc[y][i]]&gt;=depth[x])</span><br><span class="line">        &#123;</span><br><span class="line">            y=anc[y][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x==y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">21</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(anc[x][i]!=anc[y][i])</span><br><span class="line">        &#123;</span><br><span class="line">            x=anc[x][i];</span><br><span class="line">            y=anc[y][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> anc[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ddfs</span><span class="params">(ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=last[node];i;i=ed[i].prev)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ed[i].to==anc[node][<span class="number">0</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ddfs(ed[i].to);</span><br><span class="line">        diff[node]+=diff[ed[i].to];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dffs</span><span class="params">(ll node,ll val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    prefix[node]=diff[node]+val;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=last[node];i;i=ed[i].prev)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ed[i].to==anc[node][<span class="number">0</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dffs(ed[i].to,prefix[node]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;nc);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nc<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;from,&amp;to);</span><br><span class="line">        From[i]=from,To[i]=to;</span><br><span class="line">        addEdge(from,to);</span><br><span class="line">        addEdge(to,from);</span><br><span class="line">    &#125;</span><br><span class="line">    LCASetup();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;query);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;query;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;from,&amp;to);</span><br><span class="line">        LCA=lca(from,to);</span><br><span class="line">        diff[from]++,diff[to]++,diff[LCA]-=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ddfs(<span class="number">1</span>);</span><br><span class="line">    dffs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nc<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">if</span>(depth[From[i]]&lt;depth[To[i]])</span><br><span class="line">    &#123;</span><br><span class="line">    swap(From[i],To[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,prefix[From[i]]-prefix[To[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CodeForces </tag>
            
            <tag> LCA </tag>
            
            <tag> 树上差分 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
