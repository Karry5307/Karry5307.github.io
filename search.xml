<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>XJOI 模拟赛题解</title>
      <link href="/2020/04/06/XJOI-%E6%A8%A1%E6%8B%9F%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
      <url>/2020/04/06/XJOI-%E6%A8%A1%E6%8B%9F%E8%B5%9B%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h3><p>大胆猜想答案为 $n(n+1)-1$。</p><p>对于 $n$ 为奇数我们可以按照如下方法构造：</p><p><img src="/2020/04/06/XJOI-模拟赛题解/1.JPG" alt=""></p><p>也就是从 $(1,1)$ 出发走到 $(1,n+1)$，然后每一次往下走一步之后反复横跳即可。</p><p>但是如果 $n$ 为偶数呢？</p><p>可以这么构造：</p><p><img src="/2020/04/06/XJOI-模拟赛题解/2.JPG" alt=""></p><p>也就是先从 $(n,1)$ 走到 $(1,1)$，每一次往右走之后反复横跳即可。</p><p>容易证明不存在比这种解法更优的解了。</p><h3 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h3><p>注意到我们对于每个点只需要拿他与离它最远的点贡献一次就好了，别的决策都是没有用的。</p><p>所以说考虑把树的一个直径抠出来，那么离某个点最远的点一定是直径的端点（证明可以用反证法）。</p><h3 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h3><p>有一个很暴力的状压 $\texttt{dp}$，考虑枚举一下集合 $S$ 转移即可。</p><p>发现 $S$ 是个区间，状态数变成 $O(n^2)$，枚举一下进行的操作和操作完的位置即可 $O(n^4)$，使用前缀和优化可以达到 $O(n^3)$。</p><p>考虑对操作做一个完全背包，然后钦定操作完之后 $S$ 必须位于不同的区间。</p><p>这样状态数变成 $O(n)$，也即覆盖了一个前缀或是一个后缀或是一整段。</p><p>于是就可以 $O(n^2)$ 解决。</p><h3 id="T4"><a href="#T4" class="headerlink" title="T4"></a>T4</h3><p>首先，如果 $m$ 是奇数的话先手取 $1$ 就可以赢了。</p><p>否则双方每次只能取偶数。（如果某一方取了奇数的话剩下的行动值是奇数那么另一方就可以取 $1$）</p><p>所以我们可以把总行动值与每次操作取得除掉一个 $2$，于是就有</p><script type="math/tex; mode=display">\begin{cases}h_m=1,&2\nmid m\\h_{2m}=2h_m\end{cases}</script><p>明显 $h_x=\operatorname{lowbit}(x)$，所以答案就是</p><script type="math/tex; mode=display">\sum\limits_{i=1}^{n}\left\lfloor\frac{n}{i}\right\rfloor\operatorname{lowbit}(i)</script><p>这个可以用整除分块做，复杂度是 $O(\sqrt{n}\log n)$，可以拿到 $69\sim 100$ 分，但是这不是正解。</p><p>考虑枚举 $h_i$ 的取值并统一计算贡献，方便起见我们设 $g(n)=\sum\limits_{i=1}^{n}\left\lfloor\frac{n}{i}\right\rfloor$，那么答案为</p><script type="math/tex; mode=display">g(n)+\sum\limits_{k\geq 1}2^{k-1}g\left(\frac{n}{2^k}\right)</script><p>时间复杂度为 $O(\sqrt{n})$。</p><p>计算单个 $g(n)$ 可以用整除分块做，尽管是 $O(\sqrt{n})$ 的，但是常数比较大，可能拿不到满分。</p><p>可以这么做：</p><script type="math/tex; mode=display">g(n)=\sum\limits_{i=1}^{n}\left\lfloor\frac{n}{i}\right\rfloor=\sum\limits_{i=1}^{n}\sum\limits_{j=1}^{n}[ij\leq n]=2\sum\limits_{i=1}^{\sqrt{n}}\sum\limits_{j=1}^{\left\lfloor\frac{n}{i}\right\rfloor}1-\sum\limits_{i=1}^{\sqrt{n}}\sum\limits_{j=1}^{n}1=2\sum\limits_{i=1}^{\sqrt{n}}\left\lfloor\frac{n}{i}\right\rfloor-\left\lfloor\sqrt{n}\right\rfloor</script><p>暴力枚举即可，常数比整除分块小，可以通过。</p><h3 id="T5"><a href="#T5" class="headerlink" title="T5"></a>T5</h3><p>不会，留坑。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>$\texttt{T1}$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> li;</span><br><span class="line">ll n;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">calcOdd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n+<span class="number">1</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"1 %d\n"</span>,i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i+=<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=n+<span class="number">1</span>,k=i;j&gt;=<span class="number">1</span>;j--,k^=<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,k,j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>,k=i;j&lt;=n+<span class="number">1</span>;j++,k^=<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,k,j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">calcEven</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d 1\n"</span>,i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=(n+<span class="number">1</span>);i+=<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>,k=i;j&lt;=n;j++,k^=<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,j,k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=n,k=i;j&gt;=<span class="number">1</span>;j--,k^=<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,j,k);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,n*(n+<span class="number">1</span>)<span class="number">-1</span>);</span><br><span class="line">n&amp;<span class="number">1</span>?calcOdd():calcEven();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>$\texttt{T2}$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> li;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">2e5</span>+<span class="number">51</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">ll to,prev;</span><br><span class="line">&#125;;</span><br><span class="line">Edge ed[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line">ll nc,tot,res,from,to,u,v;</span><br><span class="line">ll last[MAXN],x[MAXN],vis[MAXN],dist[MAXN],dist2[MAXN];</span><br><span class="line"><span class="built_in">queue</span>&lt;ll&gt;q;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(ll from,ll to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ed[++tot].prev=last[from];</span><br><span class="line">ed[tot].to=to;</span><br><span class="line">last[from]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">bfs</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll top;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">q.push(x),vis[x]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">top=q.front(),q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=last[top];i;i=ed[i].prev)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[ed[i].to])</span><br><span class="line">&#123;</span><br><span class="line">vis[ed[i].to]=<span class="number">1</span>,q.push(ed[i].to);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> top;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(ll node,ll fa,ll *dist)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dist[node]=dist[fa]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=last[node];i;i=ed[i].prev)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ed[i].to!=fa)</span><br><span class="line">&#123;</span><br><span class="line">dfs(ed[i].to,node,dist);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">nc=read();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=nc;i++)</span><br><span class="line">&#123;</span><br><span class="line">x[i]=read();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nc<span class="number">-1</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">from=read(),to=read();</span><br><span class="line">addEdge(from,to),addEdge(to,from);</span><br><span class="line">&#125;</span><br><span class="line">u=bfs(<span class="number">1</span>),v=bfs(u),dist[<span class="number">0</span>]=dist2[<span class="number">0</span>]=<span class="number">-1</span>,dfs(u,<span class="number">0</span>,dist),dfs(v,<span class="number">0</span>,dist2);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=nc;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dist[i]&gt;dist2[i])</span><br><span class="line">&#123;</span><br><span class="line">res=max(res,dist[i]*max(x[u],x[i]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dist2[i]&gt;dist[i])</span><br><span class="line">&#123;</span><br><span class="line">res=max(res,dist2[i]*max(x[v],x[i]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dist[i]==dist2[i])</span><br><span class="line">&#123;</span><br><span class="line">res=max(res,dist[i]*max(max(x[u],x[i]),max(x[v],x[i])));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>$\texttt{T3}$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">2e3</span>+<span class="number">51</span>,inf=<span class="number">1e18</span>;</span><br><span class="line">ll test,n,m,v,g;</span><br><span class="line">ll x[MAXN],prv[MAXN],nxt[MAXN],sum[MAXN],dp[MAXN][<span class="number">2</span>],f[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">calc</span><span class="params">(ll l,ll r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(r&lt;=x[<span class="number">1</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll lx=nxt[l],rx=prv[r],res;</span><br><span class="line">    <span class="keyword">if</span>(lx&gt;rx)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> inf;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum[rx]-sum[lx]+dp[l][<span class="number">1</span>]+dp[r][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">calc2</span><span class="params">(ll l,ll r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(r&lt;=x[<span class="number">1</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll res=inf;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;l;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        res=min(res,calc(l-i,r-i)+f[i]*(r-l+<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=read(),m=read();</span><br><span class="line">    <span class="built_in">memset</span>(x,<span class="number">0</span>,<span class="keyword">sizeof</span>(x)),<span class="built_in">memset</span>(prv,<span class="number">0</span>,<span class="keyword">sizeof</span>(prv));</span><br><span class="line">    <span class="built_in">memset</span>(nxt,<span class="number">0</span>,<span class="keyword">sizeof</span>(nxt)),<span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">    <span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span>(f)),<span class="built_in">memset</span>(sum,<span class="number">0</span>,<span class="keyword">sizeof</span>(sum));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        x[i]=read();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=x[i<span class="number">-1</span>]+<span class="number">1</span>;j&lt;=x[i];j++)</span><br><span class="line">        &#123;</span><br><span class="line">            prv[j]=i<span class="number">-1</span>,nxt[j]=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=x[n];i++)</span><br><span class="line">    &#123;</span><br><span class="line">        f[i]=inf;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v=read(),g=read();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=g;j&lt;=x[n];j++)</span><br><span class="line">        &#123;</span><br><span class="line">            f[j]=min(f[j],f[j-g]+v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=x[i<span class="number">-1</span>]+<span class="number">1</span>;j&lt;=x[i];j++)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[j][<span class="number">0</span>]=calc2(x[i<span class="number">-1</span>]+<span class="number">1</span>,j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=x[i<span class="number">-1</span>]+<span class="number">1</span>;j&lt;=x[i];j++)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[j][<span class="number">1</span>]=calc2(j,x[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        sum[i]=sum[i<span class="number">-1</span>]+dp[x[i]][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,sum[n]&gt;=inf?<span class="number">-1</span>:sum[n]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    test=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;test;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>$\texttt{T4} O(\sqrt n\log n)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"Ofast,unroll-loops"</span>)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll MOD=<span class="number">998244353</span>;</span><br><span class="line">ll n,res,sqrtn;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">calc</span><span class="params">(ll l,ll r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll res=r-l,p=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(r)</span><br><span class="line">&#123;</span><br><span class="line">r&gt;&gt;=<span class="number">1</span>,l&gt;&gt;=<span class="number">1</span>,res+=p*(r-l);</span><br><span class="line">p&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read(),sqrtn=<span class="built_in">sqrt</span>(n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=sqrtn;i++)</span><br><span class="line">&#123;</span><br><span class="line">res=(res+(n/i)*(i&amp;-i)%MOD);</span><br><span class="line">&#125;</span><br><span class="line">res%=MOD;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> ll l=sqrtn+<span class="number">1</span>,r;l&lt;=n;l=r+<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">r=n/(n/l);</span><br><span class="line">res=(res+(n/l)*calc(l<span class="number">-1</span>,r)%MOD)%MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>$\texttt{T4} O(\sqrt{n})$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"Ofast,unroll-loops"</span>)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll MOD=<span class="number">998244353</span>;</span><br><span class="line">ll n,res,cur;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">calc</span><span class="params">(ll n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res=<span class="number">0</span>,sqrtn=<span class="built_in">sqrt</span>(n),cur=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i+<span class="number">3</span>&lt;=sqrtn;i+=<span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        res+=n/i,res+=n/(i+<span class="number">1</span>),res+=n/(i+<span class="number">2</span>),res+=n/(i+<span class="number">3</span>),cur=i+<span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(cur&lt;=sqrtn)</span><br><span class="line">    &#123;</span><br><span class="line">        res+=n/(cur++);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">2</span>*res-sqrtn*sqrtn)%MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=read();</span><br><span class="line">    res=calc(n),cur=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">60</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(!n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        res=(res+cur*calc(n)%MOD)%MOD,cur=(cur+cur)%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
            <tag> DP </tag>
            
            <tag> 数论 </tag>
            
            <tag> 博弈论 </tag>
            
            <tag> XJOI </tag>
            
            <tag> 构造 </tag>
            
            <tag> 树的直径 </tag>
            
            <tag> 背包 </tag>
            
            <tag> 整除分块 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P5293」[HNOI2019]白兔之舞</title>
      <link href="/2020/03/02/%E3%80%8CLuogu-P5293%E3%80%8D-HNOI2019-%E7%99%BD%E5%85%94%E4%B9%8B%E8%88%9E/"/>
      <url>/2020/03/02/%E3%80%8CLuogu-P5293%E3%80%8D-HNOI2019-%E7%99%BD%E5%85%94%E4%B9%8B%E8%88%9E/</url>
      
        <content type="html"><![CDATA[<p>题面有点长，而且还不好解释，所以不放简要题面了。</p><a id="more"></a><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.com.cn/problem/P5293" target="_blank" rel="noopener">Luogu P5293</a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>2019 年 4 月 7 日，HNOI2019 Day 2 赛场上，菜鸡 Karry5307 打了这题的 50 分部分分做法，可是下午出成绩的时候发现本题 boom 0。</p><p>2019 年 7 月，菜鸡 Karry5307 看到了 memset0 的题解，但是由于太菜，并没有看懂。</p><p>2019 年 10 月，菜鸡 Karry5307 学习了单位根反演，可是并没有学出什么所以然。</p><p>2019 年 11 月，菜鸡 Karry5307 学习了 MTT，第一次失败了，但是最终还是成功的通过了 Luogu 的模板题。</p><p>2020 年 1 月 21 日，菜鸡 Karry5307 成功 AC CF1286F，多项式 16 题只剩下 CF 901E 了，但是 CF901E 由于需要用到 Bluestein’s Algorithm，所以他放弃了。</p><p>2020 年 2 月 27 日，菜鸡 Karry5307 看到神仙 x义x 讨论性能优化那题，发现 x义x 会 Bluestein’s Algorithm 而自己不会。</p><p>2020 年 3 月 2 日，菜鸡 Karry5307 最终还是学习了 Bluestein’s Algorithm，并且在 30min 切掉此题。</p><p>一年前我在 HNOI2019 的赛场上，折戟沉沙。一年后，我从倒下的地方爬起。</p><p>我成功了。我不再是以前的那个我了。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>首先来看一个很傻逼的 $\texttt{dp}$。</p><p>考虑 $f_{i,j}$ 表示走 $i$ 步到第 $j$ 行的<strong>任意合法位置</strong>的方案数，$g_{i,j}$ 表示走 $i$ 步到第 $j$ <strong>行</strong>的方案数（注意这里并没有钦定在哪个位置上）。</p><p>转移比较显然，枚举一下上一次在哪一行，有</p><script type="math/tex; mode=display">g_{i,j}=\sum\limits_{k=1}^{n}g_{i-1,k}w_{k,j}</script><p>然后注意到行数比较小，所以可以使用矩阵优化。</p><p>一开始初始矩阵是 $G_0=\begin{pmatrix}1&amp;0&amp;0\end{pmatrix}$（相当于白兔在第一行），转移矩阵是</p><script type="math/tex; mode=display">S=\begin{pmatrix}w_{1,1}&\cdots&w_{1,n}\\\vdots&\ddots&\vdots\\w_{n,1}&\cdots&w_{n,n}\end{pmatrix}</script><p>所以 $G_i=\begin{pmatrix}g_{i,1}&amp;\cdots&amp;g_{i,n}\end{pmatrix}=G_0S^i$。</p><p>那么 $f_{i,j}$ 等价于白兔在 $1$ 到 $L$ 中选择 $i$ 个经过点进行跳舞，所以有</p><script type="math/tex; mode=display">f_{i,j}=\binom{L}{i}g_{i,j}</script><p>所以我们要求的是</p><script type="math/tex; mode=display">ans_t=\sum\limits_{i=1}^{L}[i\bmod k=t]f_{i,y}</script><p>发现这个不太好搞定，所以移项。</p><script type="math/tex; mode=display">ans_t=\sum\limits_{i=1}^{L}[k\mid (i-t)]f_{i,y}</script><p>然后就是套路单位根反演。</p><script type="math/tex; mode=display">ans_t=\sum\limits_{i=1}^{L}\frac{f_{i,y}}{k}\sum\limits_{j=0}^{k-1}\omega_{k}^{(i-t)j}</script><p>然后把 $k$ 提出来，单位根的括号拆掉，有</p><script type="math/tex; mode=display">ans_t=\frac{1}{k}\sum\limits_{i=1}^{L}f_{i,y}\sum\limits_{j=0}^{k-1}\omega_{k}^{ij}\omega_{k}^{-tj}</script><p>交换一下求和符号就可以把单位根提出来了，顺便把之前的 $\texttt{dp}$ 式子代进来所以</p><script type="math/tex; mode=display">ans_t=\frac{1}{k}\sum\limits_{j=0}^{k-1}\omega_{k}^{-tj}\sum\limits_{i=1}^{L}\binom{L}{i}g_{i,y}\omega_{k}^{ij}</script><p>也就是说，我们要求</p><script type="math/tex; mode=display">R_t=\frac{1}{k}\sum\limits_{j=0}^{k-1}\omega_{k}^{-tj}\sum\limits_{i=1}^{L}\binom{L}{i}G_0S^i\omega_{k}^{ij}</script><p>的第 $y$ 项，也即</p><script type="math/tex; mode=display">R_t=\frac{1}{k}\sum\limits_{j=0}^{k-1}\omega_{k}^{-tj}G_0\sum\limits_{i=1}^{L}\binom{L}{i}S^i\omega_{k}^{ij}</script><p>然后发现是个二项式定理。更加形式化的来讲，是这样的</p><script type="math/tex; mode=display">R_t=\frac{1}{k}\sum\limits_{j=0}^{k-1}\omega_{k}^{-tj}G_0\sum\limits_{i=1}^{L}\binom{L}{i}(\omega_{k}^{j}S)^i</script><p>所以</p><script type="math/tex; mode=display">R_t=\frac{1}{k}\sum\limits_{j=0}^{k-1}\omega_{k}^{-tj}G_0(\omega_{k}^{j}S+I)^L</script><p>后面这一坨可以矩阵快速幂。</p><p>设 $h_{j}=G_0(\omega_{k}^{j}S+I)^L$ 的第 $y$ 项，那么</p><script type="math/tex; mode=display">ans_t=\frac{1}{k}\sum\limits_{j=0}^{k-1}\omega_{k}^{-tj}h_{j}</script><p>如果熟悉任意长度循环卷积的套路的话可以考虑 $\texttt{Bluestein’s Algorithm}$。</p><p>但是如果把 $ij$ 拆成 $\frac{(i+j)^2}{2}-\frac{j^2}{2}-\frac{j^2}{2}$ 的话会出现一个问题，在模意义下没有二次剩余。</p><p>所以考虑把 $ij$ 拆成 $\binom{i+j}{2}-\binom{i}{2}-\binom{j}{2}$。</p><p>比较显然，拆开就可以了，所以有</p><script type="math/tex; mode=display">ans_t=\frac{1}{k}\sum\limits_{j=0}^{k-1}\omega_{k}^{-\binom{t+j}{2}+\binom{t}{2}+\binom{j}{2}}h_{j}</script><p>把一些奇奇怪怪的东西提到外面去</p><script type="math/tex; mode=display">ans_t=\frac{\omega_{k}^{\binom{t}{2}}}{k}\sum\limits_{j=0}^{k-1}h_j\omega_{k}^{\binom{j}{2}}\omega_k^{-\binom{t+j}{2}}</script><p>然后设 $f_j=h_j\omega_{k}^{\binom{j}{2}},g_j=\omega_k^{-\binom{t+j}{2}}$，有</p><script type="math/tex; mode=display">ans_t=\frac{\omega_{k}^{\binom{t}{2}}}{k}\sum\limits_{j=0}^{k-1}f_jg_{j+t}</script><p>这个随便搞搞就可以了。</p><p>注意到，在模意义下的单位根是原根，所以要先求出原根，最后 MTT 即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">524291</span>;</span><br><span class="line"><span class="keyword">const</span> db PI=<span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Complex</span>&#123;</span></span><br><span class="line">db re,im;</span><br><span class="line">Complex(db x=<span class="number">0</span>,db y=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;re=x,<span class="keyword">this</span>-&gt;im=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Complex <span class="title">conj</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> Complex(re,-im);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span>&#123;</span></span><br><span class="line">ll num[<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line">Matrix()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(num,<span class="number">0</span>,<span class="keyword">sizeof</span>(num));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> ll* <span class="keyword">operator</span> [](<span class="keyword">const</span> ll &amp;x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> num[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">const</span> ll* <span class="keyword">operator</span> [](<span class="keyword">const</span> ll &amp;x)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> num[x];</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">Matrix p,m;</span><br><span class="line">ll n,kk,l,x,y,md,g,cnt,limit,zkdxl;</span><br><span class="line">ll w[<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line">ll rev[MAXN],pw[MAXN],f[MAXN],gg[MAXN],h[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">qpow</span><span class="params">(ll base,ll exponent,ll md)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(exponent)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(exponent&amp;<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">res=res*base%md;</span><br><span class="line">&#125;</span><br><span class="line">base=base*base%md,exponent&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">inline</span> Complex <span class="keyword">operator</span> +(Complex x,Complex y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> Complex(x.re+y.re,x.im+y.im);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Complex <span class="keyword">operator</span> -(Complex x,Complex y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> Complex(x.re-y.re,x.im-y.im);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Complex <span class="keyword">operator</span> *(Complex x,Complex y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> Complex(x.re*y.re-x.im*y.im,x.re*y.im+x.im*y.re);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Complex <span class="keyword">operator</span> /(Complex x,db y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> Complex(x.re/y,x.im/y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Matrix <span class="title">id</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Matrix res;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">res[i][i]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Matrix <span class="keyword">operator</span> *(Matrix x,Matrix y)</span><br><span class="line">&#123;</span><br><span class="line">Matrix res;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++)</span><br><span class="line">&#123;</span><br><span class="line">res[i][j]=(res[i][j]+x[i][k]*y[k][j]%md)%md;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Matrix <span class="title">qpow</span><span class="params">(Matrix base,ll exponent)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Matrix res=id();</span><br><span class="line"><span class="keyword">while</span>(exponent)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(exponent&amp;<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">res=res*base;</span><br><span class="line">&#125;</span><br><span class="line">base=base*base,exponent&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">getG</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> ll q[<span class="number">10051</span>];</span><br><span class="line">ll top=<span class="number">0</span>,flg=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=<span class="built_in">sqrt</span>(x<span class="number">-1</span>);i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((x<span class="number">-1</span>)%i==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">q[++top]=i;</span><br><span class="line"><span class="keyword">if</span>(i*i!=x<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">q[++top]=(x<span class="number">-1</span>)/i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">2</span>;;i++)</span><br><span class="line">&#123;</span><br><span class="line">flg=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=top;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(qpow(i,q[j],x)==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">flg=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flg)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">calcP</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line">p[i][j]=w[i][j]*x%md;</span><br><span class="line">&#125;</span><br><span class="line">p[i][i]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">comb</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&lt;=<span class="number">1</span>?<span class="number">0</span>:(x<span class="number">-1</span>)*x/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">FFT</span><span class="params">(Complex *cp,ll cnt,ll inv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll cur=<span class="number">0</span>;</span><br><span class="line">Complex res,omg;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;rev[i])</span><br><span class="line">&#123;</span><br><span class="line">swap(cp[i],cp[rev[i]]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=cnt;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">cur=i&gt;&gt;<span class="number">1</span>,res=Complex(<span class="built_in">cos</span>(<span class="number">2</span>*PI/i),inv*<span class="built_in">sin</span>(<span class="number">2</span>*PI/i));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> Complex *p=cp;p!=cp+cnt;p+=i)</span><br><span class="line">&#123;</span><br><span class="line">omg=Complex(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cur;j++)</span><br><span class="line">&#123;</span><br><span class="line">Complex t=omg*p[j+cur],t2=p[j];</span><br><span class="line">p[j+cur]=t2-t,p[j]=t+t2;</span><br><span class="line">omg=omg*res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(inv==<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">&#123;</span><br><span class="line">cp[i]=cp[i]/cnt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">conv</span><span class="params">(ll cnt,ll *f,ll *g,ll *res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Complex p,q,r,s;</span><br><span class="line">ll t;</span><br><span class="line">ll t0,t1,t2,t3;</span><br><span class="line"><span class="keyword">static</span> Complex tmpf[MAXN],tmpg[MAXN],p0[MAXN],p1[MAXN],p2[MAXN],p3[MAXN];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">&#123;</span><br><span class="line">tmpf[i]=Complex(f[i]&amp;<span class="number">32767</span>,f[i]&gt;&gt;<span class="number">15</span>);</span><br><span class="line">tmpg[i]=Complex(g[i]&amp;<span class="number">32767</span>,g[i]&gt;&gt;<span class="number">15</span>);</span><br><span class="line">&#125;</span><br><span class="line">FFT(tmpf,cnt,<span class="number">1</span>),FFT(tmpg,cnt,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">&#123;</span><br><span class="line">t=(cnt-i)&amp;(cnt<span class="number">-1</span>);</span><br><span class="line">p=(tmpf[i]+tmpf[t].conj())*Complex(<span class="number">0.5</span>,<span class="number">0</span>);</span><br><span class="line">q=(tmpf[i]-tmpf[t].conj())*Complex(<span class="number">0</span>,<span class="number">-0.5</span>);</span><br><span class="line">r=(tmpg[i]+tmpg[t].conj())*Complex(<span class="number">0.5</span>,<span class="number">0</span>);</span><br><span class="line">s=(tmpg[i]-tmpg[t].conj())*Complex(<span class="number">0</span>,<span class="number">-0.5</span>);</span><br><span class="line">p0[i]=p*r,p1[i]=p*s,p2[i]=q*r,p3[i]=q*s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">&#123;</span><br><span class="line">tmpf[i]=p0[i]+p1[i]*Complex(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">tmpg[i]=p2[i]+p3[i]*Complex(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">FFT(tmpf,cnt,<span class="number">-1</span>),FFT(tmpg,cnt,<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">&#123;</span><br><span class="line">t0=(ll)(tmpf[i].re+<span class="number">0.5</span>)%md,t1=(ll)(tmpf[i].im+<span class="number">0.5</span>)%md;</span><br><span class="line">t2=(ll)(tmpg[i].re+<span class="number">0.5</span>)%md,t3=(ll)(tmpg[i].im+<span class="number">0.5</span>)%md;</span><br><span class="line">res[i]=(t0+(t1+t2)*<span class="number">32768</span>%md+t3*<span class="number">1073741824l</span>l%md)%md;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read(),kk=read(),l=read(),x=read(),y=read(),md=read();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line">w[i][j]=read();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">g=qpow(getG(md),(md<span class="number">-1</span>)/kk,md),pw[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;kk;i++)</span><br><span class="line">&#123;</span><br><span class="line">pw[i]=pw[i<span class="number">-1</span>]*g%md;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>,omg=<span class="number">1</span>;i&lt;kk;i++,omg=omg*g%md)</span><br><span class="line">&#123;</span><br><span class="line">calcP(omg),p=qpow(p,l),gg[i]=p[x][y]*pw[comb(i)%kk]%md;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=(kk&lt;&lt;<span class="number">1</span>);i++)</span><br><span class="line">&#123;</span><br><span class="line">f[i]=pw[(kk-comb(i)%kk)%kk];</span><br><span class="line">&#125;</span><br><span class="line">reverse(f,f+((kk&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>)),cnt=<span class="number">1</span>,limit=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(cnt&lt;=((kk&lt;&lt;<span class="number">1</span>)+kk+<span class="number">1</span>))</span><br><span class="line">&#123;</span><br><span class="line">cnt&lt;&lt;=<span class="number">1</span>,limit++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">&#123;</span><br><span class="line">rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;limit);</span><br><span class="line">&#125;</span><br><span class="line">conv(cnt,f,gg,h),zkdxl=qpow(kk,md<span class="number">-2</span>,md);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;kk;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,h[(kk&lt;&lt;<span class="number">1</span>)-i]*zkdxl%md*pw[comb(i)%kk]%md);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 多项式 </tag>
            
            <tag> FFT </tag>
            
            <tag> 原根 </tag>
            
            <tag> 各省省选 </tag>
            
            <tag> HNOI </tag>
            
            <tag> MTT </tag>
            
            <tag> Luogu </tag>
            
            <tag> dp </tag>
            
            <tag> Bluestein&#39;s Algorithm </tag>
            
            <tag> 单位根反演 </tag>
            
            <tag> 矩阵快速幂 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JSOI 套题乱做</title>
      <link href="/2020/02/05/JSOI-%E5%A5%97%E9%A2%98%E4%B9%B1%E5%81%9A/"/>
      <url>/2020/02/05/JSOI-%E5%A5%97%E9%A2%98%E4%B9%B1%E5%81%9A/</url>
      
        <content type="html"><![CDATA[<p>JSOI 解题报告</p><a id="more"></a><h2 id="JSOI2010-旅行"><a href="#JSOI2010-旅行" class="headerlink" title="[JSOI2010] 旅行"></a>[JSOI2010] 旅行</h2><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.com.cn/problem/P6029" target="_blank" rel="noopener">Luogu P6029</a></p><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=4681" target="_blank" rel="noopener">BZOJ 4681</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>动态规划。</p><p>先把边按照边权从小到大排序，然后钦定前 $x$ 条边在路径上。</p><p>于是我们可以考虑设 $dp_{i,j,k}$ 表示到了点 $i$ 经过 $j$ 条被钦定的边使用魔法次数为 $k$ 的最短路，于是就可以转移了：</p><p>假设我们现在考虑到的边是 $u\rightarrow v$，那么</p><p>如果钦定了这条边：$dp_{u,j,k}+w_{j+1}\rightarrow dp_{v,j+1,k}$</p><p>如果没有钦定这条边：</p><ul><li><p>使用魔法：$dp_{u,j,k}+w_{j+1}\rightarrow dp_{v,j+1,k+1}$</p></li><li><p>不使用魔法：$dp_{u,j,k}+\operatorname{dist}(u,v)\rightarrow dp_{v,j+1,k+1}$</p></li></ul><p>每次转移用类似 $\texttt{Dijkstra}$ 的方法跑一遍即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">161</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">ll to,prev,dist;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EdgeForSort</span>&#123;</span></span><br><span class="line">ll from,to,dist;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> EdgeForSort &amp;rhs)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;dist&lt;rhs.dist;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tuple</span>&#123;</span></span><br><span class="line">ll x,l,kk,dist;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> Tuple &amp;rhs)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;dist&gt;rhs.dist;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">Edge ed[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line">EdgeForSort edd[MAXN];</span><br><span class="line">ll nc,ec,kk,tot,limit,res=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line">ll last[MAXN],dis[MAXN][MAXN][MAXN],inQueue[MAXN][MAXN][MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(ll from,ll to,ll dist)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ed[++tot].prev=last[from];</span><br><span class="line">ed[tot].to=to;</span><br><span class="line">ed[tot].dist=dist;</span><br><span class="line">last[from]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">priority_queue&lt;Tuple&gt;q;</span><br><span class="line">ll x,l,kk,dist;</span><br><span class="line"><span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(dis));</span><br><span class="line">dis[<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>,inQueue[<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>,q.push((Tuple)&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;);</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">x=q.top().x,l=q.top().l,kk=q.top().kk,dist=dis[x][l][kk],q.pop(),inQueue[x][l][kk]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=last[x];i;i=ed[i].prev)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;=limit)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((l&lt;&lt;<span class="number">1</span>)&lt;limit&amp;&amp;dist+ed[(l+<span class="number">1</span>)&lt;&lt;<span class="number">1</span>].dist&lt;dis[ed[i].to][l+<span class="number">1</span>][kk])</span><br><span class="line">&#123;</span><br><span class="line">dis[ed[i].to][l+<span class="number">1</span>][kk]=dist+ed[(l+<span class="number">1</span>)&lt;&lt;<span class="number">1</span>].dist;</span><br><span class="line"><span class="keyword">if</span>(!inQueue[ed[i].to][l+<span class="number">1</span>][kk])</span><br><span class="line">&#123;</span><br><span class="line">inQueue[ed[i].to][l+<span class="number">1</span>][kk]=<span class="number">1</span>;</span><br><span class="line">q.push((Tuple)&#123;ed[i].to,l+<span class="number">1</span>,kk,dis[ed[i].to][l+<span class="number">1</span>][kk]&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((l&lt;&lt;<span class="number">1</span>)&lt;limit&amp;&amp;kk&lt;::kk&amp;&amp;dist+ed[(l+<span class="number">1</span>)&lt;&lt;<span class="number">1</span>].dist&lt;dis[ed[i].to][l+<span class="number">1</span>][kk+<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">dis[ed[i].to][l+<span class="number">1</span>][kk+<span class="number">1</span>]=dist+ed[(l+<span class="number">1</span>)&lt;&lt;<span class="number">1</span>].dist;</span><br><span class="line"><span class="keyword">if</span>(!inQueue[ed[i].to][l+<span class="number">1</span>][kk+<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">inQueue[ed[i].to][l+<span class="number">1</span>][kk+<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">q.push((Tuple)&#123;ed[i].to,l+<span class="number">1</span>,kk+<span class="number">1</span>,dis[ed[i].to][l+<span class="number">1</span>][kk+<span class="number">1</span>]&#125;);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dist+ed[i].dist&lt;dis[ed[i].to][l][kk])</span><br><span class="line">&#123;</span><br><span class="line">dis[ed[i].to][l][kk]=dist+ed[i].dist;</span><br><span class="line"><span class="keyword">if</span>(!inQueue[ed[i].to][l][kk])</span><br><span class="line">&#123;</span><br><span class="line">inQueue[ed[i].to][l][kk]=<span class="number">1</span>;</span><br><span class="line">q.push((Tuple)&#123;ed[i].to,l,kk,dis[ed[i].to][l][kk]&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=::kk;i++)</span><br><span class="line">&#123;</span><br><span class="line">res=min(res,dis[nc][limit&gt;&gt;<span class="number">1</span>][i]);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">nc=read(),ec=read(),kk=read();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=ec;i++)</span><br><span class="line">&#123;</span><br><span class="line">edd[i].from=read(),edd[i].to=read(),edd[i].dist=read();</span><br><span class="line">&#125;</span><br><span class="line">sort(edd+<span class="number">1</span>,edd+ec+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=ec;i++)</span><br><span class="line">&#123;</span><br><span class="line">addEdge(edd[i].from,edd[i].to,edd[i].dist);</span><br><span class="line">addEdge(edd[i].to,edd[i].from,edd[i].dist);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=ec;i++)</span><br><span class="line">&#123;</span><br><span class="line">limit=i&lt;&lt;<span class="number">1</span>,Dijkstra();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JSOI2010-找零钱的洁癖"><a href="#JSOI2010-找零钱的洁癖" class="headerlink" title="[JSOI2010] 找零钱的洁癖"></a>[JSOI2010] 找零钱的洁癖</h2><h3 id="链接-1"><a href="#链接-1" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=5021" target="_blank" rel="noopener">BZOJ 5021</a></p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>网上有人说这道题是错题。</p><p>考虑搜索。当前考虑的硬币有正负两种贡献方式。</p><p>然而搜索可能会超时，需要设定一个不同值进队次数的阈值来保证不会搜索过多次，但是这样可能无法搜出结果。</p><p>考虑贪心，将硬币按照面值排序，从大往小选即可。（为什么呢，因为那些搜索没有跑出答案的数据硬笔面值全都是 $2$ 的幂，所以直接二进制贪心）</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">1e5</span>+<span class="number">51</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tuple</span>&#123;</span></span><br><span class="line">ll num,res;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">queue</span>&lt;Tuple&gt;q;</span><br><span class="line"><span class="built_in">unordered_map</span>&lt;ll,<span class="keyword">bool</span>&gt;mp;</span><br><span class="line">ll x,cnt,res,sz;</span><br><span class="line">ll coin[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll num,rres;</span><br><span class="line">q.push((Tuple)&#123;<span class="number">0</span>,<span class="number">0</span>&#125;);</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">num=q.front().num,rres=q.front().res,q.pop();</span><br><span class="line"><span class="keyword">if</span>(sz&gt;=<span class="number">2500000</span>)</span><br><span class="line">&#123;</span><br><span class="line">res=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(mp.find(num+coin[i])==mp.end())</span><br><span class="line">&#123;</span><br><span class="line">mp[num+coin[i]]=<span class="number">1</span>,q.push((Tuple)&#123;num+coin[i],rres+<span class="number">1</span>&#125;),sz++;</span><br><span class="line"><span class="keyword">if</span>(num+coin[i]==x)</span><br><span class="line">&#123;</span><br><span class="line">res=rres+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(mp.find(num-coin[i])==mp.end())</span><br><span class="line">&#123;</span><br><span class="line">mp[num-coin[i]]=<span class="number">1</span>,q.push((Tuple)&#123;num-coin[i],rres+<span class="number">1</span>&#125;),sz++;</span><br><span class="line"><span class="keyword">if</span>(num-coin[i]==x)</span><br><span class="line">&#123;</span><br><span class="line">res=rres+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">greedy</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll tmp=x,rres=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=cnt<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">&#123;</span><br><span class="line">rres+=tmp/coin[i],tmp-=tmp/coin[i]*coin[i];</span><br><span class="line">&#125;</span><br><span class="line">res=min(res,tmp?<span class="number">0x3f3f3f3f</span>:rres);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x=read();</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;coin[cnt++])==<span class="number">1</span>;);</span><br><span class="line">sort(coin,coin+(--cnt)),bfs(),greedy(),<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JSOI2010-俄罗斯方块"><a href="#JSOI2010-俄罗斯方块" class="headerlink" title="[JSOI2010] 俄罗斯方块"></a>[JSOI2010] 俄罗斯方块</h2><h3 id="链接-2"><a href="#链接-2" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=5022" target="_blank" rel="noopener">BZOJ 5022</a></p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><p>毒瘤题。</p><p>注意到，$7$ 种方块通过旋转最多构造出 $19$ 中摆放方法。预处理一下相对高度和绝对高度即可。</p><p>然后方块数量很少，可以状压并且使用线段树维护。每一次直接暴力判断并且暴力修改该方块左右的一些高度即可。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">2e5</span>+<span class="number">51</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegmentTree</span>&#123;</span></span><br><span class="line">ll l,r,ht,state;</span><br><span class="line">&#125;;</span><br><span class="line">SegmentTree tree[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line">ll cnt,ccnt,height,p,x,t,tt;</span><br><span class="line">ll ht[MAXN],state[MAXN];</span><br><span class="line">ll id[<span class="number">19</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">6</span>&#125;;</span><br><span class="line">ll rot[<span class="number">7</span>][<span class="number">4</span>]=&#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;,&#123;<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">10</span>,<span class="number">11</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>&#125;,&#123;<span class="number">16</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">17</span>,<span class="number">18</span>,<span class="number">0</span>,<span class="number">0</span>&#125; </span><br><span class="line">&#125;;</span><br><span class="line">ll addx[<span class="number">19</span>][<span class="number">4</span>]=&#123;</span><br><span class="line">&#123;<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>&#125;,&#123;<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">2</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">2</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">2</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,&#123;<span class="number">4</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line">ll chkx[<span class="number">19</span>][<span class="number">4</span>]=&#123;</span><br><span class="line">&#123;<span class="number">2</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">2</span>,<span class="number">-1</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll h=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(ht[x]+addx[y][<span class="number">0</span>]&gt;height+p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">h=ht[x]+chkx[y][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(~chkx[y][i]&amp;&amp;(ht[x+i]+chkx[y][i]!=h||ht[x+i]+addx[y][i]&gt;height+p))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tree[node].ht=min(tree[node&lt;&lt;<span class="number">1</span>].ht,tree[(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].ht);</span><br><span class="line">tree[node].state=tree[node&lt;&lt;<span class="number">1</span>].state|tree[(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].state;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">(ll l,ll r,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tree[node].l=l,tree[node].r=r;</span><br><span class="line"><span class="keyword">if</span>(l==r)</span><br><span class="line">&#123;</span><br><span class="line">tree[node].ht=ht[l],tree[node].state=state[l];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">create(l,mid,node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">create(mid+<span class="number">1</span>,r,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">update(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">changePoint</span><span class="params">(ll pos,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tree[node].l==tree[node].r)</span><br><span class="line">&#123;</span><br><span class="line">tree[node].ht=ht[pos],tree[node].state=state[pos];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">ll mid=(tree[node].l+tree[node].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(pos&lt;=mid)</span><br><span class="line">&#123;</span><br><span class="line">changePoint(pos,node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">changePoint(pos,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">update(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">queryState</span><span class="params">(ll x,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tree[node].l==tree[node].r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> (tree[node].state&amp;(<span class="number">1</span>&lt;&lt;x))?tree[node].l:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!(tree[node].state&amp;(<span class="number">1</span>&lt;&lt;x)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">ll res=queryState(x,node&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> res?res:queryState(x,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">state[x]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">19</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(check(x,i))</span><br><span class="line">&#123;</span><br><span class="line">state[x]|=(<span class="number">1</span>&lt;&lt;id[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cnt=read(),ccnt=read(),height=read(),ht[cnt+<span class="number">1</span>]=<span class="number">-0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">&#123;</span><br><span class="line">ht[i]=read();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">&#123;</span><br><span class="line">clear(i);</span><br><span class="line">&#125;</span><br><span class="line">create(<span class="number">1</span>,cnt,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=ccnt;i++)</span><br><span class="line">&#123;</span><br><span class="line">x=read(),p=tree[<span class="number">1</span>].ht,t=queryState(x,<span class="number">1</span>),tt=<span class="number">0</span>,<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,t<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(check(t,rot[x][j]))</span><br><span class="line">&#123;</span><br><span class="line">tt=rot[x][j];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(t+j&gt;cnt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">ht[t+j]+=addx[tt][j],changePoint(t+j,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(tree[<span class="number">1</span>].ht==p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=t<span class="number">-3</span>;j&lt;=t+<span class="number">3</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j&gt;<span class="number">0</span>&amp;&amp;j&lt;=cnt)</span><br><span class="line">&#123;</span><br><span class="line">clear(j),changePoint(j,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">p=tree[<span class="number">1</span>].ht;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt;j++)</span><br><span class="line">&#123;</span><br><span class="line">clear(j),ht[j]-=p;</span><br><span class="line">&#125;</span><br><span class="line">create(<span class="number">1</span>,cnt,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JSOI2010-挖宝藏"><a href="#JSOI2010-挖宝藏" class="headerlink" title="[JSOI2010] 挖宝藏"></a>[JSOI2010] 挖宝藏</h2><h3 id="链接-3"><a href="#链接-3" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=5023" target="_blank" rel="noopener">BZOJ 5023</a></p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h3><p>注意到挖到一个宝藏后挖的坑是个倒着的三角形，于是我们就可以把宝藏看作是一段区间，然后通过区间长度计算代价。</p><p>考虑 $\texttt{dp}$。将宝藏按右端点排序，设 $dp_i$ 表示挖 $1\sim i$ 号宝藏，且钦定必须挖 $i$ 的答案。</p><p>枚举一下之前的宝藏 $j$，分成 $3$ 种情况</p><ul><li><p>$j$ 被包含在 $i$ 内：挖 $i$ 的同时可以把 $j$ 挖出来，提前预处理即可。</p></li><li><p>$j$ 与 $i$ 无交：$dp_j+val_i-cost_i\rightarrow dp_i$</p></li><li><p>$j$ 与 $i$ 有交：要容斥掉交的区间的代价，但是有可能有些宝藏被包含在这个区间内。因为右端点递增，拿个指针扫一下，没了。</p></li></ul><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">1e3</span>+<span class="number">51</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">ll l,r,cost,p,q;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> Node &amp;rhs)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;r==rhs.r?<span class="keyword">this</span>-&gt;l&lt;rhs.l:<span class="keyword">this</span>-&gt;r&lt;rhs.r;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">Node nd[MAXN];</span><br><span class="line">ll cnt,x,y,tp,r,res;</span><br><span class="line">ll dp[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">calc</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (x+<span class="number">2</span>-(x&amp;<span class="number">1</span>))*(x+(x&amp;<span class="number">1</span>))&gt;&gt;<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cnt=read();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">&#123;</span><br><span class="line">x=read(),y=read(),nd[i].l=x+y+<span class="number">1</span>,nd[i].r=x-y<span class="number">-1</span>;</span><br><span class="line">nd[i].p=read(),nd[i].cost=calc(nd[i].r-nd[i].l+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(nd[j].l&gt;=nd[i].l&amp;&amp;nd[j].r&lt;=nd[i].r)</span><br><span class="line">&#123;</span><br><span class="line">nd[i].q+=nd[j].p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sort(nd+<span class="number">1</span>,nd+cnt+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">&#123;</span><br><span class="line">tp=<span class="number">1</span>,r=<span class="number">0</span>,dp[i]=nd[i].q-nd[i].cost;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;i;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(nd[j].r&lt;nd[i].l)</span><br><span class="line">&#123;</span><br><span class="line">dp[i]=max(dp[i],dp[j]+nd[i].q-nd[i].cost);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(nd[j].l&lt;nd[i].l)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(tp&lt;=i&amp;&amp;nd[tp].r&lt;=nd[j].r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(nd[tp].l&gt;=nd[i].l)</span><br><span class="line">&#123;</span><br><span class="line">r+=nd[tp].p;</span><br><span class="line">&#125;</span><br><span class="line">tp++;</span><br><span class="line">&#125;</span><br><span class="line">dp[i]=max(dp[i],dp[j]+nd[i].q-nd[i].cost+calc(nd[j].r-nd[i].l+<span class="number">1</span>)-r);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">&#123;</span><br><span class="line">res=max(res,dp[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,res); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JSOI2010-游戏"><a href="#JSOI2010-游戏" class="headerlink" title="[JSOI2010] 游戏"></a>[JSOI2010] 游戏</h2><h3 id="链接-4"><a href="#链接-4" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=5024" target="_blank" rel="noopener">BZOJ 5024</a></p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h3><p>什么神仙题啊。</p><p>考虑对链进行染色，如果链 $(x,y)$ 是良的就染成白色，否则就是黑色。</p><p>那么接下来就是完全图求同色三角形个数。</p><p>找一下角的个数 $x$，那么答案就是 $\binom{n}{3}-x$。</p><p>考虑快速判断某条链是否是良的，想到在模 $8$ 的意义下计算，于是就有</p><script type="math/tex; mode=display">P=s_1+5s_2+s_3+5s_4+\cdots</script><p>由于 $1=(001)_2,5=(101)_2$，所以考虑倒数第三位是否为 $0$。</p><p>而这一位可以由两个地方贡献过来：所有数和的倒数第三位和第偶数个数和的最后一位。</p><p>然而第一个已知，只要考虑第二个。</p><p>对数列讨论一下：</p><ul><li><p>情况 $0$，所有数的二进制最后一位都为 $0$。</p><p>这时没有第二类贡献，直接算第一类即可。</p></li><li><p>情况 $1$，所有数的二进制最后一位都为 $1$。</p><p>这时第二类贡献为所有数最后一位贡献之和除以 $2$。</p></li><li><p>情况 $2$，剩下的所有情况。</p><p>使用类似于括号序列的方法即可。</p></li></ul><p>然后树形 $\texttt{dp}$。设 $dp_{x,i,j,k}$ 表示当前在 $x$，路径上的和 $\bmod 8$ 为 $i$，最低位的和 $\bmod 4$ 为 $j$，情况为 $k$ 的子树中相应的点的个数。</p><p>换根 $\texttt{dp}$ 一下就好了。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> li;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">1e5</span>+<span class="number">51</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">ll to,prev;</span><br><span class="line">&#125;;</span><br><span class="line">Edge ed[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line">ll nc,rt,tot,p;</span><br><span class="line">li res;</span><br><span class="line">ll last[MAXN],num[MAXN],dp[MAXN][<span class="number">8</span>][<span class="number">4</span>][<span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(ll from,ll to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ed[++tot].prev=last[from];</span><br><span class="line">ed[tot].to=to;</span><br><span class="line">last[from]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(ll x,ll op)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dp[x][num[x]&amp;<span class="number">7</span>][num[x]&amp;<span class="number">1</span>][num[x]&amp;<span class="number">1</span>]+=op;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">calc</span><span class="params">(ll x,ll y,ll op)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll p,q,r;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line">p=(i+num[y])&amp;<span class="number">7</span>,q=num[y]&amp;<span class="number">1</span>,r=(j+q)&amp;<span class="number">3</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">3</span>;k++)</span><br><span class="line">&#123;</span><br><span class="line">dp[y][p][r][q^k?<span class="number">2</span>:q]+=dp[x][i][j][k]*op;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">calc2</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">li r=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">r+=dp[x][<span class="number">3</span>][i][<span class="number">0</span>]+dp[x][<span class="number">3</span>][i][<span class="number">2</span>]+dp[x][<span class="number">7</span>][i][<span class="number">2</span>];</span><br><span class="line">r+=dp[x][i&amp;<span class="number">2</span>?<span class="number">7</span>:<span class="number">3</span>][i][<span class="number">1</span>]; </span><br><span class="line">&#125;</span><br><span class="line">res+=(li)r*(nc<span class="number">-1</span>-r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=last[node];i;i=ed[i].prev)</span><br><span class="line">&#123;</span><br><span class="line">dfs(ed[i].to),calc(ed[i].to,node,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">add(node,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ddfs</span><span class="params">(ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">add(node,<span class="number">-1</span>),calc2(node),add(node,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=last[node];i;i=ed[i].prev)</span><br><span class="line">&#123;</span><br><span class="line">calc(ed[i].to,node,<span class="number">-1</span>),calc(node,ed[i].to,<span class="number">1</span>),ddfs(ed[i].to);</span><br><span class="line">calc(node,ed[i].to,<span class="number">-1</span>),calc(ed[i].to,node,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">nc=read();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=nc;i++)</span><br><span class="line">&#123;</span><br><span class="line">p=read(),num[i]=read()&amp;<span class="number">7</span>,p?addEdge(p,i):(<span class="keyword">void</span>)(rt=i);</span><br><span class="line">&#125;</span><br><span class="line">dfs(rt),ddfs(rt),<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,(li)nc*(nc<span class="number">-1</span>)*(nc<span class="number">-2</span>)/<span class="number">6</span>-(res&gt;&gt;<span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JSOI2010-排名"><a href="#JSOI2010-排名" class="headerlink" title="[JSOI2010] 排名"></a>[JSOI2010] 排名</h2><h3 id="链接-5"><a href="#链接-5" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=5026" target="_blank" rel="noopener">BZOJ 5026</a></p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a>题解</h3><p>套路贪心题。</p><p>第一问建反图然后拓扑排序即可。</p><p>第二问直接从 $0$ 号同学（假想的虚拟人物，成绩最高）开始贪心即可。</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">2e5</span>+<span class="number">51</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">ll to,prev;</span><br><span class="line">&#125;;</span><br><span class="line">Edge ed[MAXN];</span><br><span class="line">priority_queue&lt;ll&gt;q; </span><br><span class="line">ll cnt,x,tot,cur;</span><br><span class="line">ll last[MAXN],deg[MAXN],res[MAXN],p[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(ll from,ll to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ed[++tot].prev=last[from];</span><br><span class="line">ed[tot].to=to;</span><br><span class="line">last[from]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cnt=read(),cur=cnt;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">&#123;</span><br><span class="line">p[i]=x=read(),x=(x?x:cnt+<span class="number">1</span>),addEdge(x,i),deg[x]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!deg[i])</span><br><span class="line">&#123;</span><br><span class="line">q.push(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">res[x=q.top()]=cur--,q.pop();</span><br><span class="line"><span class="keyword">if</span>(!(--deg[p[x]]))</span><br><span class="line">&#123;</span><br><span class="line">q.push(p[x]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,res[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">""</span>),q.push(cnt+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">res[x=q.top()]=cur++,q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=last[x];i;i=ed[i].prev)</span><br><span class="line">&#123;</span><br><span class="line">q.push(ed[i].to);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,res[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JSOI2011-Apple-的美食"><a href="#JSOI2011-Apple-的美食" class="headerlink" title="[JSOI2011] Apple 的美食"></a>[JSOI2011] Apple 的美食</h2><h3 id="链接-6"><a href="#链接-6" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.com.cn/problem/P6032" target="_blank" rel="noopener">Luogu P6032</a></p><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=4708" target="_blank" rel="noopener">BZOJ 4708</a></p><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a>题解</h3><p>玄学题。</p><p>考虑先推柿子。</p><script type="math/tex; mode=display">f=\frac{\frac{2TP^2}{(TP+FN)(TP+FP)}}{\frac{TP(TP+FN+TP+FP)}{(TP+FN)(TP+FP)}}=\frac{2TP}{TP+FN+TP+FP}</script><p>然后有一个结论：两个断点肯定只会在前 $100$ 和后 $100$ 个，暴力枚举即可。注意到 $n\leq 10^6$，不能暴力求，但是模数比 $20$ 小，所以可以求循环节。由于循环节可能达到 $n-1$，所以要 $\texttt{kmp}$ 求。</p><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">2e5</span>+<span class="number">51</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">ll to,prev;</span><br><span class="line">&#125;;</span><br><span class="line">Edge ed[MAXN];</span><br><span class="line">priority_queue&lt;ll&gt;q; </span><br><span class="line">ll cnt,x,tot,cur;</span><br><span class="line">ll last[MAXN],deg[MAXN],res[MAXN],p[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(ll from,ll to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ed[++tot].prev=last[from];</span><br><span class="line">ed[tot].to=to;</span><br><span class="line">last[from]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cnt=read(),cur=cnt;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">&#123;</span><br><span class="line">p[i]=x=read(),x=(x?x:cnt+<span class="number">1</span>),addEdge(x,i),deg[x]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!deg[i])</span><br><span class="line">&#123;</span><br><span class="line">q.push(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">res[x=q.top()]=cur--,q.pop();</span><br><span class="line"><span class="keyword">if</span>(!(--deg[p[x]]))</span><br><span class="line">&#123;</span><br><span class="line">q.push(p[x]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,res[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">""</span>),q.push(cnt+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">res[x=q.top()]=cur++,q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=last[x];i;i=ed[i].prev)</span><br><span class="line">&#123;</span><br><span class="line">q.push(ed[i].to);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,res[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JSOI2011-柠檬"><a href="#JSOI2011-柠檬" class="headerlink" title="[JSOI2011] 柠檬"></a>[JSOI2011] 柠檬</h2><h3 id="链接-7"><a href="#链接-7" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.com.cn/problem/P5504" target="_blank" rel="noopener">Luogu P5504</a></p><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=4709" target="_blank" rel="noopener">BZOJ 4709</a></p><h3 id="题解-7"><a href="#题解-7" class="headerlink" title="题解"></a>题解</h3><p>斜率优化 $\texttt{dp}$ 入门题。</p><p>首先有个显然的性质：每一段的两端的数相同。</p><p>如果不同的话，那些不同的数也不会给这一段有贡献，反而把它们分到另外的段去期望对其他段产生贡献，才能使贡献最大化。</p><p>于是可以设 $dp_i$ 表示前面 $i$ 个数产生的最大贡献，$c_i$ 表示这个数是第几次出现，则有</p><script type="math/tex; mode=display">dp_i=\max\{dp_{j-1}+a_i\times(c_i-c_j+1)^2\}(i>j,a_i=a_j)</script><p>可这是 $O(n^2)$ 的，跑不过,考虑斜率优化。</p><p>观察一下原来的式子，把与 $j$ 有关的放到 $y,x$ 项，与 $j$ 无关的放到 $k,b$ 项，则有</p><script type="math/tex; mode=display">dp_i=dp_{j-1}+a_i\times(c_i^2+(c_j-1)^2-2c_i(c_j-1))</script><p>移项之后，有</p><script type="math/tex; mode=display">dp_{j-1}+a_i(c_j-1)^2=2a_ic_i(c_j-1)+dp_i-a_ic_i^2</script><p>于是，有</p><script type="math/tex; mode=display">\begin{cases}y=dp_{j-1}+a_i(c_j-1)^2\\k=2c_i\\x=a_i(c_j-1)\\b=dp_i-a_ic_i^2\end{cases}</script><p>于是考虑用一个单调栈维护 $k$ 就行。</p><h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> li;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">1e5</span>+<span class="number">51</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;ll&gt;q[MAXN&gt;&gt;<span class="number">3</span>];</span><br><span class="line">ll cnt,cur,top,tmp;</span><br><span class="line">li num[MAXN],occ[MAXN],st[MAXN],x[MAXN],y[MAXN],dp[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">slope</span><span class="params">(ll xx,ll yy)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">double</span>)(y[yy]-y[xx])/(<span class="keyword">double</span>)(x[yy]-x[xx]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cnt=read();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">&#123;</span><br><span class="line">num[i]=read(),st[i]=++occ[num[i]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">&#123;</span><br><span class="line">cur=num[i],top=q[cur].size()<span class="number">-1</span>;</span><br><span class="line">x[i]=(st[i]<span class="number">-1</span>)*cur,y[i]=x[i]*(st[i]<span class="number">-1</span>)+dp[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">while</span>(top&gt;<span class="number">0</span>&amp;&amp;slope(q[cur][top<span class="number">-1</span>],q[cur][top])&lt;slope(q[cur][top],i))</span><br><span class="line">&#123;</span><br><span class="line">q[cur].pop_back(),top--;</span><br><span class="line">&#125;</span><br><span class="line">q[cur].push_back(i),top++;</span><br><span class="line"><span class="keyword">while</span>(top&gt;<span class="number">0</span>&amp;&amp;slope(q[cur][top<span class="number">-1</span>],q[cur][top])&lt;<span class="number">2</span>*st[i])</span><br><span class="line">&#123;</span><br><span class="line">q[cur].pop_back(),top--;</span><br><span class="line">&#125;</span><br><span class="line">tmp=q[cur][top];</span><br><span class="line">dp[i]=dp[tmp<span class="number">-1</span>]+cur*(st[i]-st[tmp]+<span class="number">1</span>)*(st[i]-st[tmp]+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld"</span>,dp[cnt]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JSOI2011-分特产"><a href="#JSOI2011-分特产" class="headerlink" title="[JSOI2011] 分特产"></a>[JSOI2011] 分特产</h2><h3 id="链接-8"><a href="#链接-8" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.com.cn/problem/P5505" target="_blank" rel="noopener">Luogu P5505</a></p><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=4710" target="_blank" rel="noopener">BZOJ 4710</a></p><h3 id="题解-8"><a href="#题解-8" class="headerlink" title="题解"></a>题解</h3><p>先考虑没有每个人至少一个的限制，那么答案就是可重组合，也就是</p><script type="math/tex; mode=display">f(n)=\prod\limits_{i=1}^{m}\binom{a_i+n-1}{n-1}</script><p>然后既然有了这个限制不太好处理的话。那么容斥做肯定可以。</p><p>考虑至少有 $t$ 个同学没有的情况，那么钦定前 $t$ 个同学没有特产，后面的有不有都无所谓，因为这里求的是至少 $t$ 个同学没有，所以答案为 $f(n-t)$<br>。</p><p>于是可以容斥出答案，就是这个：</p><script type="math/tex; mode=display">\sum\limits_{i=0}^n(-1)^if(n-i)</script><h3 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> li;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">5e3</span>+<span class="number">51</span>,MOD=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">ll cnt,ccnt,maxn,res,coeff;</span><br><span class="line">ll fact[MAXN],finv[MAXN],num[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">qpow</span><span class="params">(ll base,ll exponent)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(exponent)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(exponent&amp;<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">res=(li)res*base%MOD; </span><br><span class="line">&#125;</span><br><span class="line">base=(li)base*base%MOD,exponent&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">(ll cnt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">fact[<span class="number">0</span>]=fact[<span class="number">1</span>]=finv[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=cnt;i++)</span><br><span class="line">&#123;</span><br><span class="line">fact[i]=(li)fact[i<span class="number">-1</span>]*i%MOD;</span><br><span class="line">&#125;</span><br><span class="line">finv[cnt]=qpow(fact[cnt],MOD<span class="number">-2</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=cnt<span class="number">-1</span>;i;i--)</span><br><span class="line">&#123;</span><br><span class="line">finv[i]=(li)finv[i+<span class="number">1</span>]*(i+<span class="number">1</span>)%MOD;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">comb</span><span class="params">(ll m,ll n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (li)fact[m]*finv[n]%MOD*finv[m-n]%MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cnt=read(),ccnt=read();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ccnt;i++)</span><br><span class="line">&#123;</span><br><span class="line">num[i]=read(),maxn=max(maxn,num[i]); </span><br><span class="line">&#125;</span><br><span class="line">setup(cnt+maxn);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=cnt;i++)</span><br><span class="line">&#123;</span><br><span class="line">coeff=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;ccnt;j++)</span><br><span class="line">&#123;</span><br><span class="line">coeff=(li)coeff*comb(num[j]+cnt-i<span class="number">-1</span>,cnt-i<span class="number">-1</span>)%MOD;</span><br><span class="line">&#125;</span><br><span class="line">coeff=(li)coeff*comb(cnt,i)%MOD;</span><br><span class="line">res=(res+((i&amp;<span class="number">1</span>)?MOD-coeff:coeff))%MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JSOI2011-棒棒糖"><a href="#JSOI2011-棒棒糖" class="headerlink" title="[JSOI2011] 棒棒糖"></a>[JSOI2011] 棒棒糖</h2><h3 id="链接-9"><a href="#链接-9" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=5178" target="_blank" rel="noopener">BZOJ 5178</a></p><h3 id="题解-9"><a href="#题解-9" class="headerlink" title="题解"></a>题解</h3><p>莫队。</p><p>考虑直接用莫队维护一下当前区间内颜色的集合。然后每一次询问考虑最多的颜色是否超过区间的一般就好了。</p><h3 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">1e5</span>+<span class="number">51</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tuple</span>&#123;</span></span><br><span class="line">ll x,y;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> Tuple &amp;rhs)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;x==rhs.x?<span class="keyword">this</span>-&gt;y&lt;rhs.y:<span class="keyword">this</span>-&gt;x&lt;rhs.x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span>&#123;</span></span><br><span class="line">ll l,r,ord;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> Query &amp;rhs)<span class="keyword">const</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">set</span>&lt;Tuple&gt;st;</span><br><span class="line"><span class="built_in">set</span>&lt;Tuple&gt;::iterator it;</span><br><span class="line">Query qry[MAXN];</span><br><span class="line">ll cnt,ccnt,blockSize,l,r,ptrl,ptrr;</span><br><span class="line">ll num[MAXN],res[MAXN],cntl[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> Query::<span class="keyword">operator</span> &lt;(<span class="keyword">const</span> Query &amp;rhs)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> (r/blockSize)==(rhs.r/blockSize)?l&lt;rhs.l:r&lt;rhs.r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(ll cur)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">set</span>&lt;Tuple&gt;::iterator it=st.find((Tuple)&#123;cntl[num[cur]],num[cur]&#125;);</span><br><span class="line"><span class="keyword">if</span>(it!=st.end())</span><br><span class="line">&#123;</span><br><span class="line">st.erase(it);</span><br><span class="line">&#125;</span><br><span class="line">st.insert((Tuple)&#123;++cntl[num[cur]],num[cur]&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(ll cur)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">set</span>&lt;Tuple&gt;::iterator it=st.find((Tuple)&#123;cntl[num[cur]],num[cur]&#125;);</span><br><span class="line"><span class="keyword">if</span>(it!=st.end())</span><br><span class="line">&#123;</span><br><span class="line">st.erase(it);</span><br><span class="line">&#125;</span><br><span class="line">st.insert((Tuple)&#123;--cntl[num[cur]],num[cur]&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">blockSize=<span class="built_in">sqrt</span>(cnt=read()),ccnt=read();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">&#123;</span><br><span class="line">num[i]=read();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ccnt;i++)</span><br><span class="line">&#123;</span><br><span class="line">l=read(),r=read(),qry[i]=(Query)&#123;l,r,i&#125;;</span><br><span class="line">&#125;</span><br><span class="line">sort(qry,qry+ccnt);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ccnt;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(ptrl&lt;qry[i].l)</span><br><span class="line">&#123;</span><br><span class="line">del(ptrl++);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(ptrl&gt;qry[i].l)</span><br><span class="line">&#123;</span><br><span class="line">add(--ptrl);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(ptrr&lt;qry[i].r)</span><br><span class="line">&#123;</span><br><span class="line">add(++ptrr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(ptrr&gt;qry[i].r)</span><br><span class="line">&#123;</span><br><span class="line">del(ptrr--);</span><br><span class="line">&#125;</span><br><span class="line">res[qry[i].ord]=st.rbegin()-&gt;x&gt;(qry[i].r-qry[i].l+<span class="number">1</span>)/<span class="number">2</span>?st.rbegin()-&gt;y:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ccnt;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,res[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JSOI2011-任务调度"><a href="#JSOI2011-任务调度" class="headerlink" title="[JSOI2011] 任务调度"></a>[JSOI2011] 任务调度</h2><h3 id="链接-10"><a href="#链接-10" class="headerlink" title="链接"></a>链接</h3><h3 id="题解-10"><a href="#题解-10" class="headerlink" title="题解"></a>题解</h3><p>左偏树模板题。</p><p>权值最小任务不唯一也就是说根与某个儿子的权值相等，利用这个性质即可。</p><p>剩下的操作都是基本操作，直接左偏树维护。</p><h3 id="代码-10"><a href="#代码-10" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">3e5</span>+<span class="number">51</span>;</span><br><span class="line">ll cnt,x,y,z,flg;</span><br><span class="line"><span class="keyword">char</span> op[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">namespace</span> LeftistTree&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">ll val;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> Node &amp;rhs)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;val&lt;rhs.val;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">Node nd[MAXN];</span><br><span class="line">ll rt[<span class="number">551</span>],fa[MAXN],ls[MAXN],rs[MAXN],dist[MAXN],del[MAXN];</span><br><span class="line"><span class="function">ll <span class="title">merge</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!x||!y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(nd[y]&lt;nd[x])</span><br><span class="line">&#123;</span><br><span class="line">swap(x,y);</span><br><span class="line">&#125;</span><br><span class="line">rs[x]=merge(rs[x],y),fa[rs[x]]=x;</span><br><span class="line"><span class="keyword">if</span>(dist[ls[x]]&lt;dist[rs[x]])</span><br><span class="line">&#123;</span><br><span class="line">swap(ls[x],rs[x]);</span><br><span class="line">&#125;</span><br><span class="line">dist[x]=dist[rs[x]]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">add</span><span class="params">(ll x,ll y,ll z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll f=fa[x],p=merge(ls[x],rs[x]);</span><br><span class="line"><span class="keyword">if</span>(rt[y]==x)</span><br><span class="line">&#123;</span><br><span class="line">rt[y]=p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ls[f]==x)</span><br><span class="line">&#123;</span><br><span class="line">ls[f]=p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(rs[f]==x)</span><br><span class="line">&#123;</span><br><span class="line">rs[f]=p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fa[p]=f,ls[x]=rs[x]=fa[x]=dist[x]=<span class="number">0</span>,nd[x].val+=z,rt[y]=merge(rt[y],x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> LeftistTree;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">read(),read(),cnt=read(),dist[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,op);</span><br><span class="line"><span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">'A'</span>)</span><br><span class="line">&#123;</span><br><span class="line">x=read(),y=read(),z=read(),nd[y].val=z,rt[x]=merge(rt[x],y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">'D'</span>)</span><br><span class="line">&#123;</span><br><span class="line">x=read(),y=read(),z=read();</span><br><span class="line">add(y,x,-z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">'T'</span>)</span><br><span class="line">&#123;</span><br><span class="line">x=read(),y=read(),rt[y]=merge(rt[y],rt[x]),rt[x]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">'M'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,nd[rt[read()]].val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">'W'</span>)</span><br><span class="line">&#123;</span><br><span class="line">x=read(),y=read(),flg=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(ls[rt[x]]&amp;&amp;nd[ls[rt[x]]].val==nd[rt[x]].val)</span><br><span class="line">&#123;</span><br><span class="line">flg=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(rs[rt[x]]&amp;&amp;nd[rs[rt[x]]].val==nd[rt[x]].val)</span><br><span class="line">&#123;</span><br><span class="line">flg=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flg)</span><br><span class="line">&#123;</span><br><span class="line">add(rt[x],x,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"ERROR"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JSOI </tag>
            
            <tag> 各省省选 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「CodeForces 553E」Kyoya and Train</title>
      <link href="/2019/12/11/%E3%80%8CCodeForces-553E%E3%80%8DKyoya-and-Train/"/>
      <url>/2019/12/11/%E3%80%8CCodeForces-553E%E3%80%8DKyoya-and-Train/</url>
      
        <content type="html"><![CDATA[<p>为了表述方便，以下所述$p_{i,k}$均为原题中的$\frac{p_{i,k}}{100000}$</p><p>给定一个$n$个点$m$条边有向图，第$i$条边有边权$c_i$，可能的花费时间为$[1,t]$，且花费$k$时间的概率是$p_{i,k}$。</p><p>一个人从$1$到$n$，如果到达时间超过$T$，则需要额外缴纳$X$的花费，求期望最小花费。</p><p>$\texttt{Data Range:}2\leq n\leq 50,1\leq m\leq 100,1\leq t\leq 2\times 10^4,0\leq x,c_i\leq 10^6$</p><a id="more"></a><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.com.cn/problem/CF553E" target="_blank" rel="noopener">Luogu</a></p><p><a href="https://vjudge.net/problem/CodeForces-553E" target="_blank" rel="noopener">vjudge</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p><img src="https://s2.ax1x.com/2019/12/02/QnUEgx.jpg" alt=""></p><p>在你谷 AC 的第$1111$道题目，并且在凌晨之前做完了，写篇题解纪念一下呢qwq。</p><p>神仙们都是从上往下做的，只有我一个菜鸡从下往上，而且$\texttt{CF1184A3}$还被题意杀了。</p><p>第一次做$\texttt{3300}$的题目呢，而且还是$\texttt{myy}$的论文题，还是比较难的。</p><p><del>还是祝我能上<font color="blue">$\texttt{Expert}$</font>吧qwq</del></p><p>一道分治$\texttt{FFT}$好题。（<del>但是这还是无法掩盖自己第一次写分治$\texttt{FFT}$的现实</del>）</p><p>众所周知我们可以先$\texttt{dp}$，设$dp_{i,j}$表示到达$i$的时间为$j$的最小花费，$P_{e,t}$为走边$e$花费时间$t$的概率。对于某一个点$x$，枚举它的出边$e_i=(x,y_i)$，于是我们可以写出转移为</p><script type="math/tex; mode=display">dp_{x,t}=\min\{c_i+\sum_{j=1}^{T}P_{e_i,j}dp_{y_i,t+j}\}</script><p>为什么这个转移成立呢？我们考虑把图看成一个以时间为层数的分层图，题目保证了一个点再也不能回到它的祖先（除非经过时间为负数），所以这张分成图是个$\texttt{DAG}$，就可以做了。</p><p>然后你会发现状态$O(mT)$，转移$O(T)$，嘿嘿，结果可想而知。</p><p>我们来设一个$g_{e,t}=c_e+\sum_{j=1}^{T}P_{e,j}dp_{y_e,t+j}$，再来设一个$f_{e,T+t}=g_{e,T}$，于是我们有</p><script type="math/tex; mode=display">f_{e,T+t}=c_e+\sum_{j=1}^{T}P_{e,j}dp_{y_e,t+j}</script><p>考虑翻转$P$，假设得到$Q$，则</p><script type="math/tex; mode=display">f_{e,T+t}=c_e+\sum_{j=1}^{T}Q_{e,T-j}dp_{y_e,t+j}</script><p>噫，成了！出现卷积形式，但是这样过不了，因为右边与时间有关，怎么办呢？</p><p>于是我们可以对时间分治。</p><p><del>这里给一个恒等式</del></p><script type="math/tex; mode=display">\sum\limits_{i=0}^{n}f_ig_{n-i}=\sum\limits_{i=0}^{p}f_ig_{n-i}+\sum\limits_{i=p+1}^{n}f_ig_{n-i}</script><p>说白了，就是拆开，然后我们就可以高高兴兴上分治$\texttt{FFT}$了。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"Ofast"</span>)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">2e5</span>+<span class="number">51</span>;</span><br><span class="line"><span class="keyword">const</span> db PI=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Complex</span>&#123;</span></span><br><span class="line">db re,im;</span><br><span class="line">Complex(db x=<span class="number">0</span>,db y=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;re=x,<span class="keyword">this</span>-&gt;im=y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">ll from,to,dist;</span><br><span class="line">&#125;;</span><br><span class="line">Complex f[MAXN],g[MAXN];</span><br><span class="line">Edge ed[MAXN];</span><br><span class="line">ll nc,ec,t,x;</span><br><span class="line">ll rev[MAXN];</span><br><span class="line">db p[<span class="number">110</span>][MAXN],dis[<span class="number">111</span>][<span class="number">111</span>],dp[<span class="number">111</span>][<span class="number">40051</span>],dp2[<span class="number">111</span>][<span class="number">40051</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">inline</span> Complex <span class="keyword">operator</span> +(Complex x,Complex y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> Complex(x.re+y.re,x.im+y.im);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Complex <span class="keyword">operator</span> -(Complex x,Complex y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> Complex(x.re-y.re,x.im-y.im);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Complex <span class="keyword">operator</span> *(Complex x,Complex y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> Complex(x.re*y.re-x.im*y.im,x.re*y.im+x.im*y.re);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Complex <span class="keyword">operator</span> /(Complex x,db y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> Complex(x.re/y,x.im/y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">FFT</span><span class="params">(Complex *cp,ll cnt,ll inv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll cur=<span class="number">0</span>;</span><br><span class="line">Complex res,omg;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;rev[i])</span><br><span class="line">&#123;</span><br><span class="line">swap(cp[i],cp[rev[i]]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=cnt;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">cur=i&gt;&gt;<span class="number">1</span>,res=Complex(<span class="built_in">cos</span>(<span class="number">2</span>*PI/i),inv*<span class="built_in">sin</span>(<span class="number">2</span>*PI/i));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> Complex *p=cp;p!=cp+cnt;p+=i)</span><br><span class="line">&#123;</span><br><span class="line">omg=Complex(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cur;j++)</span><br><span class="line">&#123;</span><br><span class="line">Complex t=omg*p[j+cur],t2=p[j];</span><br><span class="line">p[j+cur]=t2-t,p[j]=t+t2;</span><br><span class="line">omg=omg*res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(inv==<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">&#123;</span><br><span class="line">cp[i]=cp[i]/cnt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">calc</span><span class="params">(ll l,ll r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll mid=(l+r)&gt;&gt;<span class="number">1</span>,cnt,limit;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=ec;j++)</span><br><span class="line">&#123;</span><br><span class="line">cnt=<span class="number">1</span>,limit=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(cnt&lt;=((r&lt;&lt;<span class="number">1</span>)-l-mid<span class="number">-1</span>))</span><br><span class="line">&#123;</span><br><span class="line">cnt&lt;&lt;=<span class="number">1</span>,limit++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">&#123;</span><br><span class="line">rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;limit);</span><br><span class="line">f[i]=g[i]=Complex(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=mid+<span class="number">1</span>;i&lt;=r;i++)</span><br><span class="line">&#123;</span><br><span class="line">f[i-mid<span class="number">-1</span>].re+=dp[ed[j].to][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=r-l;i++)</span><br><span class="line">&#123;</span><br><span class="line">g[r-l-i].re+=p[j][i];</span><br><span class="line">&#125;</span><br><span class="line">FFT(f,cnt,<span class="number">1</span>),FFT(g,cnt,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">&#123;</span><br><span class="line">f[i]=f[i]*g[i];</span><br><span class="line">&#125;</span><br><span class="line">FFT(f,cnt,<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=l;i&lt;=mid;i++)</span><br><span class="line">&#123;</span><br><span class="line">dp2[j][i]+=f[i-mid<span class="number">-1</span>+r-l].re;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cdqFFT</span><span class="params">(ll l,ll r)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">if</span>(l==r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=ec;i++)</span><br><span class="line">&#123;</span><br><span class="line">dp[ed[i].from][l]=min(dp[ed[i].from][l],dp2[i][l]+ed[i].dist);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">cdqFFT(mid+<span class="number">1</span>,r),calc(l,r),cdqFFT(l,mid);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">nc=read(),ec=read(),t=read(),x=read();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=nc;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=nc;j++)</span><br><span class="line">&#123;</span><br><span class="line">dis[i][j]=i^j?<span class="number">1061109567.0</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=ec;i++)</span><br><span class="line">&#123;</span><br><span class="line">ed[i].from=read(),ed[i].to=read(),ed[i].dist=read();</span><br><span class="line">dis[ed[i].from][ed[i].to]=min(dis[ed[i].from][ed[i].to],<span class="number">1.0</span>*ed[i].dist);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=t;j++)</span><br><span class="line">&#123;</span><br><span class="line">p[i][j]=read()/<span class="number">100000.0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=nc;k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=nc;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=nc;j++)</span><br><span class="line">&#123;</span><br><span class="line">dis[i][j]=min(dis[i][j],dis[i][k]+dis[k][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=(t&lt;&lt;<span class="number">1</span>);i++)</span><br><span class="line">&#123;</span><br><span class="line">dp[nc][i]=i&lt;=t?<span class="number">0</span>:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;nc;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=(t&lt;&lt;<span class="number">1</span>);j++)</span><br><span class="line">&#123;</span><br><span class="line">dp[i][j]=(j&lt;=t)?<span class="number">0x3f3f3f3f</span>:dis[i][nc]+x; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">calc(<span class="number">1</span>,t&lt;&lt;<span class="number">1</span>),cdqFFT(<span class="number">0</span>,t);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.10lf\n"</span>,dp[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CodeForces </tag>
            
            <tag> 多项式 </tag>
            
            <tag> FFT </tag>
            
            <tag> NTT </tag>
            
            <tag> DP </tag>
            
            <tag> 分治 FFT </tag>
            
            <tag> 概率 </tag>
            
            <tag> 期望 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「CodeForces 1054H」Epic Convolution</title>
      <link href="/2019/12/11/%E3%80%8CCodeForces-1054H%E3%80%8DEpic-Convolution/"/>
      <url>/2019/12/11/%E3%80%8CCodeForces-1054H%E3%80%8DEpic-Convolution/</url>
      
        <content type="html"><![CDATA[<p>给两个下标从$0$开始且长度分别为$n,m$的序列$A,B$和一个常数$C$，求：</p><script type="math/tex; mode=display">\sum\limits_{i=0}^{n-1}\sum\limits_{j=0}^{m-1}A_iB_jc^{i^2j^3}</script><p>答案对$490019$取模。</p><p>$\texttt{Data Range:}n,m\leq 10^5,A_i,B_i\leq 10^3,c\leq 490019$</p><a id="more"></a><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.com.cn/problem/CF1054H" target="_blank" rel="noopener">Luogu</a></p><p><a href="https://vjudge.net/problem/CodeForces-1054H" target="_blank" rel="noopener">vjudge</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>从昨天晚上写到今天晚上，现在终于 AC 了，写篇题解纪念一下。</p><p><a href="https://imgchr.com/i/MNz29I" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/11/14/MNz29I.md.png" alt="MNz29I.md.png"></a></p><p>不得不说这是我做过的最有意思<del>并且最难</del>的多项式题，实在配得上出题人给的 <code>Epic</code> 的称号和 CF 给的 $3400$ 的评分。</p><p>考虑到$\texttt{\color{black}y\color{red}wy}$的题解写的有一点点乱，我来写一篇比较好懂的（当然还是要感谢他的啦qwq）</p><p>这个题目与古代猪文那个题有点像，因为$490019$是质数，由欧拉定理，我们只需要求</p><script type="math/tex; mode=display">\sum\limits_{i=0}^{n-1}\sum\limits_{j=0}^{m-1}A_iB_jc^{i^2j^3\bmod 490018}\bmod 490019</script><p>发现这个指数只有$490018$中可能，于是我们可以有一个想法</p><script type="math/tex; mode=display">C_x=\sum\limits_{i=0}^{n-1}\sum\limits_{j=0}^{m-1}A_iB_j[i^2j^3\bmod 490018=x]</script><p>看这个乘法挺讨厌的，显然可以取个离散对数化乘为加，然后发现不晓得以什么为底，考虑换个思路。</p><p>诶，我们发现这个$490018=2\times 491\times 499$是个$\texttt{square-free number}$，好啊。</p><p>很明显我们可以$\texttt{CRT}$合并，因为模数互质，我们就可以不用上拓中了。</p><p>于是我们可以自然地设一个这样的东西</p><script type="math/tex; mode=display">C_{x,y,z}=\sum\limits_{i=0}^{n-1}\sum\limits_{j=0}^{m-1}A_iB_j[i^2j^3\bmod 2=x][i^2j^3\bmod 491=y][i^2j^3\bmod 499=z]</script><p>然后我们发现一个有意思的事情：$491$有$g=2$，$499$有$g=7$，所以我们可以以原根为底啊，这就非常好了。</p><p>但是这个$2$没有原根啊，这怎么办？</p><p>考虑到这一维取值只有$2$种，可以暴力讨论，剩下两个东西可以离散对数搞搞。</p><p>于是我们可以设两个东西：（以下用$\log_{x,y}p$表示$p$在模$x$意义下以$y$为底的离散对数）</p><script type="math/tex; mode=display">f_{x,y,z}=\sum\limits_{i^2\bmod 2=x,\log_{491,2}i^2=y,\log_{499,7}i^2=z}A_i</script><p>和</p><script type="math/tex; mode=display">g_{x,y,z}=\sum\limits_{i^3\bmod 2=x,\log_{491,2}i^3=y,\log_{499,7}i^3=z}B_i</script><p>然后我们就会发现我们的要求的东西就可以写成这个东西：</p><script type="math/tex; mode=display">C_{x,y,z}=\sum\limits_{p\&q=x}\sum\limits_{i=0}^{y}\sum\limits_{j=0}^{z}f_{p,i,j}g_{q,y-i,z-j}</script><p><del>二元多项式卷积了解一下</del></p><p>我们定义两个矩阵$A,B$的卷积$C$为$C_{i,j}=\sum\limits_{i=0}^{n}\sum\limits_{j=0}^{m}A_{i,j}B_{n-i,m-j}$。</p><p>考虑到第一维模数为$2$的特殊性质，我们可以大力讨论<del>简单容斥</del>一下，有</p><script type="math/tex; mode=display">\begin{cases}C_0=(f_0+f_1)(g_0+g_1)-f_1g_1\\C_1=f_1g_1\end{cases}</script><p>接着就是二维$\texttt{FFT}$的表演啦qwq。</p><p>你可以去网上百度这个东西然后发现所谓二维$\texttt{FFT}$其实就是把每一行做一遍$\texttt{FFT}$再每一列也做一遍$\texttt{FFT}$，也可以反过来。</p><p>证明由于篇幅原因所限<del>其实是我不会</del>略去。</p><p>然后发现某一些数可能是$491$或者$499$的倍数导致没有离散对数，这些数可以暴力。</p><p>于是我们就做完了qwq。</p><p>然后还有一个附加环节，就是卡常。</p><p>能少模的就少模，开个$\texttt{long long}$在一次模掉！</p><p>一定记得吸氧！不要用万能头！</p><p>然后你就能从 TLE 13 到 AC 了qwq</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"Ofast"</span>)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> li;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">1e5</span>+<span class="number">51</span>,G499=<span class="number">7</span>,G491=<span class="number">2</span>,MOD=<span class="number">490019</span>;</span><br><span class="line"><span class="keyword">const</span> db PI=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Complex</span>&#123;</span></span><br><span class="line">db re,im;</span><br><span class="line">Complex(db x=<span class="number">0</span>,db y=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;re=x,<span class="keyword">this</span>-&gt;im=y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">Complex f0,f1,g0,g1;</span><br><span class="line">Complex omgs[<span class="number">1025</span>],invo[<span class="number">1025</span>],tmp[<span class="number">1024</span>];</span><br><span class="line">Complex f[<span class="number">2</span>][<span class="number">1024</span>][<span class="number">1024</span>],g[<span class="number">2</span>][<span class="number">1024</span>][<span class="number">1024</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;ll&gt;xx,yy;</span><br><span class="line">ll n,m,c,kk=<span class="number">250</span>,kk2=<span class="number">399</span>,cur,p,q,res,h,xp;</span><br><span class="line">li kd,qq;</span><br><span class="line">ll rev[<span class="number">1024</span>],x[MAXN],y[MAXN];</span><br><span class="line">ll lg499[<span class="number">500</span>],lg491[<span class="number">500</span>],pw499[<span class="number">500</span>],pw491[<span class="number">500</span>];</span><br><span class="line">li fx[<span class="number">2</span>][<span class="number">1024</span>][<span class="number">1024</span>],fy[<span class="number">2</span>][<span class="number">1024</span>][<span class="number">1024</span>];</span><br><span class="line">li pw[<span class="number">490021</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">CRT</span><span class="params">(ll x,ll y,ll z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll r=kk*(y-x);</span><br><span class="line">r=((r%<span class="number">499</span>)+<span class="number">499</span>)%<span class="number">499</span>;</span><br><span class="line">ll p=<span class="number">2</span>*r+x,r2=kk2*(z-p);</span><br><span class="line">r2=((r2%<span class="number">491</span>)+<span class="number">491</span>)%<span class="number">491</span>;</span><br><span class="line"><span class="keyword">return</span> r2*<span class="number">998</span>+p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Complex <span class="keyword">operator</span> +(Complex x,Complex y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> Complex(x.re+y.re,x.im+y.im);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Complex <span class="keyword">operator</span> -(Complex x,Complex y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> Complex(x.re-y.re,x.im-y.im);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Complex <span class="keyword">operator</span> *(Complex x,Complex y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> Complex(x.re*y.re-x.im*y.im,x.re*y.im+x.im*y.re);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Complex <span class="keyword">operator</span> /(Complex x,db y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> Complex(x.re/y,x.im/y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">FFT</span><span class="params">(Complex *cp,ll cnt,ll inv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll cur=<span class="number">0</span>;</span><br><span class="line">Complex res,omg;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;rev[i])</span><br><span class="line">&#123;</span><br><span class="line">swap(cp[i],cp[rev[i]]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=cnt;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">cur=i&gt;&gt;<span class="number">1</span>,res=inv==<span class="number">1</span>?omgs[i]:invo[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> Complex *p=cp;p!=cp+cnt;p+=i)</span><br><span class="line">&#123;</span><br><span class="line">omg=Complex(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cur;j++)</span><br><span class="line">&#123;</span><br><span class="line">Complex t=omg*p[j+cur],t2=p[j];</span><br><span class="line">p[j+cur]=t2-t,p[j]=t+t2;</span><br><span class="line">omg=omg*res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(inv==<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">&#123;</span><br><span class="line">cp[i]=cp[i]/cnt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">FFT2D</span><span class="params">(ll n,ll m,Complex cp[][<span class="number">1024</span>],ll inv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">&#123;</span><br><span class="line">tmp[j]=cp[j][i];</span><br><span class="line">&#125;</span><br><span class="line">FFT(tmp,n,inv);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">&#123;</span><br><span class="line">cp[j][i]=tmp[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">FFT(cp[i],m,inv);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read(),m=read(),c=read(),cur=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">490</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">lg491[cur]=i,pw491[i]=cur,cur=(cur*G491)%<span class="number">491</span>;</span><br><span class="line">&#125;</span><br><span class="line">cur=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">498</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">lg499[cur]=i,pw499[i]=cur,cur=(cur*G499)%<span class="number">499</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1024</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;<span class="number">9</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">x[i]=read();</span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">499</span>&amp;&amp;i%<span class="number">491</span>)</span><br><span class="line">&#123;</span><br><span class="line">fx[i&amp;<span class="number">1</span>][lg499[(li)i*i%<span class="number">499</span>]][lg491[(li)i*i%<span class="number">491</span>]]+=x[i];</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">xx.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">&#123;</span><br><span class="line">y[i]=read();</span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">499</span>&amp;&amp;i%<span class="number">491</span>)</span><br><span class="line">&#123;</span><br><span class="line">fy[i&amp;<span class="number">1</span>][lg499[(li)i*i*i%<span class="number">499</span>]][lg491[(li)i*i*i%<span class="number">491</span>]]+=y[i];</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">yy.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">499</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">491</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line">f[<span class="number">0</span>][i][j].re=fx[<span class="number">0</span>][i][j]%MOD,f[<span class="number">1</span>][i][j].re=fx[<span class="number">1</span>][i][j]%MOD;</span><br><span class="line">g[<span class="number">0</span>][i][j].re=fy[<span class="number">0</span>][i][j]%MOD,g[<span class="number">1</span>][i][j].re=fy[<span class="number">1</span>][i][j]%MOD;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">1024</span>;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">omgs[i]=Complex(<span class="built_in">cos</span>(<span class="number">2</span>*PI/i),<span class="built_in">sin</span>(<span class="number">2</span>*PI/i));</span><br><span class="line">invo[i]=Complex(<span class="built_in">cos</span>(<span class="number">2</span>*PI/i),-<span class="built_in">sin</span>(<span class="number">2</span>*PI/i));</span><br><span class="line">&#125;</span><br><span class="line">FFT2D(<span class="number">1024</span>,<span class="number">1024</span>,f[<span class="number">0</span>],<span class="number">1</span>),FFT2D(<span class="number">1024</span>,<span class="number">1024</span>,f[<span class="number">1</span>],<span class="number">1</span>);</span><br><span class="line">FFT2D(<span class="number">1024</span>,<span class="number">1024</span>,g[<span class="number">0</span>],<span class="number">1</span>),FFT2D(<span class="number">1024</span>,<span class="number">1024</span>,g[<span class="number">1</span>],<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1024</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1024</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line">f0=f[<span class="number">0</span>][i][j],f1=f[<span class="number">1</span>][i][j],g0=g[<span class="number">0</span>][i][j],g1=g[<span class="number">1</span>][i][j];</span><br><span class="line">f[<span class="number">0</span>][i][j]=(f0+f1)*(g0+g1)-f1*g1,f[<span class="number">1</span>][i][j]=f1*g1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">FFT2D(<span class="number">1024</span>,<span class="number">1024</span>,f[<span class="number">0</span>],<span class="number">-1</span>),FFT2D(<span class="number">1024</span>,<span class="number">1024</span>,f[<span class="number">1</span>],<span class="number">-1</span>),pw[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;MOD;i++)</span><br><span class="line">&#123;</span><br><span class="line">pw[i]=(li)pw[i<span class="number">-1</span>]*c%MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1024</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1024</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">2</span>;k++)</span><br><span class="line">&#123;</span><br><span class="line">h=((li)(f[k][i][j].re+<span class="number">0.5</span>))%MOD;</span><br><span class="line">xp=CRT(k,pw499[i%<span class="number">498</span>],pw491[j%<span class="number">490</span>]);</span><br><span class="line">res=(res+h*pw[xp])%MOD;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;xx.size();i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line">&#123;</span><br><span class="line">kd=(li)xx[i]*xx[i]*j%(MOD<span class="number">-1</span>)*j*j%(MOD<span class="number">-1</span>);</span><br><span class="line">qq=x[xx[i]]*y[j]*pw[kd]%MOD;</span><br><span class="line">res=(li)(res+qq)%MOD;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;yy.size();i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!(j%<span class="number">499</span>&amp;&amp;j%<span class="number">491</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">kd=(li)yy[i]*yy[i]*yy[i]%(MOD<span class="number">-1</span>)*j*j%(MOD<span class="number">-1</span>);</span><br><span class="line">res=(res+(li)x[j]*y[yy[i]]*pw[kd])%MOD;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CodeForces </tag>
            
            <tag> 多项式 </tag>
            
            <tag> FFT </tag>
            
            <tag> 2dFFT </tag>
            
            <tag> 数论 </tag>
            
            <tag> 中国剩余定理 </tag>
            
            <tag> 离散对数 </tag>
            
            <tag> 原根 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>多项式合集</title>
      <link href="/2019/12/09/%E5%A4%9A%E9%A1%B9%E5%BC%8F%E5%90%88%E9%9B%86/"/>
      <url>/2019/12/09/%E5%A4%9A%E9%A1%B9%E5%BC%8F%E5%90%88%E9%9B%86/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>「CodeForces 848E」Days of Floral Colours</title>
      <link href="/2019/12/09/%E3%80%8CCodeForces-848E%E3%80%8DDays-of-Floral-Colours/"/>
      <url>/2019/12/09/%E3%80%8CCodeForces-848E%E3%80%8DDays-of-Floral-Colours/</url>
      
        <content type="html"><![CDATA[<p>我的翻译解释的挺详细的啦qwq（主要是这题不好写简要题面，建议对着我的翻译看）</p><p>$\texttt{Data Range:}3\leq n\leq 5\times 10^4$</p><a id="more"></a><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.com.cn/problem/CF848E" target="_blank" rel="noopener">Luogu</a></p><p><a href="https://vjudge.net/problem/CodeForces-848E" target="_blank" rel="noopener">vjudge</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>我 tm 终于上 <font color="blue">$\texttt{Expert}$</font> 啦qwq <del>（每日发牢骚）</del></p><p>非常考验你的生成函数功底呢（我的生成函数功底不好，并且我的画功也不行，一个圆都画不好）。</p><p>详细的讲解一下这个分治 $\texttt{FFT}$ 做法，绝对不是对官方题解的翻译！（图是蒯的）</p><p>由对称性可知，我们可以把一个环拆成两个半环，某一个半环的连线方式可以另一个半环的连线方式唯一确定的。</p><p>然后规定 $f_{0,i}$ 表示某两朵花与它们对面的花连起来，中间夹着 $i$ 朵花的答案，这样的图形我们暂且称作长度为 $i$ 的<strong>段</strong>。长度为 $7$ 的段长这样：</p><p><img src="/2019/12/09/「CodeForces-848E」Days-of-Floral-Colours/1.png" alt=""></p><p>当然，后面还可能会出现连续段这个名词，意思与翻译一样。</p><p>对于长度为 $i$ 的段，我们将灰色部分（<del>灰色的花朵</del>）编号如下：</p><p>上面那些从左到右编号为 $0,1,\cdots i-1$，下面那些从左到右编号为 $0^\prime,1^\prime,\cdots (i-1)^\prime$。</p><p>然后我们用<del>人类智慧</del>可以看出各种各样的合法连线方式都是由四种连线方式组成的，如下图（图是蒯的，我觉得 <font color="black">$\texttt{s}$</font><font color="red">$\texttt{hadowice1984}$</font> 比我画的好多了）</p><p><img src="/2019/12/09/「CodeForces-848E」Days-of-Floral-Colours/2.png" alt=""></p><p>我们把这些方式从上到下，从左到右编号为 $1,2,3,4$（也就是说，左上角是 $1$，右上角是 $2$，以此类推）</p><p>准备工作做好了之后，接下来是正式解题时间啦qwq，我们需要对某个 $n$ 来求出答案。这里分两个大类讨论。</p><ul><li><p>情况 $1$，不存在 $p(0\leq p\leq n-1)$ 使得 $p$ 与 $p^\prime$ 相连。</p><p>  这个大类还是比较好讨论的。</p><p>  设 $g_i$ 为长度为 $i$ 的段灰色部分的上部使用方式 $2,3$ 拼接起来（其实也是整个灰色部分）的方法数，我们可以发现是个背包（实质是斐波那契，$g_{2i}=Fib_i$），有两种物品，花费为 $2$ 和 $4$，可以简单写出方程：</p><script type="math/tex; mode=display">g_i=g_{i-2}+g_{i-4},g_0=g_2=1,g_1=g_3=0</script><p>  然后我们发现这一个大类所带来的贡献为 $n^2g_n$。（因为灰色部分的上部和下部均为长度为 $n$ 的连续段）</p></li><li><p>情况 $2$，存在至少一个 $p(0\leq p\leq n-1)$ 使得 $p$ 与 $p^\prime$ 相连。</p><p>  我们钦定最小的那个 $p$ 为 $j$（这个大类的讨论过程中所有给出的图中 $j$ 的位置由绿色标出）</p><p>  这里要分两个小类，因为方式 $1$ 的左边和右边的两朵花属于两个不同的连续段。</p><ul><li><p>情况 $2.1$，$j$ 这个位置的连线方式为 $4$（也就是直接连到对面的点）。</p><p>  这种情况如下图：</p><p>  <img src="/2019/12/09/「CodeForces-848E」Days-of-Floral-Colours/3.png" alt=""></p><p>  我们会发现由于 $j$ 是第一个与对面的点连起来的位置，所以 $j$ 左边的一段变成了情况 $1$，答案为 $j^2g_j$，但是右边又回归到了原问题，所以右边的答案为 $f_{0,n-j-1}$。</p><p>  所以，由乘法原理，可以算出贡献为 $j^2g_jf_{0,n-j-1}$。</p></li><li><p>情况 $2.2$，$j$ 这个位置的连线方式为 $1$（敲黑板，划重点啦qwq）。</p><p>  还是先给个图吧：</p><p>  <img src="/2019/12/09/「CodeForces-848E」Days-of-Floral-Colours/4.png" alt=""></p><p>  $j$ 左边的子问题一如既往地为情况 $1$，但是规模变成了 $j-1$，因为 $j-1$ 已经连上去了。</p><p>  右边我们变成新的一个子问题。看起来像一个段，但是左边变成了两个已配对的花。这样的话，左边那个已经配对的花与灰色部分为连续段，要计入答案。如果中间灰色部分长度为 $i$，我们把它记为 $f_{1,i}$。</p><p>  这样我们就可以表示这个的答案了，为 $(j+1)^2g_{j}f_{1,i-j-3}$。（为了不出现一些奇奇怪怪的锅，这里下标做了调整）</p></li></ul></li></ul><p>至此，我们的讨论已经完毕啦，现在我们来将结果整合一下，有</p><script type="math/tex; mode=display">f_{0,n}=n^2g_n+\sum\limits_{j=0}^{n-1}j^2g_jf_{0,n-j-1}+\sum\limits_{j=0}^{n-3}(j+1)^2g_{j}f_{1,i-j-3}</script><p>同理，$f_{1,n}$ 类推，只不过有</p><script type="math/tex; mode=display">f_{1,n}=(n+1)^2g_n+\sum\limits_{j=0}^{n-1}(j+1)^2g_jf_{0,n-j-1}+\sum\limits_{j=0}^{n-3}(j+2)^2g_{j}f_{1,i-j-3}</script><p>现在我们解决了段的问题。接下来是时候来解决真正的问题啦qwq！</p><p>现在，由于这是个环，所以我们钦定一朵与它对面的花连在一起的花。这朵花我们编号为 $1$，然后顺时针编号为 $2,3,\cdots,2n$。容易发现，$p(1\leq p\leq n)$对面的那朵花是 $p+n$。</p><p>但是要形成一个段，还要一朵与对面的花连起来的花。这里我们钦定最小的 $p(2\leq p\leq n)$ 使得 $p$ 与 $p+n$ 有边连接的为 $i$。当 $n=9$ 且 $i=5$ 时，如下图：</p><p><img src="/2019/12/09/「CodeForces-848E」Days-of-Floral-Colours/5.png" alt=""></p><p>然后我们可能不清楚 $1\sim i$ 之间是否有无距离为 $2$ 的两朵花连起来（如果不考虑的话我们会算漏），然后我们又开始讨论。</p><p>讨论来，讨论去，最终发现我们出现了新的一个子问题，一个长度为 $n+2$ 的段，位置 $0$ 和位置 $n+1$ 已经配好对了，我们把它记做 $f_{2,n}$。</p><p>有了上面的讨论过程，相信你也对推 $f_{2,n}$ 的方法不陌生了吧qwq，这里就直接给出答案。</p><script type="math/tex; mode=display">f_{2,n}=(n+2)^2g_n+\sum\limits_{j=0}^{n-1}(j+1)^2g_jf_{1,n-j-1}+\sum\limits_{j=0}^{n-3}(j+2)^2g_{j}f_{2,i-j-3}</script><p>接着，我们来计算答案。这里又是一个大的分类讨论。</p><p>如果只有一朵花连到对面的话，那么是两个连续段，长度为 $n-1$。</p><p>如果这朵花的连线方式为 $1$ 的话，那么答案为 $g_{n-3}(n-1)^2$，否则为 $g_{n-1}(n-1)^2$。</p><p>否则，那么存在更多的花连到对面。然后我们可以考虑钦定一个点 $1$ 来算。</p><p>如果 $1$ 和 $n+1$ 连在一起就是直接算，否则就通过旋转来考虑。</p><p>使用计数题的常用方法：枚举一个最小的旋转角度来算，然后乘上角度的贡献，我们得到</p><script type="math/tex; mode=display">\sum\limits_{i=2}^{n-2}i(i-1)^2(g_{i-1}f_{0,n-i-1}+2g_{i-2}f_{1,n-i-2}+g_{i-3}f_{2,n-i-3})</script><p>然后把两个答案加起来就做完啦！使用分治 $\texttt{FFT}$ 即可达到 $O(n\log^2n)$ 的<del>优秀</del>复杂度。</p><p>当然，神仙们可以用 $\texttt{Berlekamp-Massey}$ 来做，就是把前面几项算出之后代入就好了。<del>别叫我，我不会</del></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"Ofast"</span>)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> li;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">262151</span>,MOD=<span class="number">998244353</span>,G=<span class="number">3</span>,INVG=<span class="number">332748118</span>;</span><br><span class="line">ll x,res,cnt=<span class="number">1</span>,limit=<span class="number">-1</span>;</span><br><span class="line">ll g[MAXN],g0[MAXN],g1[MAXN],g2[MAXN],f0[MAXN],rev[MAXN];</span><br><span class="line">ll f1[MAXN],f2[MAXN],tmp1[MAXN],tmp2[MAXN],tmp3[MAXN],tmp4[MAXN];</span><br><span class="line">ll p0[MAXN],p1[MAXN],tmpg0[MAXN],tmpg1[MAXN],tmpg2[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">qpow</span><span class="params">(ll base,ll exponent)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    li res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(exponent)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(exponent&amp;<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            res=(li)res*base%MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        base=(li)base*base%MOD,exponent&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">NTT</span><span class="params">(ll *cp,ll cnt,ll inv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll cur=<span class="number">0</span>,res=<span class="number">0</span>,omg=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;rev[i])</span><br><span class="line">        &#123;</span><br><span class="line">            swap(cp[i],cp[rev[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=cnt;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cur=i&gt;&gt;<span class="number">1</span>,res=qpow(inv==<span class="number">1</span>?G:INVG,(MOD<span class="number">-1</span>)/i);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> ll *p=cp;p!=cp+cnt;p+=i)</span><br><span class="line">        &#123;</span><br><span class="line">            omg=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cur;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                ll t=(li)omg*p[j+cur]%MOD,t2=p[j];</span><br><span class="line">                p[j+cur]=(t2-t+MOD)%MOD,p[j]=(t2+t)%MOD;</span><br><span class="line">                omg=(li)omg*res%MOD;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(inv==<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ll invl=qpow(cnt,MOD<span class="number">-2</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=cnt;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            cp[i]=(li)cp[i]*invl%MOD;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">calc</span><span class="params">(ll l,ll r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll cnt=<span class="number">1</span>,limit=<span class="number">-1</span>,mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(cnt&lt;=(r-l+<span class="number">1</span>)&lt;&lt;<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">cnt&lt;&lt;=<span class="number">1</span>,limit++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt&gt;&gt;<span class="number">1</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">p0[i]=i+l&lt;=mid?f0[i+l]:<span class="number">0</span>,p1[i]=i+l&lt;=mid?f1[i+l]:<span class="number">0</span>;</span><br><span class="line">tmpg0[i]=g0[i],tmpg1[i]=g1[i],tmpg2[i]=g2[i];</span><br><span class="line">rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;limit);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=cnt&gt;&gt;<span class="number">1</span>;i&lt;cnt;i++)</span><br><span class="line">&#123;</span><br><span class="line">tmpg0[i]=tmpg1[i]=tmpg2[i]=p0[i]=p1[i]=<span class="number">0</span>;</span><br><span class="line">rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;limit);</span><br><span class="line">&#125;</span><br><span class="line">NTT(tmpg0,cnt,<span class="number">1</span>),NTT(tmpg1,cnt,<span class="number">1</span>),NTT(tmpg2,cnt,<span class="number">1</span>);</span><br><span class="line">NTT(p0,cnt,<span class="number">1</span>),NTT(p1,cnt,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">&#123;</span><br><span class="line">tmp1[i]=(li)tmpg0[i]*p0[i]%MOD,tmp2[i]=(li)tmpg1[i]*p0[i]%MOD;</span><br><span class="line">tmp3[i]=(li)tmpg1[i]*p1[i]%MOD,tmp4[i]=(li)tmpg2[i]*p1[i]%MOD;</span><br><span class="line">tmpg0[i]=tmpg1[i]=tmpg2[i]=p0[i]=p1[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">NTT(tmp1,cnt,<span class="number">-1</span>),NTT(tmp2,cnt,<span class="number">-1</span>),NTT(tmp3,cnt,<span class="number">-1</span>),NTT(tmp4,cnt,<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt&gt;&gt;<span class="number">1</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i+l&gt;=mid&amp;&amp;i+l&lt;r)</span><br><span class="line">&#123;</span><br><span class="line">f0[i+l+<span class="number">1</span>]=(f0[i+l+<span class="number">1</span>]+tmp1[i])%MOD;</span><br><span class="line">f1[i+l+<span class="number">1</span>]=(f1[i+l+<span class="number">1</span>]+tmp2[i])%MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i+l&gt;=mid<span class="number">-2</span>&amp;&amp;i+l&lt;r<span class="number">-2</span>)</span><br><span class="line">&#123;</span><br><span class="line">f0[i+l+<span class="number">3</span>]=(f0[i+l+<span class="number">3</span>]+tmp3[i])%MOD;</span><br><span class="line">f1[i+l+<span class="number">3</span>]=(f1[i+l+<span class="number">3</span>]+tmp4[i])%MOD;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cdqFFT</span><span class="params">(ll l,ll r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)</span><br><span class="line">&#123;</span><br><span class="line">f0[l]=(f0[l]+g0[l])%MOD,f1[l]=(f1[l]+g1[l])%MOD;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">cdqFFT(l,mid),calc(l,r),cdqFFT(mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">calc2</span><span class="params">(ll l,ll r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll cnt=<span class="number">1</span>,limit=<span class="number">-1</span>,mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(cnt&lt;=(r-l+<span class="number">1</span>)&lt;&lt;<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">cnt&lt;&lt;=<span class="number">1</span>,limit++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt&gt;&gt;<span class="number">1</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">p0[i]=i+l&lt;=mid?f2[i+l]:<span class="number">0</span>,tmpg2[i]=g2[i],tmp2[i]=<span class="number">0</span>;</span><br><span class="line">rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;limit);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=cnt&gt;&gt;<span class="number">1</span>;i&lt;cnt;i++)</span><br><span class="line">&#123;</span><br><span class="line">p0[i]=tmpg2[i]=tmp2[i]=<span class="number">0</span>;</span><br><span class="line">rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;limit);</span><br><span class="line">&#125;</span><br><span class="line">NTT(p0,cnt,<span class="number">1</span>),NTT(tmpg2,cnt,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">&#123;</span><br><span class="line">tmp2[i]=(li)p0[i]*tmpg2[i]%MOD,p0[i]=tmpg2[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">NTT(tmp2,cnt,<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt&gt;&gt;<span class="number">1</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i+l&gt;=mid<span class="number">-2</span>&amp;&amp;i+l&lt;r<span class="number">-2</span>)</span><br><span class="line">&#123;</span><br><span class="line">f2[i+l+<span class="number">3</span>]=(li)(f2[i+l+<span class="number">3</span>]+tmp2[i])%MOD;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cdqFFT2</span><span class="params">(ll l,ll r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)</span><br><span class="line">&#123;</span><br><span class="line">f2[l]=((f2[l]+g2[l])%MOD+(l&gt;=<span class="number">1</span>?tmp1[l<span class="number">-1</span>]:<span class="number">0</span>))%MOD;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">cdqFFT2(l,mid),calc2(l,r),cdqFFT2(mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x=read(),g[<span class="number">0</span>]=g[<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">4</span>;i&lt;=x;i+=<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">g[i]=(g[i<span class="number">-4</span>]+g[i<span class="number">-2</span>])%MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=x;i++)</span><br><span class="line">&#123;</span><br><span class="line">g0[i]=(li)g[i]*i%MOD*i%MOD,g1[i]=(li)g[i]*(i+<span class="number">1</span>)%MOD*(i+<span class="number">1</span>)%MOD;</span><br><span class="line">g2[i]=(li)g[i]*(i+<span class="number">2</span>)%MOD*(i+<span class="number">2</span>)%MOD;</span><br><span class="line">&#125;</span><br><span class="line">cdqFFT(<span class="number">0</span>,x);</span><br><span class="line"><span class="keyword">while</span>(cnt&lt;=(x&lt;&lt;<span class="number">1</span>))</span><br><span class="line">&#123;</span><br><span class="line">cnt&lt;&lt;=<span class="number">1</span>,limit++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">&#123;</span><br><span class="line">rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;limit);</span><br><span class="line">tmpg0[i]=i&lt;cnt&gt;&gt;<span class="number">1</span>?f1[i]:<span class="number">0</span>,tmpg1[i]=i&lt;cnt&gt;&gt;<span class="number">1</span>?g1[i]:<span class="number">0</span>,tmp1[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">NTT(tmpg0,cnt,<span class="number">1</span>),NTT(tmpg1,cnt,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">&#123;</span><br><span class="line">tmp1[i]=(li)tmpg0[i]*tmpg1[i]%MOD,tmpg0[i]=tmpg1[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">NTT(tmp1,cnt,<span class="number">-1</span>),cdqFFT2(<span class="number">0</span>,x);</span><br><span class="line">res=(li)(g[x<span class="number">-1</span>]+g[x<span class="number">-3</span>])*(x<span class="number">-1</span>)%MOD*(x<span class="number">-1</span>)%MOD*x%MOD;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">2</span>;i&lt;x<span class="number">-1</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">res=(res+(li)g0[i<span class="number">-1</span>]*f0[x-i<span class="number">-1</span>]%MOD*i%MOD)%MOD;</span><br><span class="line">res=(res+(li)g1[i<span class="number">-2</span>]*f1[x-i<span class="number">-2</span>]%MOD*<span class="number">2</span>%MOD*i%MOD)%MOD;</span><br><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">2</span>&amp;&amp;i&lt;x<span class="number">-2</span>)</span><br><span class="line">&#123;</span><br><span class="line">res=(res+(li)g2[i<span class="number">-3</span>]*f2[x-i<span class="number">-3</span>]%MOD*i%MOD)%MOD;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CodeForces </tag>
            
            <tag> 多项式 </tag>
            
            <tag> 生成函数 </tag>
            
            <tag> FFT </tag>
            
            <tag> NTT </tag>
            
            <tag> DP </tag>
            
            <tag> 分治 FFT </tag>
            
            <tag> 微积分初步 </tag>
            
            <tag> BM 算法 </tag>
            
            <tag> 线性递推 </tag>
            
            <tag> 思维题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>学习笔记·微分方程</title>
      <link href="/2019/10/13/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/"/>
      <url>/2019/10/13/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>其实是一个备忘录啦qwq<br><a id="more"></a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>所谓微分方程，其实就是包含导数的方程。</p><h3 id="可分离变量的一阶微分方程"><a href="#可分离变量的一阶微分方程" class="headerlink" title="可分离变量的一阶微分方程"></a>可分离变量的一阶微分方程</h3><p>如果能够把一阶微分方程中所有关于$y$和$\mathrm{d}y$的放在一边，把所有$x$和$\mathrm{d}x$放在另一边，则说明该微分方程是<strong>可分离变量的</strong>。例如</p><script type="math/tex; mode=display">\frac{\mathrm{d}y}{\mathrm{d}x}=ky</script><p>可重新整理为</p><script type="math/tex; mode=display">\frac{1}{ky}\mathrm{d}y=\mathrm{d}x</script><p>故它是可分离变量的。另一个例子，方程</p><script type="math/tex; mode=display">\frac{\mathrm{d}y}{\mathrm{d}x}=\cos^2y\cos x</script><p>可化为</p><script type="math/tex; mode=display">\sec^2 y\mathrm{d}y=\cos x\mathrm{d}x</script><p>现在，继续计算的方法是两面即积分号并积分，整理一下之后求$y$。在第一个例子中，我们得到</p><script type="math/tex; mode=display">\int\frac{1}{ky}\mathrm{d}y=\int\mathrm{d}x</script><p>即</p><script type="math/tex; mode=display">\frac{1}{k}\ln \vert y\vert=x+C</script>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>学习笔记·多项式专题（四）</title>
      <link href="/2019/10/06/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E5%A4%9A%E9%A1%B9%E5%BC%8F%E4%B8%93%E9%A2%98%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>/2019/10/06/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E5%A4%9A%E9%A1%B9%E5%BC%8F%E4%B8%93%E9%A2%98%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>这篇文章是数数题推柿子指不着北。<br><a id="more"></a></p><h3 id="例题-1"><a href="#例题-1" class="headerlink" title="例题$1$"></a>例题$1$</h3><p><a href="https://www.luogu.org/problem/P4841" target="_blank" rel="noopener">Luogu P4841</a>（有标号无向连通图计数）</p><p>这里先给大家讲一个普遍的结论：</p><p>假设对于某符合条件的点有标号的图的个数$\texttt{EGF}$为$F(x)$，联通的符合条件的点有标号的图的个数的$\texttt{EGF}$为$G(x)$，则</p><script type="math/tex; mode=display">F(x)=e^{G(x)}</script><p>证明如下</p><p>枚举连通块。考虑到$f_i$已经消除了标号的影响，而$G(x)^k$却由于乘法没有消除标号的影响，所以有</p><script type="math/tex; mode=display">F(x)=\sum\limits_{i=0}^{\infty}\frac{G(x)^i}{i!}=e^{G(x)}</script><p>至于为什么是$G(x)^k$的话，背包计数的原理。每个连通图看作是一个花费节点数的容量的物品就好了。</p><p>这对于后面的一个叫做有标号荒漠计数的题有用。</p><p>所以在这个题里面$F(x)$很好求，有</p><script type="math/tex; mode=display">F(x)=\sum\limits_{i=0}^{\infty}2^{C_i^2}x^i</script><p>然后，$G(x)=\ln F(x)$，于是就求完了qwq。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 多项式 </tag>
            
            <tag> 生成函数 </tag>
            
            <tag> 微积分初步 </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P4148」简单题</title>
      <link href="/2019/07/21/%E3%80%8CLuogu-P4148%E3%80%8D%E7%AE%80%E5%8D%95%E9%A2%98/"/>
      <url>/2019/07/21/%E3%80%8CLuogu-P4148%E3%80%8D%E7%AE%80%E5%8D%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>给定一个$n\times n$的矩阵$a$，初始状态下所有元素均为$0$，还有$m$个操作，这些操作分为以下$3$种：</p><p><code>1 x y z</code>：将$a_{x,y}$加上$z$</p><p><code>2 x1 y1 x2 y2</code>：求出$\sum\limits_{i=x_1}^{x_2}\sum\limits_{j=y_1}^{y_2}a_{i,j}$。</p><p><code>3</code>：终止程序。</p><p>对于所有的修改和询问要求<strong>强制在线</strong>。</p><p>$\texttt{Data Range:}n\leq 5\times 10^5,m\leq 2\times 10^5$<br><a id="more"></a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p><del>一道$\texttt{kdt}$的模板题因为参数次序出问题让我调了好久</del></p><p>如果不要求强制在线，那么可以考虑$\texttt{cdq}$分治或整体二分。</p><p>可是既然强制在线，那么这就变成了一道$\texttt{KD Tree}$的模板题。</p><p>没什么好说的，所以这里放一张图：</p><p><img src="/2019/07/21/「Luogu-P4148」简单题/1.JPG" alt=""></p><p>呵呵。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">2e5</span>+<span class="number">51</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> alpha=<span class="number">0.75</span>;</span><br><span class="line">ll dim;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    ll d[<span class="number">2</span>]; </span><br><span class="line">    ll val; </span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> Node &amp;rhs)<span class="keyword">const</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">KDTree</span>&#123;</span></span><br><span class="line">    Node nd;</span><br><span class="line">    ll sum,size;</span><br><span class="line">    ll minn[<span class="number">2</span>],maxn[<span class="number">2</span>],ch[<span class="number">2</span>];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        minn[<span class="number">0</span>]=minn[<span class="number">1</span>]=maxn[<span class="number">0</span>]=maxn[<span class="number">1</span>]=sum=size=nd.d[<span class="number">0</span>]=nd.d[<span class="number">1</span>]=nd.val=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Node nd[MAXN];</span><br><span class="line">KDTree tree[MAXN];</span><br><span class="line">ll cnt,ptr,ptr2,tot,x,y,xx,yy,z,op,lastAns,rt;</span><br><span class="line">ll pool[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">chkmin</span><span class="params">(ll &amp;x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;y)</span><br><span class="line">    &#123;</span><br><span class="line">        x=y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">chkmax</span><span class="params">(ll &amp;x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;y)</span><br><span class="line">    &#123;</span><br><span class="line">        x=y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> Node::<span class="keyword">operator</span> &lt;(<span class="keyword">const</span> Node &amp;rhs)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>-&gt;d[dim]&lt;rhs.d[dim];</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">newNode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!ptr)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ++tot;</span><br><span class="line">    &#125;</span><br><span class="line">    tree[pool[ptr]].clear();</span><br><span class="line">    <span class="keyword">return</span> pool[ptr--];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    chkmin(tree[x].minn[<span class="number">0</span>],tree[y].minn[<span class="number">0</span>]);</span><br><span class="line">    chkmin(tree[x].minn[<span class="number">1</span>],tree[y].minn[<span class="number">1</span>]);</span><br><span class="line">    chkmax(tree[x].maxn[<span class="number">0</span>],tree[y].maxn[<span class="number">0</span>]);</span><br><span class="line">    chkmax(tree[x].maxn[<span class="number">1</span>],tree[y].maxn[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ls=tree[node].ch[<span class="number">0</span>],rs=tree[node].ch[<span class="number">1</span>];</span><br><span class="line">    tree[node].minn[<span class="number">0</span>]=tree[node].maxn[<span class="number">0</span>]=tree[node].nd.d[<span class="number">0</span>];</span><br><span class="line">    tree[node].minn[<span class="number">1</span>]=tree[node].maxn[<span class="number">1</span>]=tree[node].nd.d[<span class="number">1</span>];</span><br><span class="line">    tree[node].size=tree[ls].size+tree[rs].size+<span class="number">1</span>;</span><br><span class="line">    tree[node].sum=tree[ls].sum+tree[rs].sum+tree[node].nd.val;</span><br><span class="line">    <span class="keyword">if</span>(ls)</span><br><span class="line">    &#123;</span><br><span class="line">        update(node,ls);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(rs)</span><br><span class="line">    &#123;</span><br><span class="line">        update(node,rs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">create</span><span class="params">(ll l,ll r,ll d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    dim=d,nth_element(nd+l,nd+mid,nd+r+<span class="number">1</span>);</span><br><span class="line">    ll node=newNode();</span><br><span class="line">    tree[node].nd=nd[mid];</span><br><span class="line">    tree[node].ch[<span class="number">0</span>]=l&lt;mid?create(l,mid<span class="number">-1</span>,d^<span class="number">1</span>):<span class="number">0</span>;</span><br><span class="line">    tree[node].ch[<span class="number">1</span>]=r&gt;mid?create(mid+<span class="number">1</span>,r,d^<span class="number">1</span>):<span class="number">0</span>;</span><br><span class="line">    update(node);</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pia</span><span class="params">(ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[node].ch[<span class="number">0</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        pia(tree[node].ch[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    nd[++ptr2]=tree[node].nd;</span><br><span class="line">    pool[++ptr]=node;</span><br><span class="line">    <span class="keyword">if</span>(tree[node].ch[<span class="number">1</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        pia(tree[node].ch[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">(ll &amp;node,ll d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ls=tree[node].ch[<span class="number">0</span>],rs=tree[node].ch[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">double</span> sz=alpha*tree[node].size;</span><br><span class="line">    <span class="keyword">if</span>(sz&lt;tree[ls].size||sz&lt;tree[rs].size)</span><br><span class="line">    &#123;</span><br><span class="line">        ptr2=<span class="number">0</span>,pia(node),node=create(<span class="number">1</span>,ptr2,d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Node nd,ll d,ll &amp;node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!node)</span><br><span class="line">    &#123;</span><br><span class="line">        node=newNode(),tree[node].nd=nd,update(node);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll x=tree[node].nd.d[d]&lt;nd.d[d];</span><br><span class="line">    insert(nd,d^<span class="number">1</span>,tree[node].ch[x]);</span><br><span class="line">    update(node),check(node,d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">check</span><span class="params">(KDTree nd,ll x,ll y,ll xx,ll yy)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll p=nd.minn[<span class="number">0</span>],q=nd.minn[<span class="number">1</span>],r=nd.maxn[<span class="number">0</span>],s=nd.maxn[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=p&amp;&amp;xx&gt;=r&amp;&amp;y&lt;=q&amp;&amp;yy&gt;=s)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((xx&lt;p||x&gt;r)||(yy&lt;q||y&gt;s))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">query</span><span class="params">(ll x,ll y,ll xx,ll yy,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll chk,res=<span class="number">0</span>,p=tree[node].nd.d[<span class="number">0</span>],q=tree[node].nd.d[<span class="number">1</span>];</span><br><span class="line">    ll ls=tree[node].ch[<span class="number">0</span>],rs=tree[node].ch[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span>(p&gt;=x&amp;&amp;p&lt;=xx&amp;&amp;q&gt;=y&amp;&amp;q&lt;=yy)</span><br><span class="line">    &#123;</span><br><span class="line">        res+=tree[node].nd.val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ls)</span><br><span class="line">    &#123;</span><br><span class="line">        chk=check(tree[ls],x,y,xx,yy);</span><br><span class="line">        <span class="keyword">if</span>(chk==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            res+=tree[ls].sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(chk==<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            res+=query(x,y,xx,yy,ls);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(rs)</span><br><span class="line">    &#123;</span><br><span class="line">        chk=check(tree[rs],x,y,xx,yy);</span><br><span class="line">        <span class="keyword">if</span>(chk==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            res+=tree[rs].sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(chk==<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            res+=query(x,y,xx,yy,rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt=read();</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        op=read();</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            x=read()^lastAns,y=read()^lastAns,z=read()^lastAns;</span><br><span class="line">            insert((Node)&#123;x,y,z&#125;,<span class="number">0</span>,rt);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            x=read()^lastAns,y=read()^lastAns;</span><br><span class="line">            xx=read()^lastAns,yy=read()^lastAns;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,lastAns=query(x,y,xx,yy,rt));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> BZOJ </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> KD Tree </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>学习笔记·KD Tree</title>
      <link href="/2019/07/19/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7KD-Tree/"/>
      <url>/2019/07/19/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7KD-Tree/</url>
      
        <content type="html"><![CDATA[<p>博客日日咕系列。</p><p>等我做完简单题再来更吧。</p><p>机房里的人全会就我不会系列。<br><a id="more"></a></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title> 「Luogu P4389」[APIO2013]出题人</title>
      <link href="/2019/07/19/%E3%80%8CLuogu-P3640%E3%80%8D-APIO2013-%E5%87%BA%E9%A2%98%E4%BA%BA/"/>
      <url>/2019/07/19/%E3%80%8CLuogu-P3640%E3%80%8D-APIO2013-%E5%87%BA%E9%A2%98%E4%BA%BA/</url>
      
        <content type="html"><![CDATA[<p>题面不会解释。<br><a id="more"></a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>对于给出的三份$\texttt{SSSP}$的程序，考虑分析其时间复杂度。</p><p>$\texttt{Floyd:}$无论如何都是$O(n^3)$，与询问无关。</p><p>$\texttt{Dijkstra:}$搞了个堆优化，$O(n\log n)$，一上负权图就$\texttt{GG}$。</p><p>$\texttt{Bellman-Ford:}$一旦有负权照样退化成$O(qnm)$。</p><h4 id="texttt-Subtask-1"><a href="#texttt-Subtask-1" class="headerlink" title="$\texttt{Subtask 1}$"></a>$\texttt{Subtask 1}$</h4><p>卡$\texttt{Floyd}$，让$\texttt{Dijkstra}$过。</p><p>由于$\texttt{Floyd}$总是$O(n^3)$，所以考虑构造一个$101$个点的图，没有边，就可以卡掉了。</p><h4 id="texttt-Subtask-2"><a href="#texttt-Subtask-2" class="headerlink" title="$\texttt{Subtask 2}$"></a>$\texttt{Subtask 2}$</h4><p>卡$\texttt{Bellman-Ford}$，让$\texttt{Floyd}$过。</p><p>要让$\texttt{Floyd}$过，$n=100$即可。然后每个点随机连一些负权边，让$\texttt{Bellman-Ford}$不断的进行松弛操作，再带上$10$组询问就可以卡掉了。</p><p>这里我的策略是前$50$个点随机连$11$条边，后$50$个点随机连$10$条边，在这种随机图上很容易卡掉。</p><h4 id="texttt-Subtask-3"><a href="#texttt-Subtask-3" class="headerlink" title="$\texttt{Subtask 3}$"></a>$\texttt{Subtask 3}$</h4><p>跟$\texttt{Subtask 1}$一样。</p><h4 id="texttt-Subtask-4"><a href="#texttt-Subtask-4" class="headerlink" title="$\texttt{Subtask 4}$"></a>$\texttt{Subtask 4}$</h4><p>卡$\texttt{Dijkstra}$，让$\texttt{Floyd}$过。</p><p>先来看一个图：</p><p><img src="/2019/07/19/「Luogu-P3640」-APIO2013-出题人/1.JPG" alt=""></p><p>这样一个图诱导$\texttt{Dijkstra}$走边权为$0$的边，走着走着就发现原来的那条不是最短路，就白白走了许多路径。用这种方法卡掉即可。</p><h4 id="texttt-Subtask-5"><a href="#texttt-Subtask-5" class="headerlink" title="$\texttt{Subtask 5}$"></a>$\texttt{Subtask 5}$</h4><p>卡$\texttt{Bellman-Ford}$，让$\texttt{Dijkstra}$过。</p><p>考虑到代码中的一个性质：每一次都是所有顶点进行松弛操作，而且只要有改变最短路就可以再松弛一遍，所以考虑构造一堆自己连向自己的负环，再在$0$和$1$之间连重边就可以卡掉啦qwq。</p><h4 id="texttt-Subtask-6"><a href="#texttt-Subtask-6" class="headerlink" title="$\texttt{Subtask 6}$"></a>$\texttt{Subtask 6}$</h4><p>只要你$\texttt{Subtask 4}$做得好的话，这个点也是一样的。</p><h4 id="texttt-Subtask-7"><a href="#texttt-Subtask-7" class="headerlink" title="$\texttt{Subtask 7}$"></a>$\texttt{Subtask 7}$</h4><p>染色问题，让你卡爆搜。</p><p>生成一个随机图就可以啦。</p><h4 id="texttt-Subtask-8"><a href="#texttt-Subtask-8" class="headerlink" title="$\texttt{Subtask 8}$"></a>$\texttt{Subtask 8}$</h4><p>让你构造数据使得爆搜通过。</p><p>考虑把点染色，异色的点之间连边，同色点之间不连边，于是就完了。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">1e5</span>+<span class="number">51</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">hack1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"101"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">101</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"1\n1 100"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">hack2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll edges;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"100"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    edges=i&lt;<span class="number">50</span>?<span class="number">11</span>:<span class="number">10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d "</span>,edges);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;edges;j++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d "</span>,rand()%<span class="number">100</span>,<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"10"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"0 99"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">hack3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"101"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">101</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"1\n1 100"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">hack4</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll k=<span class="number">131072</span>;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"33"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">if</span>(i&amp;<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"1 %d %d"</span>,i+<span class="number">1</span>,-(k&lt;&lt;<span class="number">1</span>)),k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"2 %d 0 %d %d"</span>,i+<span class="number">2</span>,i+<span class="number">1</span>,k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"0\n6"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"0 32"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">hack5</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"300\n1 1 1\n0"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">2</span>;i&lt;<span class="number">300</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d "</span>,i&lt;<span class="number">6</span>?<span class="number">12</span>:<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;(i&lt;<span class="number">6</span>?<span class="number">12</span>:<span class="number">1</span>);j++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d -1 "</span>,i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"10"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"0 1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">hack6</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll k=<span class="number">131072</span>;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"33"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">if</span>(i&amp;<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"1 %d %d"</span>,i+<span class="number">1</span>,-(k&lt;&lt;<span class="number">1</span>)),k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"2 %d 0 %d %d"</span>,i+<span class="number">2</span>,i+<span class="number">1</span>,k);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"0\n6"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"0 32"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">hack7</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll x,y;</span><br><span class="line">    <span class="keyword">static</span> ll vis[<span class="number">75</span>][<span class="number">75</span>];</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"71 1501"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1501</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    x=rand()%<span class="number">71</span>,y=rand()%<span class="number">71</span>;</span><br><span class="line">    <span class="keyword">while</span>(vis[x][y]||x==y)</span><br><span class="line">    &#123;</span><br><span class="line">        x=rand()%<span class="number">71</span>,y=rand()%<span class="number">71</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,x,y),vis[x][y]=vis[y][x]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">hack8</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll x,y;</span><br><span class="line">    <span class="keyword">static</span> ll color[<span class="number">151</span>],vis[<span class="number">151</span>][<span class="number">151</span>];</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"101 1501"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">101</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        color[i]=i%<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1501</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    x=rand()%<span class="number">101</span>,y=rand()%<span class="number">101</span>;</span><br><span class="line">    <span class="keyword">while</span>(vis[x][y]||x==y||color[x]==color[y])</span><br><span class="line">    &#123;</span><br><span class="line">        x=rand()%<span class="number">101</span>,y=rand()%<span class="number">101</span>; </span><br><span class="line">    &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,x,y),vis[x][y]=vis[y][x]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 提交答案题 </tag>
            
            <tag> 最短路 </tag>
            
            <tag> Floyd </tag>
            
            <tag> Dijkstra </tag>
            
            <tag> Bellman-Ford </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P4389」付公主的背包</title>
      <link href="/2019/07/19/%E3%80%8CLuogu-P4389%E3%80%8D%E4%BB%98%E5%85%AC%E4%B8%BB%E7%9A%84%E8%83%8C%E5%8C%85/"/>
      <url>/2019/07/19/%E3%80%8CLuogu-P4389%E3%80%8D%E4%BB%98%E5%85%AC%E4%B8%BB%E7%9A%84%E8%83%8C%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<p>给定$n$种物品，每种物品的体积为$w_i$，有无限个。对于$c\in[1,m]$，求出用这些物品正好装满体积为$c$的背包的总数。</p><p>$\texttt{Data Range:}n,m\leq 10^5,w_i\leq m$<br><a id="more"></a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.org/problemnew/show/P4389" target="_blank" rel="noopener">Luogu P4389</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>考虑写出每种物品的生成函数。</p><p>如果没有体积的限制，那生成函数是</p><script type="math/tex; mode=display">F(x)=\sum\limits_{i=0}^{\infty}x^i</script><p>但是有了体积的限制，咋办？</p><p>考虑将一个体积为$v$的物品拆成$v$个体积为$1$的物品，再把这些体积为$1$的物品每$v$个捆绑成一组。所以说，你每次只能拿$v$的倍数个体积为$1$的物品，那么生成函数就是</p><script type="math/tex; mode=display">F(x)=\sum\limits_{i=0}^{\infty}[i\bmod v=0]x^i</script><p>也即</p><script type="math/tex; mode=display">F(x)=1+x^v+(x^v)^2+(x^v)^3+\cdots</script><p>写成封闭形式，有</p><script type="math/tex; mode=display">F(x)=\frac{1}{1-x^v}</script><p>于是答案就是每种物品对应的生成函数的卷积。可是时间复杂度过高，考虑优化。</p><p>假设第$i$种物品所对应的生成函数为$F_i(x)$，答案所对应的生成函数为$G(x)$，则</p><script type="math/tex; mode=display">G(x)=\prod\limits_{i=0}^{n}F_i(x)</script><p>于是<del>很自然的</del>想到两边取对数，有</p><script type="math/tex; mode=display">\ln G(x)=\sum\limits_{i=0}^{n}\ln F_i(x)</script><p>暴力的求$\ln F_i(x)$是$O(n^2\log n)$的，所以考虑巧妙的求，所以开始推柿子。</p><p>设$H(x)=\ln F(x)$，则</p><script type="math/tex; mode=display">H^\prime(x)=\frac{F^\prime(x)}{F(x)}</script><p>展开得</p><script type="math/tex; mode=display">H^\prime(x)=(1-x^v)\sum\limits_{i=1}^{\infty}ivx^{iv-1}</script><p>暴力乘上去</p><script type="math/tex; mode=display">H^\prime(x)=\sum\limits_{i=1}^{\infty}vx^{iv-1}</script><p>所以说</p><script type="math/tex; mode=display">H(x)=\sum\limits_{i=1}^{\infty}\frac{x^{iv}}{i}</script><p>对每种物品求出该多项式相加后$\texttt{exp}$即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> li;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">4e5</span>+<span class="number">51</span>,MOD=<span class="number">998244353</span>,G=<span class="number">3</span>,INVG=<span class="number">332748118</span>;</span><br><span class="line">ll cnt,fd;</span><br><span class="line">ll f[MAXN],tmp[MAXN],res[MAXN],rev[MAXN],fact[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">qpow</span><span class="params">(ll base,ll exponent)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    li res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(exponent)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(exponent&amp;<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            res=(li)res*base%MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        base=(li)base*base%MOD,exponent&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">(ll ccnt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fact[<span class="number">0</span>]=fact[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=ccnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        fact[i]=(li)fact[i<span class="number">-1</span>]*i%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">NTT</span><span class="params">(ll *cp,ll cnt,ll inv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll cur=<span class="number">0</span>,res=<span class="number">0</span>,omg=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;rev[i])</span><br><span class="line">        &#123;</span><br><span class="line">            swap(cp[i],cp[rev[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=cnt;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cur=i&gt;&gt;<span class="number">1</span>,res=qpow(inv==<span class="number">1</span>?G:INVG,(MOD<span class="number">-1</span>)/i);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> ll *p=cp;p!=cp+cnt;p+=i)</span><br><span class="line">        &#123;</span><br><span class="line">            omg=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cur;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                ll t=(li)omg*p[j+cur]%MOD,t2=p[j];</span><br><span class="line">                p[j+cur]=(t2-t+MOD)%MOD,p[j]=(t2+t)%MOD;</span><br><span class="line">                omg=(li)omg*res%MOD;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(inv==<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ll invl=qpow(cnt,MOD<span class="number">-2</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=cnt;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            cp[i]=(li)cp[i]*invl%MOD;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">deriv</span><span class="params">(ll fd,ll *f,ll *res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;fd;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        res[i<span class="number">-1</span>]=(li)f[i]*i%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    res[fd<span class="number">-1</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">integ</span><span class="params">(ll fd,ll *f,ll *res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;fd;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        res[i]=(li)f[i<span class="number">-1</span>]*qpow(i,MOD<span class="number">-2</span>)%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    res[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">inv</span><span class="params">(ll fd,ll *f,ll *res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> ll tmp[MAXN];</span><br><span class="line">    <span class="keyword">if</span>(fd==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        res[<span class="number">0</span>]=qpow(f[<span class="number">0</span>],MOD<span class="number">-2</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    inv((fd+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>,f,res);</span><br><span class="line">    ll cnt=<span class="number">1</span>,limit=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(cnt&lt;(fd&lt;&lt;<span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        cnt&lt;&lt;=<span class="number">1</span>,limit++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp[i]=i&lt;fd?f[i]:<span class="number">0</span>;</span><br><span class="line">        rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;limit);</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(tmp,cnt,<span class="number">1</span>),NTT(res,cnt,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        res[i]=(li)(<span class="number">2</span>-(li)tmp[i]*res[i]%MOD+MOD)%MOD*res[i]%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(res,cnt,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=fd;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        res[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ln</span><span class="params">(ll fd,ll *f,ll *res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> ll pinv[MAXN],der[MAXN];</span><br><span class="line">    ll cnt=<span class="number">1</span>,limit=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(cnt&lt;(fd&lt;&lt;<span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        cnt&lt;&lt;=<span class="number">1</span>,limit++;</span><br><span class="line">    &#125;</span><br><span class="line">    inv(fd,f,pinv),deriv(fd,f,der);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;limit);</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(pinv,cnt,<span class="number">1</span>),NTT(der,cnt,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        der[i]=(li)der[i]*pinv[i]%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(der,cnt,<span class="number">-1</span>),integ(fd,der,res);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        der[i]=pinv[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">exp</span><span class="params">(ll fd,ll *f,ll *res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> ll texp[MAXN];</span><br><span class="line">    <span class="keyword">if</span>(fd==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        res[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll cnt=<span class="number">1</span>,limit=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(cnt&lt;(fd&lt;&lt;<span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        cnt&lt;&lt;=<span class="number">1</span>,limit++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exp</span>((fd+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>,f,res),ln(fd,res,texp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;limit);</span><br><span class="line">    &#125;</span><br><span class="line">    texp[<span class="number">0</span>]=(f[<span class="number">0</span>]+<span class="number">1</span>-texp[<span class="number">0</span>]+MOD)%MOD;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;fd;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        texp[i]=(f[i]-texp[i]+MOD)%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(texp,cnt,<span class="number">1</span>),NTT(res,cnt,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        res[i]=(li)res[i]*texp[i]%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(res,cnt,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        texp[i]=<span class="number">0</span>,res[i]=i&lt;fd?res[i]:<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt=read(),fd=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    tmp[read()]++; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=fd;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(tmp[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=i;j&lt;=fd;j+=i)</span><br><span class="line">            &#123;</span><br><span class="line">                f[j]=(f[j]+(li)tmp[i]*i%MOD*qpow(j,MOD<span class="number">-2</span>)%MOD)%MOD; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exp</span>(fd+<span class="number">1</span>,f,res);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=fd;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,res[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 多项式 </tag>
            
            <tag> 生成函数 </tag>
            
            <tag> FFT </tag>
            
            <tag> NTT </tag>
            
            <tag> 洛谷 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P4366」[Code+#4]最短路</title>
      <link href="/2019/07/14/%E3%80%8CLuogu-P4366%E3%80%8D-Code-4-%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
      <url>/2019/07/14/%E3%80%8CLuogu-P4366%E3%80%8D-Code-4-%E6%9C%80%E7%9F%AD%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<p>给定一个$n$个点的有向图和一个常数$c$，其中对于任意的$i$和$j$，有一条边权$(i\operatorname{xor}j)\times C$的边。还给定$m$条边，第$i$条边从$u_i$到$v_i$，边权为$w_i$，求出$s$到$t$的最短路。</p><p>$\texttt{Data Range:}n\leq 10^5,m\leq 5\times 10^5,1\leq u_i,v_i\leq n,1\leq w_i\leq 100$<br><a id="more"></a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.org/problemnew/show/P4366" target="_blank" rel="noopener">Luogu P4366</a></p><p><a href="https://loj.ac/problem/6354" target="_blank" rel="noopener">LOJ 6354</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>直接建图跑最短路是不行的，因为边数是$n^2m$级别的，要优化建图。</p><p>对于$x$到$y$的边，其权值为$x\operatorname{xor}y$，也即</p><script type="math/tex; mode=display">x\operatorname{xor}y_0\operatorname{xor}y_1\operatorname{xor}\cdots\operatorname{xor}y_{31}</script><p>其中，$y_i$为$y$在二进制下第$i$位的值$\times2^i$。</p><p>为什么呢？</p><p>因为对于每一次异或，只会修改一个位置上的数，对别的位置没有影响。所以说从$x$到$y$只需要这样一个一个走即可，对答案没有影响</p><p>所以只需要对任意的点$i$向$2^j$连$i\operatorname{xor}2^j$的边，再跑最短路即可，边数立马降至$n\log n+m$级别。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// luogu-judger-enable-o2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">1e5</span>+<span class="number">51</span>,MAXM=<span class="number">2.2e6</span>+<span class="number">51</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    ll to,prev,dist;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tuple</span>&#123;</span></span><br><span class="line">    ll node,dist;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> Tuple &amp;rhs)<span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;dist&gt;rhs.dist;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Edge ed[MAXM];</span><br><span class="line">priority_queue&lt;Tuple&gt;pq;</span><br><span class="line">ll nc,ec,tot,from,to,dist,wt,source;</span><br><span class="line">ll last[MAXN],minn[MAXN],inQueue[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(ll from,ll to,ll dist)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ed[++tot].prev=last[from];</span><br><span class="line">    ed[tot].to=to;</span><br><span class="line">    ed[tot].dist=dist;</span><br><span class="line">    last[from]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(ll source)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll top;</span><br><span class="line">    <span class="built_in">memset</span>(minn,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(minn));</span><br><span class="line">    pq.push((Tuple)&#123;source,<span class="number">0</span>&#125;),minn[source]=<span class="number">0</span>,inQueue[source]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!pq.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        top=pq.top().node,pq.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=last[top];i;i=ed[i].prev)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(minn[top]+ed[i].dist&lt;minn[ed[i].to])</span><br><span class="line">            &#123;</span><br><span class="line">                minn[ed[i].to]=minn[top]+ed[i].dist;</span><br><span class="line">                pq.push((Tuple)&#123;ed[i].to,minn[ed[i].to]&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    nc=read(),ec=read(),wt=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ec;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        from=read(),to=read(),dist=read();</span><br><span class="line">        addEdge(from,to,dist);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=nc;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=nc;j&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((i^j)&lt;=nc)</span><br><span class="line">            &#123;</span><br><span class="line">                addEdge(i,i^j,j*wt);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Dijkstra(source=read());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,minn[to=read()]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
            <tag> 最短路 </tag>
            
            <tag> Dijkstra </tag>
            
            <tag> LOJ </tag>
            
            <tag> CodePlus </tag>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu-P5431」【模板】乘法逆元2</title>
      <link href="/2019/06/30/%E3%80%8CLuogu-P5431%E3%80%8D%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E4%B9%98%E6%B3%95%E9%80%86%E5%85%832/"/>
      <url>/2019/06/30/%E3%80%8CLuogu-P5431%E3%80%8D%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E4%B9%98%E6%B3%95%E9%80%86%E5%85%832/</url>
      
        <content type="html"><![CDATA[<p>给定$n$个正整数$a_i$，求出在$\bmod p$意义下$\sum\limits_{i=1}^{n}k^i\cdot a_i^{-1}$</p><p>$\texttt{Data Range:}1\leq n\leq 5\times 10^6,2\leq k<p\leq 10^9,1\leq="" a_i="" <="" p$="" <!---more---=""></p\leq></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> li;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">5e6</span>+<span class="number">51</span>;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1</span>&lt;&lt;<span class="number">15</span>],*st=buf,*ed=buf;</span><br><span class="line">ll cnt,mod,k,res,cur;</span><br><span class="line">ll prefix[MAXN],invp[MAXN],num[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">gcx</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> st==ed&amp;&amp;(ed=(st=buf)+fread(buf,<span class="number">1</span>,<span class="number">32768</span>,<span class="built_in">stdin</span>),ed==st)?<span class="number">0</span>:*st++; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=gcx();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=gcx();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=gcx();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=gcx();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">qpow</span><span class="params">(ll base,ll exponent)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(exponent)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(exponent&amp;<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            res=(li)res*base%mod;</span><br><span class="line">        &#125;</span><br><span class="line">        base=(li)base*base%mod,exponent&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt=read(),mod=read(),k=read(),prefix[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        prefix[i]=<span class="number">1l</span>l*prefix[i<span class="number">-1</span>]*(num[i]=read())%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    invp[cnt]=qpow(prefix[cnt],mod<span class="number">-2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=cnt<span class="number">-1</span>;i;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        invp[i]=<span class="number">1l</span>l*invp[i+<span class="number">1</span>]*num[i+<span class="number">1</span>]%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    res=(res+<span class="number">1l</span>l*k*invp[<span class="number">1</span>]%mod)%mod,cur=<span class="number">1l</span>l*k*k%mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        res=(res+<span class="number">1l</span>l*cur*invp[i]%mod*prefix[i<span class="number">-1</span>]%mod)%mod;</span><br><span class="line">        cur=<span class="number">1l</span>l*cur*k%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
            <tag> 数论，数学 </tag>
            
            <tag> 乘法逆元 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>学习笔记·多项式专题（三）</title>
      <link href="/2019/06/23/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E5%A4%9A%E9%A1%B9%E5%BC%8F%E4%B8%93%E9%A2%98%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2019/06/23/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E5%A4%9A%E9%A1%B9%E5%BC%8F%E4%B8%93%E9%A2%98%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>在这一篇文章里，我们来谈一谈上升幂，下降幂多项式，斯特林数以及一些优美的结论。</p><a id="more"></a><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>如果有什么比如说像链接有问题或者是别的问题，包括不懂的，请在下面发讨论。</p><h3 id="下降幂多项式的定义"><a href="#下降幂多项式的定义" class="headerlink" title="下降幂多项式的定义"></a>下降幂多项式的定义</h3><p>下降幂多项式（$\texttt{Falling Factorial Polynomial}$，也即$\texttt{FFP}$），也称下降阶乘幂多项式，是一类特殊的多项式。</p><p>首先，看一下下降幂单项式的递归定义：</p><script type="math/tex; mode=display">x^{\underline n}=\begin{cases}1, & n=0\\x\times (x-1)^{n-1} & n\geq 1,\end{cases}</script><p>所以说，$x^{\underline 0}=1$，那么$x^{\underline 1}$呢？</p><script type="math/tex; mode=display">x^{\underline 1}=x\times (x-1)^{\underline 0}=x</script><p>那么有</p><script type="math/tex; mode=display">x^{\underline 2}=x\times (x-1)^{\underline 1}=x(x-1)=x^2-x</script><script type="math/tex; mode=display">x^{\underline 3}=x\times (x-1)^{\underline 2}=x(x-1)(x-2)=x^3-3x^2+2x</script><p>于是可以得出一个普遍的结论，就是</p><script type="math/tex; mode=display">x^{\underline n}=x(x-1)\cdots(x-n+1)=\frac{x!}{(x-n)!}=n!C_x^n</script><p>$x^{\underline n}=n!C^n_x$这个公式很重要，因为$x^{\underline n}$与两类斯特林数有强关联。</p><p>那么，下降幂多项式，是由许多个下降幂单项式相加得来的，如</p><script type="math/tex; mode=display">3x^{\underline 2}+2x^{\underline 1}+1=3x(x-1)+2x+1=3x^2-x+1</script><h3 id="普通多项式转下降幂多项式"><a href="#普通多项式转下降幂多项式" class="headerlink" title="普通多项式转下降幂多项式"></a>普通多项式转下降幂多项式</h3><p><a href="https://www.luogu.org/problemnew/show/P5383" target="_blank" rel="noopener">Luogu P5383</a></p><p>首先看一个简单的结论：</p><script type="math/tex; mode=display">n^m=\sum\limits_{i=0}^{m}i!S^i_mC^i_n</script><p>其中$S$表示第二类斯特林数。</p><p>为什么呢？考虑等号两边的组合意义。</p><p>左边是$n$个球任意放$m$个盒子的答案，右边的话枚举非空盒子的数量，用组合数枚举一下，最后由于盒子不同，所以要乘个$i!$。</p><p>所以，把它拓展一下，得到一个跳跃性结论：</p><script type="math/tex; mode=display">x^n=\sum\limits_{i=0}^{n}i!S^i_nC^i_x</script><p>这时，我们看到了$i!C_i^x$的形式，考虑把它转成下降幂多项式，那么就会有</p><script type="math/tex; mode=display">x^n=\sum\limits_{i=0}^{n}S^i_nx^{\underline i}</script><p>于是我们就把普通单项式转换成了一个下降幂单项式。但如果拓展成普通多项式，结论又会是什么？</p><p>设$n$次多项式$F(x)$的系数数列为$f$，那么有</p><script type="math/tex; mode=display">F(x)=\sum\limits_{i=0}^nf_ix^i</script><p>把结论用上去，有</p><script type="math/tex; mode=display">F(x)=\sum\limits_{i=0}^nf_i\sum\limits_{j=0}^{i}S_i^jx^{\underline j}</script><p>这里有一个小$\texttt{trick}$，改变求和顺序！所以说</p><script type="math/tex; mode=display">F(x)=\sum\limits_{j=0}^nx^{\underline j}\sum\limits_{i=j}^{n}S_i^jf_i</script><p>本来$i$的下界应该是$0$的，但是当$i&lt;j$时$S_i^j=0$，所以可以将$i$的下界改成$j$。</p><p>这就是一个下降幂多项式的形式了，看来问题解决了！但是后面一长串和式该怎么求？</p><p>这里有一个小结论：（证明在下面，用心找可以找得到）</p><script type="math/tex; mode=display">S^n_m=\sum\limits_{i=0}^n\frac{(-1)^{n-i}}{(n-i)!}\cdot\frac{i^m}{i!}</script><p>所以，把结论用上去啊。。。</p><script type="math/tex; mode=display">\sum\limits_{i=j}^{n}S_i^jf_i=\sum\limits_{i=j}^{n}\sum\limits_{k=0}^{j}\frac{(-1)^{j-k}}{(j-k)!}\cdot\frac{f_ik^i}{k!}</script><p>改变求和顺序，有</p><script type="math/tex; mode=display">\sum\limits_{i=j}^{n}S_i^jf_i=\sum\limits_{k=0}^{j}\frac{(-1)^{j-k}}{(j-k)!}\cdot\sum\limits_{i=j}^{n}\frac{f_ik^i}{k!}</script><p>这就是卷积的形式了，直接$\texttt{NTT}$就好啦qwq。但是求后面那个和式要多点求值。</p><p>接着就是神奇的上代码环节啦。。。（包括预处理）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">polyToFFP</span><span class="params">(ll fd,ll *f,ll *res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> ll pts[MAXN&gt;&gt;<span class="number">1</span>],tmp[MAXN],tmp2[MAXN];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;fd;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    pts[i]=i,tmp[i]=(i&amp;<span class="number">1</span>)?MOD-finv[i]:finv[i];</span><br><span class="line">    &#125;</span><br><span class="line">    eval(fd,fd,f,pts,tmp2);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;fd;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    tmp2[i]=(li)tmp2[i]*finv[i]%MOD,pts[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll cnt=<span class="number">1</span>,limit=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(cnt&lt;(fd&lt;&lt;<span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">    cnt&lt;&lt;=<span class="number">1</span>,limit++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;limit);</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(tmp2,cnt,<span class="number">1</span>),NTT(tmp,cnt,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        res[i]=(li)tmp[i]*tmp2[i]%MOD,tmp[i]=tmp2[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(res,cnt,<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="下降幂多项式乘法"><a href="#下降幂多项式乘法" class="headerlink" title="下降幂多项式乘法"></a>下降幂多项式乘法</h3><p><a href="https://www.luogu.org/problemnew/show/P5394" target="_blank" rel="noopener">Luogu P5394</a></p><p>首先，拿题目的样例来解释一下：</p><p>$\quad(3x^{\underline 2}+2x^{\underline 1}+1)(4x^{\underline 3}+3x^{\underline 2}+2x^{\underline 1}+1)$<br>$=(3x^2-x+1)(4x^3-9x^2+7x+1)$<br>$=12x^5-30x^4+34x^3-12x^2+6x+1$<br>$=12x^{\underline 5}+89x^{\underline 4}+148^{\underline 3}+52x^{\underline 2}+8x^{\underline 1}+1$</p><p>难道要普通多项式与下降幂多项式的转换吗？题目难度告诉我们不要。但又怎么做呢？</p><p>考虑通过$\texttt{EGF}$将普通多项式与下降幂多项式建立联系，自然考虑下降幂单项式$x^{\underline n}$的$\texttt{EGF}$，设它为$g(x)$，那么有：</p><script type="math/tex; mode=display">g(x)=\sum\limits_{i=n}^{\infty}\frac{i!}{(i-n)!i!}x^i</script><p>把$x^n$提出来并约分</p><script type="math/tex; mode=display">g(x)=x^n\sum\limits_{i=n}^{\infty}\frac{1}{(i-n)!}x^{i-n}</script><p>改变求和符号的变量</p><script type="math/tex; mode=display">g(x)=x^n\sum\limits_{i=0}^{\infty}\frac{x^i}{i!}</script><p>和式就是$e^x$的麦克劳林级数，所以</p><script type="math/tex; mode=display">g(x)=x^ne^x</script><p>设$F(x)$为下降幂多项式$f(x)$点值的$\texttt{EGF}$，$G(x)$为下降幂多项式$f(x)$系数的$\texttt{EGF}$，$f$是$f(x)$的系数数组，因为</p><script type="math/tex; mode=display">f(x)=\sum\limits_{i=0}^{n}f_ix^{\underline i}</script><p>所以</p><script type="math/tex; mode=display">F(x)=\sum\limits_{i=0}^{n}f_ie^xx^i</script><p>把$e^x$提出来</p><script type="math/tex; mode=display">F(x)=e^x\sum\limits_{i=0}^{n}f_ix^i</script><script type="math/tex; mode=display">F(x)=e^xG(x)</script><p>所以说，下降幂多项式的点值和系数是可以互相转换的。只要得到两个下降幂多项式的点值，把对应点值乘起来再转系数就可以了，这些操作都可以通过简单的多项式乘法实现。</p><p>于是上一个令人身心愉悦的代码qwq（预处理跟上面的代码一模一样）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">FFPMul</span><span class="params">(ll fd,ll gd,ll *f,ll *g,ll *res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> ll tmp[MAXN],tmpf[MAXN],tmpg[MAXN];</span><br><span class="line">    ll cnt=<span class="number">1</span>,limit=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;fd;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmpf[i]=f[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;gd;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmpg[i]=g[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;fd+gd<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp[i]=finv[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(cnt&lt;(fd+gd&lt;&lt;<span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        cnt&lt;&lt;=<span class="number">1</span>,limit++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;limit);</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(tmpf,cnt,<span class="number">1</span>),NTT(tmpg,cnt,<span class="number">1</span>),NTT(tmp,cnt,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">        tmpf[i]=(li)tmpf[i]*tmp[i]%MOD,tmpg[i]=(li)tmpg[i]*tmp[i]%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(tmpf,cnt,<span class="number">-1</span>),NTT(tmpg,cnt,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp[i]=i&lt;fd+gd<span class="number">-1</span>?(i&amp;<span class="number">1</span>?(MOD-finv[i]):finv[i]):<span class="number">0</span>;</span><br><span class="line">        tmpf[i]=i&lt;fd+gd<span class="number">-1</span>?(li)tmpf[i]*tmpg[i]%MOD*fact[i]%MOD:<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(tmpf,cnt,<span class="number">1</span>),NTT(tmp,cnt,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        res[i]=(li)tmpf[i]*tmp[i]%MOD,tmpf[i]=tmpg[i]=tmp[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(res,cnt,<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第二类斯特林数·行"><a href="#第二类斯特林数·行" class="headerlink" title="第二类斯特林数·行"></a>第二类斯特林数·行</h3><p><a href="https://www.luogu.org/problemnew/show/P5395" target="_blank" rel="noopener">Luogu P5395</a></p><p>不知道第二类斯特林数的去看组合专题（大坑）。</p><p>还记得上面那个有关于第二类斯特林数的结论吗？</p><p>可是这又与这题有什么关系呢？</p><p>很明显，$m\leq n$，所以把和式上界改一下，为后续做准备</p><script type="math/tex; mode=display">n^m=\sum\limits_{i=0}^{n}i!S^i_mC^i_n</script><p>然后再设$f(n)=n^m,g(i)=i!S^i_m$，那么有</p><script type="math/tex; mode=display">f(n)=\sum\limits_{i=0}^{n}C^i_ng(i)</script><p>这是什么？二项式反演啊，所以反演一下</p><script type="math/tex; mode=display">g(n)=\sum\limits_{i=0}^{n}(-1)^{n-i}C^i_nf(i)</script><p>再换回来</p><script type="math/tex; mode=display">n!S^n_m=\sum\limits_{i=0}^n(-1)^{n-i}i^mC^i_n</script><p>把阶乘除过去，把组合数拆出来</p><script type="math/tex; mode=display">S^n_m=\sum\limits_{i=0}^n\frac{1}{n!}\cdot\frac{n!}{i!(n-i)!}(-1)^{n-i}i^m</script><p>约个分</p><script type="math/tex; mode=display">S^n_m=\sum\limits_{i=0}^n\frac{(-1)^{n-i}i^m}{i!(n-i)!}</script><p>然后再拆一下</p><script type="math/tex; mode=display">S^n_m=\sum\limits_{i=0}^n\frac{(-1)^{n-i}}{(n-i)!}\cdot\frac{i^m}{i!}</script><p>很明显的卷积形式啊。。。$\texttt{NTT}$做就行啦qwq</p><p>时间复杂度$O(n\log n)$</p><p>代码呢？不见了。。。</p><h3 id="第二类斯特林数·列"><a href="#第二类斯特林数·列" class="headerlink" title="第二类斯特林数·列"></a>第二类斯特林数·列</h3><p><a href="https://www.luogu.org/problemnew/show/P5396" target="_blank" rel="noopener">Luogu P5396</a></p><p>我们先从一个小结论入手（从维基百科蒯的）:</p><script type="math/tex; mode=display">\sum\limits_{i=n}^{\infty}\frac{S_i^n}{i!}x^i=\frac{(e^x-1)^n}{n!}</script><p>证明留给读者做练习<del>这掩盖不了我不会证的事实</del></p><p>这里主要讲讲求法。</p><p>很明显的把$e^x-1$拆开</p><script type="math/tex; mode=display">e^x-1=\sum\limits_{i=1}^\infty\frac{x^n}{n!}</script><p>构造这样一个多项式，$n$次方之后对每一个系数乘上$n!$的逆元，再对于$x^i$的系数乘上$i!$就没了</p><p>时间复杂度$O(n\log n)$，代码无。</p><h3 id="第一类斯特林数·列"><a href="#第一类斯特林数·列" class="headerlink" title="第一类斯特林数·列"></a>第一类斯特林数·列</h3><p>先看一个恒等式</p><script type="math/tex; mode=display">(x+1)^n=(x+1)^n</script><p>你可能会想，这样一个恒等式与斯特林数有啥关系嘛。且听我慢慢道来。</p><p>左边二项式展开，右边化成指数形式，有</p><script type="math/tex; mode=display">\sum\limits_{i=0}^{n}C_n^ix^i=e^{n\ln (x+1)}</script><p>当$i&gt;n$时，显然，$C_n^i=0$，所以左边改变求和上界，右边泰勒展开，有</p><script type="math/tex; mode=display">\sum\limits_{i=0}^{\infty}C_n^ix^i=\sum\limits_{i=0}^{\infty}\frac{n^i\ln(x+1)^i}{i!}</script><p>把组合数拆成下降幂的形式</p><script type="math/tex; mode=display">\sum\limits_{i=0}^{\infty}\frac{x^i}{i!}n^{\underline i}=\sum\limits_{i=0}^{\infty}\frac{n^i\ln(x+1)^i}{i!}</script><p>下降幂拆成第一类斯特林数</p><script type="math/tex; mode=display">\sum\limits_{i=0}^{\infty}\frac{x^i}{i!}\sum\limits_{j=0}^{i}(-1)^{i-j}s_i^jn^i=\sum\limits_{i=0}^{\infty}\frac{n^i\ln(x+1)^i}{i!}</script><p>整理一下</p><script type="math/tex; mode=display">\sum\limits_{i=0}^{\infty}n^i\sum\limits_{j=i}^{\infty}\frac{(-1)^{j-i}s_j^ix^j}{j!}=\sum\limits_{i=0}^{\infty}\frac{n^i\ln(x+1)^i}{i!}</script><p>两边约掉</p><script type="math/tex; mode=display">\sum\limits_{j=i}^{\infty}\frac{(-1)^{j-i}s_j^ix^j}{j!}=\frac{\ln(x+1)^i}{i!}</script><p>这样就没了啊。。。用多项式$\ln$和快速幂做，时间复杂度$O(n\log n)$</p><h3 id="第一类斯特林数·行"><a href="#第一类斯特林数·行" class="headerlink" title="第一类斯特林数·行"></a>第一类斯特林数·行</h3><p><a href="https://www.luogu.org/problemnew/show/P5408" target="_blank" rel="noopener">Luogu P5408</a></p><p>应<a href="http://m-sea-blog.com/" target="_blank" rel="noopener"><font color="black">$\texttt{M}$</font><font color="red">$\texttt{_sea}$</font></a>的要求，这里终于不咕咕了。</p><p>这里可是最最最卡常的地方了！</p><p>首先，我们可以自然的想到一个做法。原理是这样</p><script type="math/tex; mode=display">x^{\overline n}=\sum\limits_{i=0}^ns_n^ix^i</script><p>而</p><script type="math/tex; mode=display">x^{\overline n}=\prod_{i=0}^{n-1}(x+i)</script><p>所以考虑直接分治乘法即可，时间复杂度$O(n\log^2n)$</p><p>可是这样过不去。考虑倍增，有</p><script type="math/tex; mode=display">x^{\overline{2n}}=x^{\overline n}(x+n)^{\overline n}</script><p>假设$F(x)=x^{\overline n}$，我们当前的目标是求出$F(x+n)$，所以</p><script type="math/tex; mode=display">F(x+n)=\sum\limits_{i=0}^{n}f_i(x+n)^i</script><p>强行展开</p><script type="math/tex; mode=display">F(x+n)=\sum\limits_{i=0}^{n}f_i\sum\limits_{j=0}^{i}C_i^jn^{i-j}x^j</script><p>合并一下</p><script type="math/tex; mode=display">F(x+n)=\sum\limits_{j=0}^{n}\frac{x^j}{j!}\sum\limits_{i=0}^{j}i!f_i\frac{n^{j-i}}{(j-i)!}</script><p>把$i!f_i$翻转一下做一次卷积即可。时间复杂度$O(n\log n)$，要卡卡常。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 多项式 </tag>
            
            <tag> FFT </tag>
            
            <tag> NTT </tag>
            
            <tag> 组合数学 </tag>
            
            <tag> 数论，数学 </tag>
            
            <tag> Stirling数 </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P2495」[SDOI2011]消耗战</title>
      <link href="/2019/06/19/%E3%80%8CLuogu-P2495%E3%80%8D-SDOI2011-%E6%B6%88%E8%80%97%E6%88%98/"/>
      <url>/2019/06/19/%E3%80%8CLuogu-P2495%E3%80%8D-SDOI2011-%E6%B6%88%E8%80%97%E6%88%98/</url>
      
        <content type="html"><![CDATA[<p>给定一棵有$n$个节点的带边权树和$q$组询问，第$i$条边的边权为$w_i$。对于每组询问，给定$m$个关键点$k_i$，你要给出一个边集使得割掉这些边会$1$号节点无法到达任意一个关键点。<br>为了方便，你只需要求出这个边集所包含的边的最小边权就行了。</p><p>$\texttt{Data Range}:2\leq 2\leq 2.5\times 10^5,m\geq 1,\sum k_i\leq 5\times 10^5,w_i\leq 10^5$<br><a id="more"></a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>生地终于考完了，我是不能阿克的。</p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.org/problemnew/show/P2495" target="_blank" rel="noopener">Luogu P2495</a></p><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=2286" target="_blank" rel="noopener">BZOJ 2286</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这道题普通$\texttt{dp}$显然是$O(nm)$的，布星，只有$\texttt{40 pts}$，吸氧后还是只有$\texttt{50 pts}$。</p><p>所以说，怎么做呢？</p><p>注意到，$\sum k_i\leq 5\times 10^5$，所以，这道题能不能考虑对关键点动(luan)动(gao)手(yi)脚(xia)呢？</p><p>没错，是可以的。手玩样例可以发现，有很多点是没有用到的，于是，何不建一棵新的树，使得这棵树只包含所有用到的点呢？</p><p>这是可行的。我们想建的树，就叫做<strong>虚树</strong>。</p><h4 id="虚树的建立"><a href="#虚树的建立" class="headerlink" title="虚树的建立"></a>虚树的建立</h4><p>首先，第一个问题，虚树上究竟会有哪些点？</p><p>很明显，为了要维持原来的树的祖先关系，所有点间两两的$\texttt{lca}$也要算上。</p><p>所以说，建树的复杂度是$O(m^2\log n)$的？</p><p>非也，非也。把所有的标记点按$\texttt{dfs}$序排序，在相邻两点求$\texttt{lca}$即可。证明略。</p><p>于是建树的复杂度变成了$O(m\log n)$。实际操作的话就用单调栈维护一下就好了，$\texttt{dp}$的话，还是原来那么做呀。</p><p>时间复杂度$O(\sum k\log \sum k)$</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> li;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">2.5e5</span>+<span class="number">51</span>;</span><br><span class="line"><span class="keyword">const</span> li inf=<span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    ll to,prev;</span><br><span class="line">    ll dist;</span><br><span class="line">&#125;;</span><br><span class="line">Edge ed[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line">ll nc,qcnt,cnt,tot,cur,tp,from,to,dist;</span><br><span class="line">ll last[MAXN],fa[MAXN],depth[MAXN],size[MAXN],heavy[MAXN],top[MAXN];</span><br><span class="line">ll dfn[MAXN],st[MAXN],key[MAXN];</span><br><span class="line">li minn[MAXN];</span><br><span class="line"><span class="built_in">vector</span>&lt;ll&gt; vtree[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(ll from,ll to,ll dist)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ed[++tot].prev=last[from];</span><br><span class="line">    ed[tot].to=to;</span><br><span class="line">    ed[tot].dist=dist;</span><br><span class="line">    last[from]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(ll node,ll f,ll dep)</span></span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    fa[node]=f,depth[node]=dep,size[node]=<span class="number">1</span>;</span><br><span class="line">    ll maxn=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=last[node];i;i=ed[i].prev)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ed[i].to!=f)</span><br><span class="line">        &#123;</span><br><span class="line">            minn[ed[i].to]=min(minn[node],(li)ed[i].dist);</span><br><span class="line">            dfs(ed[i].to,node,dep+<span class="number">1</span>);</span><br><span class="line">            size[node]+=size[ed[i].to];</span><br><span class="line">            <span class="keyword">if</span>(size[ed[i].to]&gt;maxn)</span><br><span class="line">            &#123;</span><br><span class="line">                heavy[node]=ed[i].to,maxn=size[ed[i].to];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ddfs</span><span class="params">(ll node,ll link)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    top[node]=link,dfn[node]=++cur;</span><br><span class="line">    <span class="keyword">if</span>(!heavy[node])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ddfs(heavy[node],link);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=last[node];i;i=ed[i].prev)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ed[i].to!=fa[node]&amp;&amp;ed[i].to!=heavy[node])</span><br><span class="line">        &#123;</span><br><span class="line">            ddfs(ed[i].to,ed[i].to);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">LCA</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(depth[top[x]]&lt;depth[top[y]])</span><br><span class="line">        &#123;</span><br><span class="line">            swap(x,y);</span><br><span class="line">        &#125;</span><br><span class="line">        x=fa[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> depth[x]&lt;depth[y]?x:y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tp==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        st[++tp]=node;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll lca=LCA(node,st[tp]);</span><br><span class="line">    <span class="keyword">if</span>(lca==st[tp])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(tp&gt;<span class="number">1</span>&amp;&amp;dfn[st[tp<span class="number">-1</span>]]&gt;=dfn[lca])</span><br><span class="line">    &#123;</span><br><span class="line">        vtree[st[tp<span class="number">-1</span>]].push_back(st[tp]),tp--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(st[tp]!=lca)</span><br><span class="line">    &#123;</span><br><span class="line">        vtree[lca].push_back(st[tp]),st[tp]=lca;</span><br><span class="line">    &#125;</span><br><span class="line">    st[++tp]=node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dfn[x]&lt;dfn[y];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">createVirtualTree</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sort(key,key+cnt,cmp);</span><br><span class="line">    st[tp=<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        push(key[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(tp&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        vtree[st[tp<span class="number">-1</span>]].push_back(st[tp]),tp--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> li <span class="title">DP</span><span class="params">(ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    li tmp=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(!vtree[node].size())</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">return</span> minn[node];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vtree[node].size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp+=DP(vtree[node][i]);</span><br><span class="line">    &#125;</span><br><span class="line">    vtree[node].clear();</span><br><span class="line">    <span class="keyword">return</span> min(minn[node],tmp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    nc=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nc<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    from=read(),to=read(),dist=read();</span><br><span class="line">    addEdge(from,to,dist),addEdge(to,from,dist);</span><br><span class="line">    &#125;</span><br><span class="line">    minn[<span class="number">1</span>]=inf,dfs(<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>),ddfs(<span class="number">1</span>,<span class="number">1</span>),qcnt=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;qcnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt=read();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cnt;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            key[j]=read();</span><br><span class="line">        &#125;</span><br><span class="line">        createVirtualTree();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,DP(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> BZOJ </tag>
            
            <tag> LCA </tag>
            
            <tag> DP </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 树链剖分 </tag>
            
            <tag> 虚树 </tag>
            
            <tag> 树形dp </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P5340」[TJOI2019]大中锋的游乐场</title>
      <link href="/2019/05/10/%E3%80%8CLuogu-P5340%E3%80%8D-TJOI2019-%E5%A4%A7%E4%B8%AD%E9%94%8B%E7%9A%84%E6%B8%B8%E4%B9%90%E5%9C%BA/"/>
      <url>/2019/05/10/%E3%80%8CLuogu-P5340%E3%80%8D-TJOI2019-%E5%A4%A7%E4%B8%AD%E9%94%8B%E7%9A%84%E6%B8%B8%E4%B9%90%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<p>一共有$T$组数据，每组数据给定一张有$n$个点，$m$条边的无向图，点$i$的类型为$type_i$，其中$type_1$要么为$1$，要么为$2$。一个人想从$s$走到$t$，如果他经过的点$i$中$type_i=1$，则$p_1++$，否则$p_2++$。求出在任何时候，$\vert p_1-p_2\vert\leq k$，为条件下的最短路径。（有点牵强，理解就好）</p><p>$\texttt{Data Range:}T\leq 10,n\leq 10^4,m\leq 10^5,k\leq 10$<br><a id="more"></a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.org/problemnew/show/P5340" target="_blank" rel="noopener">Luogu P5340</a></p><p><a href="https://loj.ac/problem/3107" target="_blank" rel="noopener">LOJ 3107</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>去搞生地会考了，所以近一个月没有更博客。（这就是理由？？）</p><p>设可乐的权值为$-1$，汉堡的权值为$1$，喝掉的可乐的数量减去吃掉的汉堡的数量为$p$。</p><p>由于$k\leq 10$，所以可以考虑将一个点$i$拆成$2k+1$个点$i_{-k},i_{-k+1},\cdots ,i_{-1},i_0,\cdots ,i_k$，这里，$i_l$是指到达$i$且$p=l$时的最短路总长。</p><p>加边的话就这么做：（这里假设现在加的边是$(i,j)$）</p><p>如果$j$卖汉堡的话，就从$i_l$连到$j_{l-1}$，其中$i_{-k}$不要连边，就像这样：</p><p><img src="/2019/05/10/「Luogu-P5340」-TJOI2019-大中锋的游乐场/graph.jpg" alt=""></p><p>如果$j$卖可乐的话，就从$i_l$连到$j_{l+1}$，其中$i_{k}$不要连边。</p><p>但是，这是个无向图啊，按照上面的连边方式，连出来的是个有向图，而这题的边又不对称。</p><p>所以说，在加边$(i,j)$时，按照上面的方法先加一条边，在把$i,j$换一下，就行了。</p><p>于是在新的图上跑一遍最短路就做完了。</p><p>但是，这里有一些地方需要注意：</p><p>首先是起点的问题，这个应该不用多说，在起点或终点也要买可乐或汉堡。</p><p>然后是终点的问题，答案是终点拆出来的每一个点的最短路的最小值。</p><p>最后，<strong>要特判$k=0$的情况！！！</strong></p><p>最最最后，<strong>多组数据，记得清零！！！</strong></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> li;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;li,ll&gt; pii;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">2.1e5</span>+<span class="number">51</span>;</span><br><span class="line"><span class="keyword">const</span> li inf=<span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">ll to,prev,dist;</span><br><span class="line">&#125;;</span><br><span class="line">priority_queue&lt;pii,<span class="built_in">vector</span>&lt;pii&gt;,greater&lt;pii&gt; &gt;pq;</span><br><span class="line">Edge ed[MAXN*<span class="number">10</span>];</span><br><span class="line">ll test,nc,ec,tot,k,from,to,dist;</span><br><span class="line">li res=inf;</span><br><span class="line">ll last[MAXN],type[MAXN],inQueue[MAXN];</span><br><span class="line">li minn[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(ll from,ll to,ll dist)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ed[++tot].prev=last[from];</span><br><span class="line">ed[tot].to=to;</span><br><span class="line">ed[tot].dist=dist;</span><br><span class="line">last[from]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">getID</span><span class="params">(ll node,ll wt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (node<span class="number">-1</span>)*(k*<span class="number">2</span>+<span class="number">1</span>)+wt+k+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(ll source)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll top;</span><br><span class="line">pq.push(make_pair(<span class="number">0</span>,source)),inQueue[source]=<span class="number">1</span>,minn[source]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!pq.empty())</span><br><span class="line">&#123;</span><br><span class="line">top=pq.top().second,pq.pop(),inQueue[top]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=last[top];i;i=ed[i].prev)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(minn[ed[i].to]&gt;minn[top]+ed[i].dist)</span><br><span class="line">&#123;</span><br><span class="line">minn[ed[i].to]=minn[top]+ed[i].dist;</span><br><span class="line"><span class="keyword">if</span>(!inQueue[ed[i].to])</span><br><span class="line">&#123;</span><br><span class="line">pq.push(make_pair(minn[ed[i].to],ed[i].to));</span><br><span class="line">inQueue[ed[i].to]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">nc=read(),ec=read(),k=read();</span><br><span class="line"><span class="keyword">if</span>(k==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=nc;i++)</span><br><span class="line">&#123;</span><br><span class="line">type[i]=read()==<span class="number">1</span>?<span class="number">1</span>:<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ec;i++)</span><br><span class="line">&#123;</span><br><span class="line">from=read(),to=read(),dist=read();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=-k;j&lt;=k;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((type[to]==<span class="number">-1</span>&amp;&amp;j==-k)||(type[to]==<span class="number">1</span>&amp;&amp;j==k))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">addEdge(getID(from,j),getID(to,j+type[to]),dist);</span><br><span class="line">&#125;</span><br><span class="line">swap(from,to);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=-k;j&lt;=k;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((type[to]==<span class="number">-1</span>&amp;&amp;j==-k)||(type[to]==<span class="number">1</span>&amp;&amp;j==k))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">addEdge(getID(from,j),getID(to,j+type[to]),dist);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">from=read(),to=read(),<span class="built_in">memset</span>(minn,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(minn));</span><br><span class="line">Dijkstra(getID(from,type[from]));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=-k;i&lt;=k;i++)</span><br><span class="line">&#123;</span><br><span class="line">res=min(res,minn[getID(to,i)]);</span><br><span class="line">&#125;</span><br><span class="line">res==inf?<span class="built_in">puts</span>(<span class="string">"-1"</span>):<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test=read();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;test;i++)</span><br><span class="line">&#123;</span><br><span class="line">solve();</span><br><span class="line">tot=<span class="number">0</span>,<span class="built_in">memset</span>(last,<span class="number">0</span>,<span class="keyword">sizeof</span>(last));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 最短路 </tag>
            
            <tag> Dijkstra </tag>
            
            <tag> 建图 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P5283」[十二省联考2019]异或粽子</title>
      <link href="/2019/04/27/%E3%80%8CLuogu-P5283%E3%80%8D-%E5%8D%81%E4%BA%8C%E7%9C%81%E8%81%94%E8%80%832019-%E5%BC%82%E6%88%96%E7%B2%BD%E5%AD%90/"/>
      <url>/2019/04/27/%E3%80%8CLuogu-P5283%E3%80%8D-%E5%8D%81%E4%BA%8C%E7%9C%81%E8%81%94%E8%80%832019-%E5%BC%82%E6%88%96%E7%B2%BD%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<p>给定一个长度为$n$的序列$a$,求出$a$的所有子序列中和最大的$k$个的和。</p><p>$\texttt{Data Range:}1\leq n\leq 5\times 10^5,1\leq k\leq \min\{\frac{n(n-1)}{2},2\times 10^5\},0\leq a_i\leq 2^32-1$<br><a id="more"></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 位运算 </tag>
            
            <tag> 可持久化 </tag>
            
            <tag> Trie </tag>
            
            <tag> 堆 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P5068」[Ynoi2015]我回来了</title>
      <link href="/2019/04/13/%E3%80%8CLuogu-P5068%E3%80%8D-Ynoi2015-%E6%88%91%E5%9B%9E%E6%9D%A5%E4%BA%86/"/>
      <url>/2019/04/13/%E3%80%8CLuogu-P5068%E3%80%8D-Ynoi2015-%E6%88%91%E5%9B%9E%E6%9D%A5%E4%BA%86/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p><del>这里没有珂朵莉的图片啊qwq</del></p><p>给定一个$n$个点$m$条边的无向图和$q$组询问。每组询问给定$k$个二元组$(x_i,y_i)$，求出图上有多少个点$u$与至少一个这次询问的二元组满足$u$到$x_i$的距离小于等于$y_i$。</p><p>$\texttt{Data Range:}n\leq 10^3,m\leq 10^5,q\leq 10^5,\sum k\leq 2.1\times 10^6$<br><!---more---></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p><del>生平第一次做Ynoi诶qwq</del></p><p>设$rch_{i,j}$为到$i$的最短距离为$j$的点组成的点集，很显然拿$\texttt{bitset}$维护。</p><p>而怎么求$rch_{i,j}$呢？</p><p>好像只要跑$n$遍$\texttt{bfs}$就行啦qwq。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> BFS </tag>
            
            <tag> Ynoi </tag>
            
            <tag> 基础算法 </tag>
            
            <tag> 搜索 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P5268」[SNOI2017]一个简单的询问</title>
      <link href="/2019/04/12/%E3%80%8CLuogu-P5268%E3%80%8D-SNOI2017-%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E8%AF%A2%E9%97%AE/"/>
      <url>/2019/04/12/%E3%80%8CLuogu-P5268%E3%80%8D-SNOI2017-%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E8%AF%A2%E9%97%AE/</url>
      
        <content type="html"><![CDATA[<p>给定一个长度为$n$的序列$a$和$q$组询问，对于每组询问，给定$l_1,r_1,l_2,r_2$，求</p><script type="math/tex; mode=display">\sum\limits_{x=0}^{\infty}\operatorname{get}(l_1,r_1,x)\cdot\operatorname{get}(l_2,r_2,x)</script><p>其中，$\operatorname{get}(l,r,x)$表示在区间$[l,r]$中，数字$x$出现的次数。</p><p><strong>注意：答案有可能超过$\texttt{int}$的最大值。</strong></p><p>$\texttt{Data Range:}n,q\leq 5\times 10^4,1\leq a_i\leq n,1\leq l_1\leq r_1\leq n,1\leq l_2\leq r_2\leq n$<br><a id="more"></a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.org/problemnew/show/P5268" target="_blank" rel="noopener">Luogu P5268</a></p><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=5016" target="_blank" rel="noopener">BZOJ 5016</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p><del>文化课选手$\texttt{Karry5307}$终于更博了qwq!</del></p><p>首先，显然会有</p><script type="math/tex; mode=display">\operatorname{get}(l,r,x)=\sum\limits_{i=l}^{r}[a_i=x]</script><p>右边的和式是可以拆成前缀和的形式的，就暴力拆一下，于是有</p><script type="math/tex; mode=display">\operatorname{get}(l,r,x)=\operatorname{get}(1,r,x)-\operatorname{get}(1,l-1,x)</script><p>我们定义一个$\operatorname{g}(r,x)=\operatorname{get}(1,r,x)$，拆一下式子，有</p><script type="math/tex; mode=display">\sum\limits_{x=0}^{\infty}(\operatorname{g}(r_1,x)-\operatorname{g}(l_1-1,x))\cdot(\operatorname{g}(r_2,x)-\operatorname{g}(l_2-1,x))</script><p>展开一下里面的括号</p><script type="math/tex; mode=display">\sum\limits_{x=0}^{\infty}(\operatorname{g}(r_1,x)-\operatorname{g}(l_1-1,x))\cdot(\operatorname{g}(r_2,x)-\operatorname{g}(l_2-1,x))</script><script type="math/tex; mode=display">\sum\limits_{x=0}^{\infty}\operatorname{g}(r_1,x)\operatorname{g}(r_2,x)-\operatorname{g}(r_1,x)\operatorname{g}(l_2-1,x)-\operatorname{g}(r_2,x)\operatorname{g}(l_1-1,x)+\operatorname{g}(l_2-1,x)\operatorname{g}(l_1-1,x)</script><p>拆成四个询问维护一下<del>就好了</del></p><p>这里说说转移。</p><p>首先考虑从$\sum\limits_{x=0}^{\infty}\operatorname{g}(l,x)\operatorname{g}(r,x)$转移到$\sum\limits_{x=0}^{\infty}\operatorname{g}(l+1,x)\operatorname{g}(r,x)$会发生什么。</p><p>为了接下来好懂，这里开两个数组，$cntl$和$cntr$。$cntl_i$指$a_1\sim a_l$中$i$的出现次数，$cntr_i$，相应的为$a_1\sim a_r$中$i$的出现次数。</p><p>不难发现</p><script type="math/tex; mode=display">\sum\limits_{x=0}^{\infty}\operatorname{g}(l+1,x)\operatorname{g}(r,x)-\sum\limits_{x=0}^{\infty}\operatorname{g}(l+1,x)\operatorname{g}(r,x)=\operatorname{g}(r,a_{l+1})</script><p>这个的话，把求和符号展开一下就行了。</p><p>所以说，这样的转移应该是$++cntl_{a_{l+1}},res+=cntr_{a_{l+1}}$的。</p><p>剩下三种情况在这里就不详细解释了，推的方法也是这个样子的。</p><p>于是就可以完结撒花了qwq!</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> li;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">5e4</span>+<span class="number">51</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span>&#123;</span></span><br><span class="line">    ll l,r,ord,sign;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> Query &amp;rhs)<span class="keyword">const</span>;</span><br><span class="line">&#125;;</span><br><span class="line">Query qry[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line">ll cnt,qcnt,qtot,blockSize,l,r,lx,rx,ptrl,ptrr;</span><br><span class="line">li ress;</span><br><span class="line">ll num[MAXN],cntl[MAXN&lt;&lt;<span class="number">2</span>],cntr[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line">li res[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> Query::<span class="keyword">operator</span> &lt;(<span class="keyword">const</span> Query &amp;rhs)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (r/blockSize)==(rhs.r/blockSize)?l&lt;rhs.l:r&lt;rhs.r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(ll cur,ll op)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    op?++cntr[num[cur]]:++cntl[num[cur]];</span><br><span class="line">    ress+=op?cntl[num[cur]]:cntr[num[cur]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(ll cur,ll op)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ress-=op?cntl[num[cur]]:cntr[num[cur]];</span><br><span class="line">    op?cntr[num[cur]]--:cntl[num[cur]]--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    blockSize=<span class="built_in">sqrt</span>((cnt=read()));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        num[i]=read();</span><br><span class="line">    &#125;</span><br><span class="line">    qcnt=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;qcnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        l=read(),r=read(),lx=read(),rx=read();</span><br><span class="line">        qry[++qtot]=(Query)&#123;r,rx,i,<span class="number">1</span>&#125;;</span><br><span class="line">        qry[++qtot]=(Query)&#123;l<span class="number">-1</span>,rx,i,<span class="number">-1</span>&#125;;</span><br><span class="line">        qry[++qtot]=(Query)&#123;r,lx<span class="number">-1</span>,i,<span class="number">-1</span>&#125;;</span><br><span class="line">        qry[++qtot]=(Query)&#123;l<span class="number">-1</span>,lx<span class="number">-1</span>,i,<span class="number">1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=qtot;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(qry[i].l&lt;qry[i].r)</span><br><span class="line">        &#123;</span><br><span class="line">            swap(qry[i].l,qry[i].r);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(qry+<span class="number">1</span>,qry+qtot+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=qtot;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(ptrl&lt;qry[i].l)</span><br><span class="line">        &#123;</span><br><span class="line">            add(++ptrl,<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(ptrl&gt;qry[i].l)</span><br><span class="line">        &#123;</span><br><span class="line">            del(ptrl--,<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(ptrr&lt;qry[i].r)</span><br><span class="line">        &#123;</span><br><span class="line">            add(++ptrr,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(ptrr&gt;qry[i].r)</span><br><span class="line">        &#123;</span><br><span class="line">            del(ptrr--,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        res[qry[i].ord]+=qry[i].sign*ress;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;qcnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,res[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 分块 </tag>
            
            <tag> BZOJ，各省省选 </tag>
            
            <tag> SNOI </tag>
            
            <tag> 莫队 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P3804」【模板】后缀自动机</title>
      <link href="/2019/04/05/%E3%80%8CLuogu-P3804%E3%80%8D%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
      <url>/2019/04/05/%E3%80%8CLuogu-P3804%E3%80%8D%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<p>给定一个只用小写字母组成的串$S$，求出$S$中所有出现次数大于$1$的子串的出现次数与它的长度的乘积的最大值。</p><p>$\texttt{Data Range:}\vert S\vert \leq 10^6$<br><a id="more"></a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.org/problemnew/solution/P3804" target="_blank" rel="noopener">Luogu P3804</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>首先把后缀自动机建出来，然后考虑对每个自动机上的节点求一遍$\texttt{size}$，答案就是$\max\{len\times size\}$啦qwq</p><p>顺便说一句，这种方法会在后面的文章上频繁使用，注意！</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> li;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">2e6</span>+<span class="number">51</span>;</span><br><span class="line">ll length,k,cur;</span><br><span class="line">li res;</span><br><span class="line">ll prefix[MAXN],barrel[MAXN],size[MAXN];</span><br><span class="line"><span class="keyword">char</span> str[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> SuffixAutomaton&#123;</span><br><span class="line">    <span class="keyword">const</span> ll sigmaSize=<span class="number">27</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">        ll son[sigmaSize];</span><br><span class="line">        ll fa,length;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SuffixAutomaton</span>&#123;</span></span><br><span class="line">        Node nd[MAXN];</span><br><span class="line">        ll last,tot;</span><br><span class="line">        SuffixAutomaton()</span><br><span class="line">        &#123;</span><br><span class="line">            last=tot=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">extend</span><span class="params">(ll ch)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            ll p=last,nxt=++tot,nxt2,k;</span><br><span class="line">            last=nxt,nd[nxt].length=nd[p].length+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(p&amp;&amp;!nd[p].son[ch])</span><br><span class="line">            &#123;</span><br><span class="line">                nd[p].son[ch]=nxt,p=nd[p].fa;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!p)</span><br><span class="line">            &#123;</span><br><span class="line">                nd[nxt].fa=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                k=nd[p].son[ch];</span><br><span class="line">                <span class="keyword">if</span>(nd[p].length+<span class="number">1</span>==nd[k].length)</span><br><span class="line">                &#123;</span><br><span class="line">                    nd[nxt].fa=k;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    nxt2=++tot,nd[nxt2]=nd[k];</span><br><span class="line">                    nd[nxt2].length=nd[p].length+<span class="number">1</span>,nd[k].fa=nd[nxt].fa=nxt2;</span><br><span class="line">                    <span class="keyword">while</span>(p&amp;&amp;nd[p].son[ch]==k)</span><br><span class="line">                    &#123;</span><br><span class="line">                        nd[p].son[ch]=nxt2,p=nd[p].fa;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            size[nxt]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">SuffixAutomaton::SuffixAutomaton sam;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,str+<span class="number">1</span>);</span><br><span class="line">    length=<span class="built_in">strlen</span>(str+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=length;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sam.extend(str[i]<span class="number">-97</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    k=sam.tot;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        prefix[sam.nd[i].length]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        prefix[i]+=prefix[i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        barrel[prefix[sam.nd[i].length]--]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=k;i;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        cur=barrel[i];</span><br><span class="line">        size[sam.nd[cur].fa]+=size[cur];</span><br><span class="line">        <span class="keyword">if</span>(size[cur]&gt;<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            res=max(res,(li)size[cur]*sam.nd[cur].length);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>,res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 后缀自动机，SAM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P4171」[JSOI2010]满汉全席</title>
      <link href="/2019/04/04/%E3%80%8CLuogu-P4171%E3%80%8D-JSOI2010-%E6%BB%A1%E6%B1%89%E5%85%A8%E5%B8%AD/"/>
      <url>/2019/04/04/%E3%80%8CLuogu-P4171%E3%80%8D-JSOI2010-%E6%BB%A1%E6%B1%89%E5%85%A8%E5%B8%AD/</url>
      
        <content type="html"><![CDATA[<p>有$n$种食材和$m$位评委。每一位选手要将$n$种食材全部做成满式或汉式料理。如果一位选手做出的菜符合每位评委所喜好的两种菜品中的一种，那么说这位选手是通过考核的。</p><p>一共有$T$组数据，对于每组数据，给定$m$位评委所喜好的菜品，问是否有一种做法，使得能通过考核。</p><p>$\texttt{Data Range:}T\leq 10,n\leq 100,m\leq 1000$<br><a id="more"></a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.org/problemnew/show/P4171" target="_blank" rel="noopener">Luogu P4171</a></p><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=1823" target="_blank" rel="noopener">BZOJ 1823</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>设$x_i$为$[$第$i$种食材做汉式$]$，那么评委的限制就变成$x_i$为真或者$x_j$为假这样的形式了。</p><p>于是，可以把题意转换成是否存在一组$x_i$的取值，使得这些取值能满足所有约束条件。</p><p>这就是个$\texttt{2-SAT}$的板子题了。</p><p>唯一需要注意的是<strong>多组数据记得清零！！！</strong></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">1e4</span>+<span class="number">51</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    ll to,prev;</span><br><span class="line">&#125;;</span><br><span class="line">Edge ed[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="built_in">stack</span>&lt;ll&gt;st;</span><br><span class="line">ll test,cnt,ccnt,tot,num,sccCnt,x,y,vx,vy;</span><br><span class="line">ll last[MAXN&lt;&lt;<span class="number">1</span>],dfn[MAXN&lt;&lt;<span class="number">1</span>],low[MAXN&lt;&lt;<span class="number">1</span>],belong[MAXN&lt;&lt;<span class="number">1</span>],ins[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">getType</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(ch!=<span class="string">'m'</span>&amp;&amp;ch!=<span class="string">'h'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ch==<span class="string">'h'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(ll from,ll to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ed[++tot].prev=last[from];</span><br><span class="line">    ed[tot].to=to;</span><br><span class="line">    last[from]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addOr</span><span class="params">(ll x,ll y,ll vx,ll vy)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    addEdge(y+cnt*(vy^<span class="number">1</span>),x+cnt*(vx&amp;<span class="number">1</span>));</span><br><span class="line">    addEdge(x+cnt*(vx^<span class="number">1</span>),y+cnt*(vy&amp;<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll nd;</span><br><span class="line">    dfn[node]=low[node]=++num;</span><br><span class="line">    st.push(node),ins[node]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=last[node];i;i=ed[i].prev)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[ed[i].to])</span><br><span class="line">        &#123;</span><br><span class="line">            Tarjan(ed[i].to);</span><br><span class="line">            low[node]=min(low[node],low[ed[i].to]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(ins[ed[i].to])</span><br><span class="line">            &#123;</span><br><span class="line">                low[node]=min(low[node],dfn[ed[i].to]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dfn[node]==low[node])</span><br><span class="line">    &#123;</span><br><span class="line">        sccCnt++;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            nd=st.top(),st.pop();</span><br><span class="line">            ins[nd]=<span class="number">0</span>,belong[nd]=sccCnt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(node!=nd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt=read(),ccnt=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ccnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        vx=getType(),x=read(),vy=getType(),y=read();</span><br><span class="line">        addOr(x,y,vx,vy);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=(cnt&lt;&lt;<span class="number">1</span>);i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[i])</span><br><span class="line">        &#123;</span><br><span class="line">            Tarjan(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(belong[i]==belong[i+cnt])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"BAD"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"GOOD"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(ed,<span class="number">0</span>,<span class="keyword">sizeof</span>(ed)),<span class="built_in">memset</span>(last,<span class="number">0</span>,<span class="keyword">sizeof</span>(last));</span><br><span class="line">    <span class="built_in">memset</span>(dfn,<span class="number">0</span>,<span class="keyword">sizeof</span>(dfn)),<span class="built_in">memset</span>(low,<span class="number">0</span>,<span class="keyword">sizeof</span>(low)); </span><br><span class="line">    <span class="built_in">memset</span>(belong,<span class="number">0</span>,<span class="keyword">sizeof</span>(belong)),<span class="built_in">memset</span>(ins,<span class="number">0</span>,<span class="keyword">sizeof</span>(ins)); </span><br><span class="line">    tot=num=sccCnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!st.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        st.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    test=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;test;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        solve(),clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> BZOJ </tag>
            
            <tag> 图论 </tag>
            
            <tag> 强连通分量 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> JSOI </tag>
            
            <tag> 各省省选 </tag>
            
            <tag> 2-SAT </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P4555」[国家集训队]最长双回文串</title>
      <link href="/2019/04/01/%E3%80%8CLuogu-P4555%E3%80%8D-%E5%9B%BD%E5%AE%B6%E9%9B%86%E8%AE%AD%E9%98%9F-%E6%9C%80%E9%95%BF%E5%8F%8C%E5%9B%9E%E6%96%87%E4%B8%B2/"/>
      <url>/2019/04/01/%E3%80%8CLuogu-P4555%E3%80%8D-%E5%9B%BD%E5%AE%B6%E9%9B%86%E8%AE%AD%E9%98%9F-%E6%9C%80%E9%95%BF%E5%8F%8C%E5%9B%9E%E6%96%87%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<p>给定一个串$S$，求$S$中最长的子串$T$，使得可以将$T$分为两个长度大于等于$1$的回文串，只需输出$T$的长度即可。</p><p>$\texttt{Data Range:}2\leq \vert S\vert \leq 10^5$<br><a id="more"></a><br>很明显的回文树题。<del>只是因为窝不会马拉车</del></p><p>考虑枚举分的位置，假设以这个位置结尾的回文子串为$X$，这个位置开头的回文子串为$Y$，那么有</p><p>贪心地考虑，如果这个$X$或者$Y$的长度不是最大的话，那么它绝对不是答案，因为$X$或者$Y$还可以继续扩展。所以，这个位置的答案为$\max\{\vert X\vert +\vert Y\vert\}$。</p><p>于是预处理出位置$i$的$pre_i=\max\{\vert X\vert\}$和$suf_i=\max\{\vert Y\vert\}$。</p><p>然后很明显的扫一遍，求出$\max\{pre_i+suf_{i+1}\}$就好了。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">2e5</span>+<span class="number">51</span>;</span><br><span class="line">ll length,res;</span><br><span class="line">ll prefix[MAXN],suffix[MAXN]; </span><br><span class="line"><span class="keyword">char</span> str[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> PalindromicTree&#123;</span><br><span class="line"><span class="keyword">const</span> ll sigmaSize=<span class="number">27</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">ll son[sigmaSize];</span><br><span class="line">ll fa,length;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PalindromicTree</span>&#123;</span></span><br><span class="line">Node nd[MAXN];</span><br><span class="line">ll last,tot;</span><br><span class="line">PalindromicTree()</span><br><span class="line">&#123;</span><br><span class="line">nd[<span class="number">0</span>].fa=nd[<span class="number">1</span>].fa=<span class="number">1</span>;</span><br><span class="line">nd[tot=<span class="number">1</span>].length=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">extend</span><span class="params">(ll ch,ll length,<span class="keyword">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll p=last,nxt,k;</span><br><span class="line"><span class="keyword">while</span>(str[length-nd[p].length<span class="number">-1</span>]!=str[length])</span><br><span class="line">&#123;</span><br><span class="line">p=nd[p].fa;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!nd[p].son[ch])</span><br><span class="line">&#123;</span><br><span class="line">nxt=++tot,k=nd[p].fa;</span><br><span class="line">nd[nxt].length=nd[p].length+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">while</span>(str[length-nd[k].length<span class="number">-1</span>]!=str[length])</span><br><span class="line">&#123;</span><br><span class="line">k=nd[k].fa;</span><br><span class="line">&#125;</span><br><span class="line">nd[nxt].fa=nd[k].son[ch],nd[p].son[ch]=nxt;</span><br><span class="line">&#125;</span><br><span class="line">last=nd[p].son[ch];</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">PalindromicTree::PalindromicTree pt,pt2;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,str+<span class="number">1</span>),length=<span class="built_in">strlen</span>(str+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=length;i++)</span><br><span class="line">&#123;</span><br><span class="line">pt.extend(str[i]<span class="number">-97</span>,i,str),prefix[i]=pt.nd[pt.last].length;</span><br><span class="line">&#125;</span><br><span class="line">reverse(&amp;str[<span class="number">1</span>],&amp;str[length+<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=length;i++)</span><br><span class="line">&#123;</span><br><span class="line">pt2.extend(str[i]<span class="number">-97</span>,i,str),suffix[length-i+<span class="number">1</span>]=pt2.nd[pt2.last].length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;length;i++)</span><br><span class="line">&#123;</span><br><span class="line">res=max(res,prefix[i]+suffix[i+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> BZOJ </tag>
            
            <tag> 字符串 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 回文树 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P4091」[HEOI2016/TJOI2016]求和</title>
      <link href="/2019/03/28/%E3%80%8CLuogu-P4091%E3%80%8D-HEOI2016-TJOI2016-%E6%B1%82%E5%92%8C/"/>
      <url>/2019/03/28/%E3%80%8CLuogu-P4091%E3%80%8D-HEOI2016-TJOI2016-%E6%B1%82%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<p>给定整数$n$，求$\sum\limits_{i=0}^{n}\sum\limits_{j=0}^{i}S(i,j)\times 2^j\times j!\bmod{998244353}$，其中$S(i,j)$为第二类$\texttt{Stirling}$数。</p><p>$\texttt{Data Range:}n\leq 10^5$<br><a id="more"></a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>之前的题目好多都没放链接，之后再补qwq。</p><p><a href="https://www.luogu.org/problemnew/show/P4091" target="_blank" rel="noopener">Luogu P4091</a></p><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=4555" target="_blank" rel="noopener">BZOJ 4555</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这么一长串式子看起来挺不爽，所以可以考虑推公式。</p><p>根据当$n&lt;m$时$S(n,m)=0$，考虑将$j$的范围改一下</p><script type="math/tex; mode=display">\sum\limits_{i=0}^{n}\sum\limits_{j=0}^{i}S(i,j)\times 2^j\times j!</script><p>换个枚举顺序，再把$2^j\times j$提出来</p><script type="math/tex; mode=display">\sum\limits_{j=0}^{n}2^j\times j!\sum\limits_{i=0}^{n}S(i,j)</script><p>把$\texttt{Stirling}$数展开</p><script type="math/tex; mode=display">\sum\limits_{j=0}^{n}2^j\times j!\sum\limits_{i=0}^{n}\frac{1}{j!}\sum\limits_{k=0}^{n}(-1)^kC^k_j(j-k)^i</script><p>这个组合数看起来极其不好，展开一下，顺便把$j!$消掉</p><script type="math/tex; mode=display">\sum\limits_{j=0}^{n}2^j\sum\limits_{i=0}^{n}\sum\limits_{k=0}^{n}(-1)^k\frac{j!(j-k)^i}{k!(j-k)!}</script><p>交换一下$k$和$i$的枚举顺序，把与$i$无关的提出来</p><script type="math/tex; mode=display">\sum\limits_{j=0}^{n}2^j\times j!\sum\limits_{k=0}^{n}(-1)^k\frac{1}{k!(j-k)!}\sum\limits_{i=0}^{n}(j-k)^i</script><p>把$j-k$提进去，顺便用等比数列求和消掉关与$i$的枚举</p><script type="math/tex; mode=display">\sum\limits_{j=0}^{n}2^j\times j!\sum\limits_{k=0}^{n}(-1)^k\frac{1}{k!}\times\frac{(j-k)^{n+1}-1}{(j-k)!(j-k+1)}</script><p>设$f_i=\frac{(-1)^i}{i!},g_i=\frac{i^{n+1}-1}{i!(i-1)}$，那么就会有</p><script type="math/tex; mode=display">\sum\limits_{j=0}^{n}2^j\times j!\sum\limits_{k=0}^{n}f_kg_{j-k}</script><p>发现右边是一个卷积，使用$\texttt{NTT}$计算即可，时间复杂度$O(n\log n)$。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> li;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">3e5</span>+<span class="number">51</span>,MOD=<span class="number">998244353</span>,G=<span class="number">3</span>,INVG=<span class="number">332748118</span>;</span><br><span class="line">ll fd,ccnt,limit,rres;</span><br><span class="line">ll f[MAXN],g[MAXN],res[MAXN],rev[MAXN],inv[MAXN],fact[MAXN],finv[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">qpow</span><span class="params">(ll base,ll exponent)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    li res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(exponent)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(exponent&amp;<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            res=(li)res*base%MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        base=(li)base*base%MOD,exponent&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">(ll ccnt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fact[<span class="number">0</span>]=fact[<span class="number">1</span>]=finv[<span class="number">0</span>]=finv[<span class="number">1</span>]=inv[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=ccnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        fact[i]=(li)fact[i<span class="number">-1</span>]*i%MOD;</span><br><span class="line">        inv[i]=(li)inv[MOD%i]*(MOD-MOD/i)%MOD;</span><br><span class="line">        finv[i]=(li)finv[i<span class="number">-1</span>]*inv[i]%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">NTT</span><span class="params">(ll *cp,ll cnt,ll inv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll cur=<span class="number">0</span>,res=<span class="number">0</span>,omg=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;rev[i])</span><br><span class="line">        &#123;</span><br><span class="line">            swap(cp[i],cp[rev[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=cnt;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cur=i&gt;&gt;<span class="number">1</span>,res=qpow(inv==<span class="number">1</span>?G:INVG,(MOD<span class="number">-1</span>)/i);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> ll *p=cp;p!=cp+cnt;p+=i)</span><br><span class="line">        &#123;</span><br><span class="line">            omg=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cur;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                ll t=(li)omg*p[j+cur]%MOD,t2=p[j];</span><br><span class="line">                p[j+cur]=(t2-t+MOD)%MOD,p[j]=(t2+t)%MOD;</span><br><span class="line">                omg=(li)omg*res%MOD;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(inv==<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ll invl=qpow(cnt,MOD<span class="number">-2</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=cnt;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            cp[i]=(li)cp[i]*invl%MOD;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fd=read(),ccnt=<span class="number">1</span>,limit=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(ccnt&lt;(fd&lt;&lt;<span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        ccnt&lt;&lt;=<span class="number">1</span>,limit++;</span><br><span class="line">    &#125;</span><br><span class="line">    setup(ccnt);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=fd;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        f[i]=i&amp;<span class="number">1</span>?MOD-finv[i]:finv[i];</span><br><span class="line">        g[i]=i==<span class="number">0</span>?<span class="number">1</span>:(i==<span class="number">1</span>?fd+<span class="number">1</span>:(li)(qpow(i,fd+<span class="number">1</span>)<span class="number">-1</span>)*inv[i<span class="number">-1</span>]%MOD*finv[i]%MOD);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ccnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;limit);</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(f,ccnt,<span class="number">1</span>),NTT(g,ccnt,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=ccnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        res[i]=(li)f[i]*g[i]%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(res,ccnt,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=fd;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        rres=(rres+(li)qpow(<span class="number">2</span>,i)*fact[i]%MOD*res[i]%MOD)%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,rres);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> BZOJ </tag>
            
            <tag> 多项式 </tag>
            
            <tag> FFT </tag>
            
            <tag> NTT </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 各省省选 </tag>
            
            <tag> 组合数学 </tag>
            
            <tag> HEOI </tag>
            
            <tag> TJOI </tag>
            
            <tag> 数论，数学 </tag>
            
            <tag> Stirling数 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HNOI2019滚粗记</title>
      <link href="/2019/03/28/HNOI2019%E6%BB%9A%E7%B2%97%E8%AE%B0/"/>
      <url>/2019/03/28/HNOI2019%E6%BB%9A%E7%B2%97%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>别人都说它们是去划水的，其实真正去划水的是我。</p><p>自己这一个月，天天被<font color="black">$\texttt{x}$</font><font color="red">$\texttt{gzc}$</font>，<font color="black">$\texttt{h}$</font><font color="red">$\texttt{yj}$</font>，<font color="black">$\texttt{n}$</font><font color="red">$\texttt{zr}$</font>和<font color="black">$\texttt{M}$</font><font color="red">$\texttt{_sea}$</font>等神仙吊打了qwq</p><a id="more"></a><h3 id="texttt-Day-1"><a href="#texttt-Day-1" class="headerlink" title="$\texttt{Day -1}$"></a>$\texttt{Day -1}$</h3><p>上午考$\texttt{ZJOI2019 Day 1}$，而且还只有$\texttt{4h}$，像窝这种不会打麻将的老年选手只能$\texttt{boom 0}$啦qwq</p><h3 id="texttt-Day-0"><a href="#texttt-Day-0" class="headerlink" title="$\texttt{Day 0}$"></a>$\texttt{Day 0}$</h3><p>上午看了一上午的多项式和$\texttt{SAM}$，不得不说我的多项式总结是真的长，写了$\texttt{3.4k}$字qwq</p><p>于是我又看了一下午的树剖和$\texttt{LCT}$，感觉还是有点玄学吧qwq</p><p><del>写博客让人清醒，看题目使人犯困</del></p><p>所以说，$\texttt{++HNOI2019.rp!}$</p><h3 id="texttt-Day-1-1"><a href="#texttt-Day-1-1" class="headerlink" title="$\texttt{Day 1}$"></a>$\texttt{Day 1}$</h3><p>早上面基了<font color="black">$\texttt{t}$</font><font color="red">$\texttt{br}$</font>等人，<font color="black">$\texttt{t}$</font><font color="red">$\texttt{br}$</font>太强了，$\texttt{orz}$</p><p>密码感觉很不对劲啊，好像是$\texttt{ROUTER}$之类的，难道是说$\texttt{Day 2}$考最短路？</p><p>先看一眼$\texttt{T1}$，居然是传说中的计算几何？？？可是后两题比这题更难写，于是考虑刚$\texttt{T1}$，发现自己在三个点所成的角度都不知道，卡到了$\texttt{8:45}$。发现自己是真的呆，写了个余弦定理。</p><p>然后就去写$\texttt{20 pts}$，枚举选排列，调选排列都调了$\texttt{20 min}$，自己连选排列都不会了，被劝退了qwq。</p><p>本来想写$O(n^4)$的，结果看了下$\texttt{Data Range}$发现跟写$O(n^6)$的低级暴力一模一样，而且$O(n^6)$还更好写，所以就没写$O(n^4)$了。</p><p>$\texttt{9:00}$去刚$\texttt{T2}$，一看有贪心性质优化枚举，就写了，结果写萎了，调到了$\texttt{10:00}$。我脑子一热，只好去了一趟$\texttt{WC}$，但是居然碰到了<font color="black">$\texttt{l}$</font><font color="red">$\texttt{k}$</font>，先$\texttt{molokai}$为好。</p><p>又调了$\texttt{100 min}$的高级暴力，感觉自己人都不好了，还不如写低级暴力呢，然后我居然过样例了？？</p>]]></content>
      
      
      
        <tags>
            
            <tag> 游记/考试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P5245」【模板】多项式快速幂</title>
      <link href="/2019/03/23/%E3%80%8CLuogu-P5245%E3%80%8D%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E5%A4%9A%E9%A1%B9%E5%BC%8F%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
      <url>/2019/03/23/%E3%80%8CLuogu-P5245%E3%80%8D%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E5%A4%9A%E9%A1%B9%E5%BC%8F%E5%BF%AB%E9%80%9F%E5%B9%82/</url>
      
        <content type="html"><![CDATA[<p>给定$n-1$次多项式$F(x)$与整数$k$，求$\bmod x^n$意义下的$(F(x))^k$。</p><p>$\texttt{Data Range:}n\leq 10^5,2\leq k\leq 10^{10^5}$<br><a id="more"></a></p><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><p>多项式基本操作，不会请右转模板区qwq。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>首先大力推一波式子</p><script type="math/tex; mode=display">G(x)=(F(x))^k\pmod{x^n}</script><p>取下对数</p><script type="math/tex; mode=display">\ln G(x)=kF(x)\pmod{x^n}</script><p>再取一下指数</p><script type="math/tex; mode=display">G(x)=e^{kF(x)}\pmod{x^n}</script><p>很明显，时间复杂度是$O(n\log n)$，但是如果像我一样写代码会<font color="#2e468c">$\texttt{TLE 8-20}$</font>，于是来<del>践行OI界的优良传统</del>卡常数。</p><p><strong>前方大图警告</strong></p><p><img src="/2019/03/23/「Luogu-P5245」【模板】多项式快速幂/5.JPG" alt=""><br><img src="/2019/03/23/「Luogu-P5245」【模板】多项式快速幂/4.JPG" alt=""><br><img src="/2019/03/23/「Luogu-P5245」【模板】多项式快速幂/3.JPG" alt=""><br><img src="/2019/03/23/「Luogu-P5245」【模板】多项式快速幂/2.JPG" alt=""><br><img src="/2019/03/23/「Luogu-P5245」【模板】多项式快速幂/1.JPG" alt=""></p><p>中间有$\texttt{selftest}$的是我的自测，数据比这一题强。</p><p>首先看一份比较$\texttt{naive}$的代码（只有<font color="#e67e22">$\texttt{35 pts}$</font>，吸氧后在$\texttt{selftest}$上跑还只有$\texttt{45070ms}$）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> li;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">3e5</span>+<span class="number">51</span>,MOD=<span class="number">998244353</span>,G=<span class="number">3</span>,INVG=<span class="number">332748118</span>;</span><br><span class="line">ll fd,exponent;</span><br><span class="line">ll f[MAXN],res[MAXN],tmp[MAXN],pinv[MAXN],der[MAXN],texp[MAXN],texp2[MAXN];</span><br><span class="line">ll g[MAXN],rev[MAXN],root[MAXN],invl[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">readm</span><span class="params">(ll mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> li num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(((num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>))%MOD+(ch-<span class="string">'0'</span>))%MOD;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;                                   </span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">qadd</span><span class="params">(ll x,ll y,ll mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x+y&gt;mod?x+y-mod:x+y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">qmin</span><span class="params">(ll x,ll y,ll mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x-y&lt;<span class="number">0</span>?x-y+mod:x-y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">qpow</span><span class="params">(ll base,ll exponent,ll mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    li res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(exponent)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(exponent&amp;<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            res=(li)res*base%mod;</span><br><span class="line">        &#125;</span><br><span class="line">        base=(li)base*base%mod,exponent&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">NTT</span><span class="params">(ll *cp,ll cnt,ll inv,ll mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll cur=<span class="number">0</span>,res=<span class="number">0</span>,omg=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;rev[i])</span><br><span class="line">        &#123;</span><br><span class="line">            swap(cp[i],cp[rev[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=cnt;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cur=i&gt;&gt;<span class="number">1</span>,res=qpow(inv==<span class="number">1</span>?G:INVG,(mod<span class="number">-1</span>)/i,mod);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> ll *p=cp;p!=cp+cnt;p+=i)</span><br><span class="line">        &#123;</span><br><span class="line">            omg=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cur;++j)</span><br><span class="line">            &#123;</span><br><span class="line">                ll t=(li)omg*p[j+cur]%mod;</span><br><span class="line">                p[j+cur]=qmin(p[j],t,mod),p[j]=qadd(p[j],t,mod);</span><br><span class="line">                omg=(li)omg*res%mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(inv==<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ll invl=qpow(cnt,mod<span class="number">-2</span>,mod);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=cnt;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            cp[i]=(li)cp[i]*invl%mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">deriv</span><span class="params">(ll fd,ll *f,ll *res,ll mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;fd;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        res[i<span class="number">-1</span>]=(li)f[i]*i%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    res[fd<span class="number">-1</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">integ</span><span class="params">(ll fd,ll *f,ll *res,ll mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;fd;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        res[i]=(li)f[i<span class="number">-1</span>]*qpow(i,mod<span class="number">-2</span>,mod)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    res[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">inv</span><span class="params">(ll fd,ll *f,ll *res,ll mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(fd==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        res[<span class="number">0</span>]=qpow(f[<span class="number">0</span>],mod<span class="number">-2</span>,mod);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    inv((fd+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>,f,res,mod);</span><br><span class="line">    ll cnt=<span class="number">1</span>,limit=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(cnt&lt;(fd&lt;&lt;<span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        cnt&lt;&lt;=<span class="number">1</span>,limit++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp[i]=i&lt;fd?f[i]:<span class="number">0</span>;</span><br><span class="line">        rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;limit);</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(tmp,cnt,<span class="number">1</span>,mod),NTT(res,cnt,<span class="number">1</span>,mod);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        res[i]=(li)qmin(<span class="number">2</span>,(li)tmp[i]*res[i]%mod,mod)*res[i]%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(res,cnt,<span class="number">-1</span>,mod);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=fd;i&lt;cnt;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        res[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ln</span><span class="params">(ll fd,ll *f,ll *res,ll mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll cnt=<span class="number">1</span>,limit=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(cnt&lt;(fd&lt;&lt;<span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        cnt&lt;&lt;=<span class="number">1</span>,limit++;</span><br><span class="line">    &#125;</span><br><span class="line">    inv(fd,f,pinv,mod),deriv(fd,f,der,mod);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;limit);</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(pinv,cnt,<span class="number">1</span>,mod),NTT(der,cnt,<span class="number">1</span>,mod);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        der[i]=(li)der[i]*pinv[i]%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(der,cnt,<span class="number">-1</span>,mod),integ(fd,der,res,mod);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        der[i]=pinv[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">exp</span><span class="params">(ll fd,ll *f,ll *res,ll mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(fd==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        res[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll cnt=<span class="number">1</span>,limit=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(cnt&lt;(fd&lt;&lt;<span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        cnt&lt;&lt;=<span class="number">1</span>,limit++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exp</span>((fd+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>,f,res,mod),ln(fd,res,texp,mod);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;++i)</span><br><span class="line">    &#123;</span><br><span class="line"> rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;limit);</span><br><span class="line">    &#125;</span><br><span class="line">    texp[<span class="number">0</span>]=qmin(f[<span class="number">0</span>]+<span class="number">1</span>,texp[<span class="number">0</span>],mod);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;fd;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        texp[i]=qmin(f[i],texp[i],mod);</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(texp,cnt,<span class="number">1</span>,mod),NTT(res,cnt,<span class="number">1</span>,mod);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        res[i]=(li)res[i]*texp[i]%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(res,cnt,<span class="number">-1</span>,mod);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        texp[i]=<span class="number">0</span>,res[i]=i&lt;fd?res[i]:<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fd=read(),exponent=readm(MOD);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;fd;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        f[i]=read();</span><br><span class="line">    &#125;</span><br><span class="line">    ln(fd,f,g,MOD);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;fd;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        g[i]=(li)g[i]*exponent%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exp</span>(fd,g,res,MOD);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;fd;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,res[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先考虑把一些调用次数多而短的函数给搞掉。</p><p>一眼看过去，调用次数最多的是$\texttt{qadd}$和$\texttt{qmin}$，于是考虑吧这两个函数搞掉，把一些副本放到函数里面开$\texttt{static}$，于是就优化到了$\texttt{31078ms}$。</p><p>接下来，就可以考虑压缩$\texttt{deriv}$和$\texttt{integ}$了，尽管代码里只有调用一次，但是$\texttt{exp}$中会调用$\log n$次，所以果断搞掉，现在时间是$\texttt{28972ms}$。</p><p>接着考虑删掉一些不必要的参数，因为传$\texttt{int}$是$O(32)$的。于是可以考虑删掉$\texttt{mod}$，因为这题只有一个模数，用不着加这样一个参。</p><p>经过毒瘤卡常后，一个$\texttt{45000+ms}$的代码被优化成了$\texttt{12000-ms}$，可以见得卡常是个好东西。</p><p>附赠<a href="https://www.luogu.org/problemnew/show/U65286" target="_blank" rel="noopener">$\texttt{selftest}$</a></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> li;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">3e5</span>+<span class="number">51</span>,MOD=<span class="number">998244353</span>,G=<span class="number">3</span>,INVG=<span class="number">332748118</span>;</span><br><span class="line">ll fd,exponent;</span><br><span class="line">ll f[MAXN],res[MAXN],g[MAXN],rev[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">readm</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> li num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=((num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>))%MOD;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;                                   </span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">qpow</span><span class="params">(ll base,ll exponent)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    li res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(exponent)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(exponent&amp;<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            res=(li)res*base%MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        base=(li)base*base%MOD,exponent&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">NTT</span><span class="params">(ll *cp,ll cnt,ll inv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll cur=<span class="number">0</span>,res=<span class="number">0</span>,omg=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;rev[i])</span><br><span class="line">        &#123;</span><br><span class="line">            swap(cp[i],cp[rev[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=cnt;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cur=i&gt;&gt;<span class="number">1</span>,res=qpow(inv==<span class="number">1</span>?G:INVG,(MOD<span class="number">-1</span>)/i);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> ll *p=cp;p!=cp+cnt;p+=i)</span><br><span class="line">        &#123;</span><br><span class="line">            omg=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cur;++j)</span><br><span class="line">            &#123;</span><br><span class="line">                ll t=(li)omg*p[j+cur]%MOD,t2=p[j];</span><br><span class="line">                p[j+cur]=(t2-t+MOD)%MOD,p[j]=(t2+t)%MOD;</span><br><span class="line">                omg=(li)omg*res%MOD;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(inv==<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ll invl=qpow(cnt,MOD<span class="number">-2</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=cnt;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            cp[i]=(li)cp[i]*invl%MOD;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">inv</span><span class="params">(ll fd,ll *f,ll *res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> ll tmp[MAXN];</span><br><span class="line">    <span class="keyword">if</span>(fd==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        res[<span class="number">0</span>]=qpow(f[<span class="number">0</span>],MOD<span class="number">-2</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    inv((fd+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>,f,res);</span><br><span class="line">    ll cnt=<span class="number">1</span>,limit=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(cnt&lt;(fd&lt;&lt;<span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        cnt&lt;&lt;=<span class="number">1</span>,limit++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp[i]=i&lt;fd?f[i]:<span class="number">0</span>;</span><br><span class="line">        rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;limit);</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(tmp,cnt,<span class="number">1</span>),NTT(res,cnt,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        res[i]=(li)(<span class="number">2</span>-(li)tmp[i]*res[i]%MOD+MOD)%MOD*res[i]%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(res,cnt,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=fd;i&lt;cnt;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        res[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ln</span><span class="params">(ll fd,ll *f,ll *res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> ll pinv[MAXN],der[MAXN];</span><br><span class="line">    ll cnt=<span class="number">1</span>,limit=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(cnt&lt;(fd&lt;&lt;<span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        cnt&lt;&lt;=<span class="number">1</span>,limit++;</span><br><span class="line">    &#125;</span><br><span class="line">    inv(fd,f,pinv);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;fd;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        der[i<span class="number">-1</span>]=(li)f[i]*i%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    der[fd<span class="number">-1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;limit);</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(pinv,cnt,<span class="number">1</span>),NTT(der,cnt,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        der[i]=(li)der[i]*pinv[i]%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(der,cnt,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;fd;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        res[i]=(li)der[i<span class="number">-1</span>]*qpow(i,MOD<span class="number">-2</span>)%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    res[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        der[i]=pinv[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">exp</span><span class="params">(ll fd,ll *f,ll *res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> ll texp[MAXN];</span><br><span class="line">    <span class="keyword">if</span>(fd==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        res[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll cnt=<span class="number">1</span>,limit=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(cnt&lt;(fd&lt;&lt;<span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        cnt&lt;&lt;=<span class="number">1</span>,limit++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exp</span>((fd+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>,f,res),ln(fd,res,texp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;++i)</span><br><span class="line">    &#123;</span><br><span class="line"> rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;limit);</span><br><span class="line">    &#125;</span><br><span class="line">    texp[<span class="number">0</span>]=(f[<span class="number">0</span>]+<span class="number">1</span>-texp[<span class="number">0</span>]+MOD)%MOD;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;fd;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        texp[i]=(f[i]-texp[i]+MOD)%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(texp,cnt,<span class="number">1</span>),NTT(res,cnt,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        res[i]=(li)res[i]*texp[i]%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(res,cnt,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        texp[i]=<span class="number">0</span>,res[i]=i&lt;fd?res[i]:<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fd=read(),exponent=readm();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;fd;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        f[i]=read();</span><br><span class="line">    &#125;</span><br><span class="line">    ln(fd,f,g);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;fd;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        g[i]=(li)g[i]*exponent%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exp</span>(fd,g,res);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;fd;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,res[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 多项式 </tag>
            
            <tag> FFT </tag>
            
            <tag> NTT </tag>
            
            <tag> 洛谷 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「CodeForces 438E」The Child and Binary Tree</title>
      <link href="/2019/03/22/%E3%80%8CCodeForces-438E%E3%80%8DThe-Child-and-Binary-Tree/"/>
      <url>/2019/03/22/%E3%80%8CCodeForces-438E%E3%80%8DThe-Child-and-Binary-Tree/</url>
      
        <content type="html"><![CDATA[<p>给定一个元素个数为$n$的集合$c$和一个整数$m$，称一棵二叉树是好的当且仅当这棵二叉树的所有点的权值都属于$c$，规定一棵带点权二叉树的权值是该树中所有点权的总和。对于任意的整数$s$满足$1\leq s\leq m$，求出权值为$s$的好的二叉树的数量，答案对$998244353$取模。</p><p>$\texttt{Data Range:}1\leq n,m,c_i\leq 10^5$<br><a id="more"></a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>一道很好的<del>计数$\texttt{dp}$</del>多项式花样板子题。</p><p>首先考虑计数$\texttt{dp}$，其实这个应该不难想。</p><p>考虑根节点的点权，枚举一下左子树点权，那么有</p><script type="math/tex; mode=display">dp_i=\begin{cases}1, & (n=0)\\ \sum\limits_{i=1}^{n}g_i\sum\limits_{j=0}^{n-i}dp_j dp_{n-i-j}, & (n\geq 1)\end{cases}</script><p>这里，$g_i=[i\in c]$。</p><p>但是这个算法复杂度不对啊qwq，考虑使用生成函数优化一下。</p><p>设$F(x)$为序列$dp$的生成函数（很明显是$\texttt{OGF}$），$G(x)$为序列$g$的生成函数，那么很明显的可以看到，上面的式子是卷积的形式，于是就再搞一搞，就会有</p><script type="math/tex; mode=display">F=GF^2+1</script><p>再整理一下</p><script type="math/tex; mode=display">GF^2-F+1=0</script><p>解一下这样一个方程，得到两个根</p><script type="math/tex; mode=display">F=\frac{2}{1\pm\sqrt{1-4G}}</script><p>这个正负号看起来就觉得很不爽，所以考虑一下这个是加号还是减号。</p><p>题目保证了$1\leq c_i\leq 10^5$，所以可以知道$G_0=0$，代入一下是加号。</p><p>既然$F$是$dp$的生成函数，那么只需要输出$F_1,F_2,\cdots,F_m$就可以啦qwq。</p><p>时间复杂度$O(n\log n)$。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> li;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">3e5</span>+<span class="number">51</span>,MOD=<span class="number">998244353</span>,G=<span class="number">3</span>,INVG=<span class="number">332748118</span>;</span><br><span class="line">ll cnt,ccnt=<span class="number">1</span>,fd;</span><br><span class="line">ll f[MAXN],res[MAXN],g[MAXN],rev[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">qpow</span><span class="params">(ll base,ll exponent)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    li res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(exponent)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(exponent&amp;<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            res=(li)res*base%MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        base=(li)base*base%MOD,exponent&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">NTT</span><span class="params">(ll *cp,ll cnt,ll inv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll cur=<span class="number">0</span>,res=<span class="number">0</span>,omg=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;rev[i])</span><br><span class="line">        &#123;</span><br><span class="line">            swap(cp[i],cp[rev[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=cnt;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cur=i&gt;&gt;<span class="number">1</span>,res=qpow(inv==<span class="number">1</span>?G:INVG,(MOD<span class="number">-1</span>)/i);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> ll *p=cp;p!=cp+cnt;p+=i)</span><br><span class="line">        &#123;</span><br><span class="line">            omg=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cur;++j)</span><br><span class="line">            &#123;</span><br><span class="line">                ll t=(li)omg*p[j+cur]%MOD,t2=p[j];</span><br><span class="line">                p[j+cur]=(t2-t+MOD)%MOD,p[j]=(t2+t)%MOD;</span><br><span class="line">                omg=(li)omg*res%MOD;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(inv==<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ll invl=qpow(cnt,MOD<span class="number">-2</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=cnt;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            cp[i]=(li)cp[i]*invl%MOD;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">deriv</span><span class="params">(ll fd,ll *f,ll *res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;fd;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        res[i<span class="number">-1</span>]=(li)f[i]*i%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    res[fd<span class="number">-1</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">integ</span><span class="params">(ll fd,ll *f,ll *res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;fd;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        res[i]=(li)f[i<span class="number">-1</span>]*qpow(i,MOD<span class="number">-2</span>)%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    res[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">inv</span><span class="params">(ll fd,ll *f,ll *res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> ll tmp[MAXN];</span><br><span class="line">    <span class="keyword">if</span>(fd==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        res[<span class="number">0</span>]=qpow(f[<span class="number">0</span>],MOD<span class="number">-2</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    inv((fd+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>,f,res);</span><br><span class="line">    ll cnt=<span class="number">1</span>,limit=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(cnt&lt;(fd&lt;&lt;<span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        cnt&lt;&lt;=<span class="number">1</span>,limit++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp[i]=i&lt;fd?f[i]:<span class="number">0</span>;</span><br><span class="line">        rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;limit);</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(tmp,cnt,<span class="number">1</span>),NTT(res,cnt,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        res[i]=(li)(<span class="number">2</span>-(li)tmp[i]*res[i]%MOD+MOD)%MOD*res[i]%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(res,cnt,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=fd;i&lt;cnt;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        res[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ln</span><span class="params">(ll fd,ll *f,ll *res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> ll pinv[MAXN],der[MAXN];</span><br><span class="line">    ll cnt=<span class="number">1</span>,limit=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(cnt&lt;(fd&lt;&lt;<span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        cnt&lt;&lt;=<span class="number">1</span>,limit++;</span><br><span class="line">    &#125;</span><br><span class="line">    inv(fd,f,pinv),deriv(fd,f,der);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;limit);</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(pinv,cnt,<span class="number">1</span>),NTT(der,cnt,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        der[i]=(li)der[i]*pinv[i]%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(der,cnt,<span class="number">-1</span>),integ(fd,der,res);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        der[i]=pinv[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">exp</span><span class="params">(ll fd,ll *f,ll *res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> ll texp[MAXN];</span><br><span class="line">    <span class="keyword">if</span>(fd==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        res[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll cnt=<span class="number">1</span>,limit=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(cnt&lt;(fd&lt;&lt;<span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        cnt&lt;&lt;=<span class="number">1</span>,limit++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exp</span>((fd+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>,f,res),ln(fd,res,texp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;++i)</span><br><span class="line">    &#123;</span><br><span class="line"> rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;limit);</span><br><span class="line">    &#125;</span><br><span class="line">    texp[<span class="number">0</span>]=(f[<span class="number">0</span>]+<span class="number">1</span>-texp[<span class="number">0</span>]+MOD)%MOD;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;fd;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        texp[i]=(f[i]-texp[i]+MOD)%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(texp,cnt,<span class="number">1</span>),NTT(res,cnt,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        res[i]=(li)res[i]*texp[i]%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(res,cnt,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        texp[i]=<span class="number">0</span>,res[i]=i&lt;fd?res[i]:<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">sqrt</span><span class="params">(ll fd,ll *f,ll *res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> ll tsqrt[MAXN];</span><br><span class="line">    ln(fd,f,tsqrt);</span><br><span class="line">    ll cnt=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(cnt&lt;(fd&lt;&lt;<span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        cnt&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=cnt;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        tsqrt[i]=tsqrt[i]&amp;<span class="number">1</span>?(tsqrt[i]+MOD)&gt;&gt;<span class="number">1</span>:tsqrt[i]&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exp</span>(fd,tsqrt,res);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tsqrt[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt=read(),fd=read()+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        ++f[read()];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ccnt&lt;(fd&lt;&lt;<span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        ccnt&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ccnt;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        f[i]=(MOD-((li)<span class="number">4</span>*f[i]%MOD))%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    ++f[<span class="number">0</span>],<span class="built_in">sqrt</span>(fd,f,g);</span><br><span class="line">    g[<span class="number">0</span>]=(g[<span class="number">0</span>]+<span class="number">1</span>)%MOD,inv(fd,g,res);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;fd;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,(res[i]&lt;&lt;<span class="number">1</span>)%MOD);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CodeForces </tag>
            
            <tag> 多项式 </tag>
            
            <tag> 生成函数 </tag>
            
            <tag> FFT </tag>
            
            <tag> NTT </tag>
            
            <tag> DP </tag>
            
            <tag> 计数 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>学习笔记·多项式专题（二）</title>
      <link href="/2019/03/19/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E5%A4%9A%E9%A1%B9%E5%BC%8F%E4%B8%93%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2019/03/19/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E5%A4%9A%E9%A1%B9%E5%BC%8F%E4%B8%93%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>这一片文章讲的呢，都是一些<del>板子</del>。<br><a id="more"></a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>以下代码多项式系数均对$998244353(7\times 17\times 2^{23}+1)$取膜，如果想对于$1004535809$等其他模数通用的话，请将原根，原根的逆和虚数单位，$\texttt{Cipolla}$中的$\texttt{exponent}$，以及三角函数代码里的$\texttt{inv2}$更改即可。</p><p>如果有什么比如说像链接有问题或者是别的问题，请在下面发评论。</p><h3 id="多项式的求导与不定积分"><a href="#多项式的求导与不定积分" class="headerlink" title="多项式的求导与不定积分"></a>多项式的求导与不定积分</h3><p>$\frac{\mathrm{d}}{\mathrm{d}x}x^n=nx^{n-1},\int x^n=\frac{x^{n+1}}{n+1}\,\mathrm{d}x$，所以直接套公式即可。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">deriv</span><span class="params">(ll fd,ll *f,ll *res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;fd;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        res[i<span class="number">-1</span>]=(li)f[i]*i%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    res[fd<span class="number">-1</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">integ</span><span class="params">(ll fd,ll *f,ll *res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;fd;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        res[i]=(li)f[i<span class="number">-1</span>]*qpow(i,MOD<span class="number">-2</span>)%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    res[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="多项式乘法"><a href="#多项式乘法" class="headerlink" title="多项式乘法"></a>多项式乘法</h3><p><del>略</del></p><h3 id="多项式求逆"><a href="#多项式求逆" class="headerlink" title="多项式求逆"></a>多项式求逆</h3><p><a href="https://www.luogu.org/problemnew/show/P4238" target="_blank" rel="noopener">Luogu P4238</a></p><p><a href="https://www.luogu.org/problemnew/show/P4239" target="_blank" rel="noopener">Luogu P4239</a></p><p>如果$F(x)$只有一项，那么答案是它的逆元。</p><p>剩下的情况考虑递归做，假设已经求出了$\bmod{x^{\lceil\frac{n}{2}\rceil}}$意义下的答案$H(x)$，考虑推出$\bmod{x^n}$意义下的答案$G(x)$，于是有：</p><script type="math/tex; mode=display">F(x)H(x)\equiv 1\pmod{x^{\lceil\frac{n}{2}\rceil}}</script><script type="math/tex; mode=display">F(x)G(x)\equiv 1\pmod{x^n}</script><script type="math/tex; mode=display">\therefore F(x)(G(x)-H(x))\equiv 0\pmod{x^{\lceil\frac{n}{2}\rceil}}</script><script type="math/tex; mode=display">\therefore G(x)-H(x)\equiv 0\pmod{x^{\lceil\frac{n}{2}\rceil}}</script><script type="math/tex; mode=display">\therefore G(x)^2-2G(x)H(x)+H(x)^2\equiv 0\pmod{x^n}</script><script type="math/tex; mode=display">\therefore G(x)\equiv 2H(x)-F(x)H(x)^2\pmod{x^n}</script><p>于是可以快活地上板子啦qwq<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">inv</span><span class="params">(ll fd,ll *f,ll *res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> ll tmp[MAXN];</span><br><span class="line">    <span class="keyword">if</span>(fd==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        res[<span class="number">0</span>]=qpow(f[<span class="number">0</span>],MOD<span class="number">-2</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    inv((fd+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>,f,res);</span><br><span class="line">    ll cnt=<span class="number">1</span>,limit=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(cnt&lt;(fd&lt;&lt;<span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        cnt&lt;&lt;=<span class="number">1</span>,limit++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp[i]=i&lt;fd?f[i]:<span class="number">0</span>;</span><br><span class="line">        rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;limit);</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(tmp,cnt,<span class="number">1</span>),NTT(res,cnt,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        res[i]=(li)(<span class="number">2</span>-(li)tmp[i]*res[i]%MOD+MOD)%MOD*res[i]%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(res,cnt,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=fd;i&lt;cnt;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        res[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="多项式除法"><a href="#多项式除法" class="headerlink" title="多项式除法"></a>多项式除法</h3><p><a href="https://www.luogu.org/problemnew/show/P4512" target="_blank" rel="noopener">Luogu P4512</a></p><p>首先定义$F_R(x)$是指$F(x)$系数反转后所得的多项式。</p><script type="math/tex; mode=display">\texttt{e.g:}F(x)=x^2+2x+3,F_R(x)=3x^2+2x+1</script><p>很显然，对于$n$次多项式$F(x),F_R(x)=x^nF(\frac{1}{x})$</p><p>还有，对于一个$n$次的多项式$F(x)$和一个$m$次的多项式$G(x)$，它们的商$Q(x)$是$n-m$次的，余数$R(x)$是$m-1$次的。</p><p>所以，有了这些就可以愉快的推公式了qwq</p><script type="math/tex; mode=display">F(x)=G(x)Q(x)+R(x)</script><p>把$\frac{1}{x}$代入</p><script type="math/tex; mode=display">F(\frac{1}{x})=G(\frac{1}{x})Q(\frac{1}{x})+R(\frac{1}{x})</script><p>两边乘个$x^n$</p><script type="math/tex; mode=display">x^nF(\frac{1}{x})=x^{m}G(\frac{1}{x})x^{n-m}Q(\frac{1}{x})+x^{n-m+1}x^{m-1}R(\frac{1}{x})</script><script type="math/tex; mode=display">F_R(x)=G_R(x)Q_R(x)+x^{n-m+1}R_R(x)</script><p>把它换成$\bmod {x^{n-m+1}}$意义下的式子</p><script type="math/tex; mode=display">F_R(x)\equiv G_R(x)Q_R(x)\pmod {x^{n-m+1}}</script><script type="math/tex; mode=display">Q_R(x)\equiv F_R(x)G_R^{-1}(x)\pmod {x^{n-m+1}}</script><p>通过这个式子求得$Q(x)$，再代入原来的式子求出$R(x)$即可。</p><p>精彩的上代码环节</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">div</span><span class="params">(ll fd,ll gd,ll *f,ll *g,ll *q,ll *r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> ll tmpf[MAXN],tmpg[MAXN],tinv[MAXN];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;fd;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmpf[i]=f[fd<span class="number">-1</span>-i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;gd;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmpg[i]=g[gd<span class="number">-1</span>-i];</span><br><span class="line">    &#125;</span><br><span class="line">    inv(fd-gd+<span class="number">2</span>,tmpg,tinv);</span><br><span class="line">    ll cnt=<span class="number">1</span>,limit=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(cnt&lt;(fd&lt;&lt;<span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        cnt&lt;&lt;=<span class="number">1</span>,limit++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">       rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;limit);</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(tmpf,cnt,<span class="number">1</span>),NTT(tinv,cnt,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        q[i]=(li)tmpf[i]*tinv[i]%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(q,cnt,<span class="number">-1</span>),reverse(q,q+fd-gd+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmpf[i]=<span class="number">0</span>;</span><br><span class="line">        q[i]=i&lt;fd-gd+<span class="number">1</span>?q[i]:<span class="number">0</span>,g[i]=i&lt;gd?g[i]:<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(q,cnt,<span class="number">1</span>),NTT(g,cnt,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmpf[i]=(li)q[i]*g[i]%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(q,cnt,<span class="number">-1</span>),NTT(g,cnt,<span class="number">-1</span>),NTT(tmpf,cnt,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;gd<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        r[i]=(f[i]-tmpf[i]+MOD)%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmpf[i]=tmpg[i]=tinv[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多项式对数函数"><a href="#多项式对数函数" class="headerlink" title="多项式对数函数"></a>多项式对数函数</h3><p><a href="https://www.luogu.org/problemnew/show/P4725" target="_blank" rel="noopener">Luogu P4725</a></p><p>大力推一波公式：</p><script type="math/tex; mode=display">G(x)=\ln F(x)</script><script type="math/tex; mode=display">\therefore G^\prime(x)=(\ln F(x))^\prime</script><p>根据链式求导法则$\frac{\mathrm{d}y}{\mathrm{d}x}=\frac{\mathrm{d}y}{\mathrm{d}u}\frac{\mathrm{d}u}{\mathrm{d}x}$和基本公式$\frac{\mathrm{d}}{\mathrm{d}x}\ln x=\frac{1}{x}$，有</p><script type="math/tex; mode=display">G^\prime(x)=\frac{F^\prime(x)}{F(x)}</script><p>再积分回来</p><script type="math/tex; mode=display">\therefore G(x)=\int\frac{F^\prime(x)}{F(x)}\,\mathrm{d}x</script><p>于是又可以快活地上板子啦qwq<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ln</span><span class="params">(ll fd,ll *f,ll *res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> ll pinv[MAXN],der[MAXN];</span><br><span class="line">    ll cnt=<span class="number">1</span>,limit=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(cnt&lt;(fd&lt;&lt;<span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        cnt&lt;&lt;=<span class="number">1</span>,limit++;</span><br><span class="line">    &#125;</span><br><span class="line">    inv(fd,f,pinv),deriv(fd,f,der);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;limit);</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(pinv,cnt,<span class="number">1</span>),NTT(der,cnt,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        der[i]=(li)der[i]*pinv[i]%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(der,cnt,<span class="number">-1</span>),integ(fd,der,res);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        der[i]=pinv[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="多项式指数函数"><a href="#多项式指数函数" class="headerlink" title="多项式指数函数"></a>多项式指数函数</h3><p><a href="https://www.luogu.org/problemnew/show/P4726" target="_blank" rel="noopener">Luogu P4726</a></p><p>还是大力推公式：</p><script type="math/tex; mode=display">G(x)=e^{F(x)}</script><p>先考虑求导，有</p><script type="math/tex; mode=display">G^\prime(x)=F^\prime(x)e^F(x)</script><p>指数函数还是没有消去，看来这种方法布星。</p><p>两边取个对数，再把$F(x)$移过去</p><script type="math/tex; mode=display">\ln G(x)-F(x)=0</script><p>强行解这个方程布星，考虑牛顿迭代。在膜$x^n$意义下的牛顿迭代式子是这样的（这里不证明）</p><script type="math/tex; mode=display">F(x)=F_0(x)-\frac{G(F_0(x))}{G^\prime(F_0(x))}\pmod {x^n}</script><p>其中，$F_0(x)$是$\bmod x^{\lceil\frac{n}{2}\rceil}$意义下的答案</p><p>所以，设$H(x)=\ln x-F(x)$，有</p><script type="math/tex; mode=display">G(x)\equiv G_0(x)-\frac{H(G_0(x))}{H^\prime(G_0(x))}</script><script type="math/tex; mode=display">G(x)\equiv G_0(x)(1-\ln G_0(x)+F(x))\pmod {x^n}</script><p>又因为保证了$F(0)=0$，所以$G(x)$常数项为$1$</p><p>于是可以愉快的上板子了qwq</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">exp</span><span class="params">(ll fd,ll *f,ll *res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> ll texp[MAXN];</span><br><span class="line">    <span class="keyword">if</span>(fd==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        res[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll cnt=<span class="number">1</span>,limit=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(cnt&lt;(fd&lt;&lt;<span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        cnt&lt;&lt;=<span class="number">1</span>,limit++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exp</span>((fd+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>,f,res),ln(fd,res,texp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;limit);</span><br><span class="line">    &#125;</span><br><span class="line">    texp[<span class="number">0</span>]=(f[<span class="number">0</span>]+<span class="number">1</span>-texp[<span class="number">0</span>]+MOD)%MOD;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;fd;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        texp[i]=(f[i]-texp[i]+MOD)%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(texp,cnt,<span class="number">1</span>),NTT(res,cnt,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        res[i]=(li)res[i]*texp[i]%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(res,cnt,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        texp[i]=<span class="number">0</span>,res[i]=i&lt;fd?res[i]:<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多项式开根"><a href="#多项式开根" class="headerlink" title="多项式开根"></a>多项式开根</h3><p><a href="https://www.luogu.org/problemnew/show/P5205" target="_blank" rel="noopener">Luogu P5205</a></p><p><a href="https://www.luogu.org/problemnew/show/P5277" target="_blank" rel="noopener">Luogu P5277</a>（不要脸的宣传一发）</p><p>这里考虑两种做法。</p><p>第一种做法，两边取个对数</p><script type="math/tex; mode=display">\ln G(x)=\frac{1}{2}\ln F(x)</script><p>再取指数</p><script type="math/tex; mode=display">G(x)=e^{\frac{1}{2}\ln F(x)}</script><p>于是就完工啦qwq</p><p>另一种做法是用另一种方式推公式</p><p>设$H^2(x)\equiv F(x)\pmod {x^{\lceil\frac{n}{2}\rceil}}$，有</p><script type="math/tex; mode=display">G(x)-H(x)\equiv 0 \pmod {x^{\lceil\frac{n}{2}\rceil}}</script><script type="math/tex; mode=display">(G(x)-H(x))^2\equiv 0 \pmod {x^n}</script><script type="math/tex; mode=display">G^2(x)-2G(x)H(x)+H^2(x)\equiv 0 \pmod {x^n}</script><script type="math/tex; mode=display">F(x)-2G(x)H(x)+H^2(x)\equiv 0 \pmod {x^n}</script><script type="math/tex; mode=display">G(x)=\frac{F(x)+H^2(x)}{2H(x)}</script><p>接着考虑$F_0\neq 0$的情形。</p><p>由于第一种做法和下面的分析，可以很明显的知道$G(x)$的每一项都要乘$F_0$的二次剩余。</p><p>使用$\texttt{Cipolla}$求解即可。（这种好东西，两段代码都会写）</p><p>但是，考虑$\texttt{Cipolla}$的随机性，有些时候可能不会得到想要的结果，可以多试几次，找到那个结果。（我在造$\texttt{P5277}$的数据时出现了好多个常数项是$1$的情况，然后被迫改了十几个测试点的常数项，$\texttt{mmp}$）</p><p>由于一些原因，这里先放上第一种做法的代码qwq（很容易被卡）<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> pair&lt;ll,ll&gt; pii;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">rd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> rand()%MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">chkx</span><span class="params">(ll num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> qpow(num,(MOD<span class="number">-1</span>)&gt;&gt;<span class="number">1</span>)==<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> pii <span class="title">mul</span><span class="params">(pii x,pii y,ll k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll x1=x.first,x2=x.second,y1=y.first,y2=y.second;</span><br><span class="line">    ll res1=((li)x1*y1%MOD+(li)x2*y2%MOD*k)%MOD;</span><br><span class="line">    ll res2=((li)x2*y1%MOD+(li)x1*y2%MOD)%MOD;</span><br><span class="line">    <span class="keyword">return</span> make_pair(res1,res2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">qres</span><span class="params">(ll num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!chkx(num))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll k=rd();</span><br><span class="line">    <span class="keyword">while</span>(chkx(((li)k*k-num+MOD)%MOD))</span><br><span class="line">    &#123;</span><br><span class="line">        k=rd();</span><br><span class="line">    &#125;</span><br><span class="line">    ll kk=((li)k*k-num+MOD)%MOD,exponent=<span class="number">499122177</span>;</span><br><span class="line">    pii res=make_pair(<span class="number">1</span>,<span class="number">0</span>),base=make_pair(k,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span>(exponent)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(exponent&amp;<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            res=mul(res,base,kk);</span><br><span class="line">        &#125;</span><br><span class="line">        base=mul(base,base,kk),exponent&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> min(res.first,MOD-res.first);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">sqrt</span><span class="params">(ll fd,ll *f,ll *res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> ll tsqrt[MAXN];</span><br><span class="line">    ll k=f[<span class="number">0</span>],cnt=<span class="number">1</span>;</span><br><span class="line">    ln(fd,f,tsqrt);</span><br><span class="line">    <span class="keyword">while</span>(cnt&lt;(fd&lt;&lt;<span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        cnt&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tsqrt[i]=tsqrt[i]&amp;<span class="number">1</span>?(tsqrt[i]+MOD)&gt;&gt;<span class="number">1</span>:tsqrt[i]&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exp</span>(fd,tsqrt,res),k=qres(k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        res[i]=(li)res[i]*k%MOD;</span><br><span class="line">        tsqrt[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="多项式快速幂"><a href="#多项式快速幂" class="headerlink" title="多项式快速幂"></a>多项式快速幂</h3><p><a href="https://www.luogu.org/problemnew/show/P5245" target="_blank" rel="noopener">Luogu P5245</a></p><p><a href="https://www.luogu.org/problemnew/show/P5273" target="_blank" rel="noopener">Luogu P5273</a></p><p>最好不要用倍增快速幂，尽管大概率卡不掉，但是码量极大。</p><p>先推一波公式</p><script type="math/tex; mode=display">G(x)=F^k(x)</script><p>两边取对数</p><script type="math/tex; mode=display">\ln G(x)=k\ln F(x)</script><p>再取指数</p><script type="math/tex; mode=display">G(x)=e^{k\ln F(x)}</script><p>但是，如果$F(x)$的常数项不为$1$，那么代码中求$\ln$的地方会自动将$F(x)$转换成常数项为$1$的多项式，也就是除掉常数项。</p><p>这时，要考虑把结果乘上一个$F_0^k$</p><p>可是$F_0$可以等于$0$，这时采用先把$0$删掉再补$0$的方法计算。</p><p>所以可以愉快的上代码了qwq</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">qpow</span><span class="params">(ll fd,ll *f,ll *res,ll exponent)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll k,flag=<span class="number">0</span>;</span><br><span class="line">    li zero=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> ll tmpf[MAXN],tmp[MAXN],tmp2[MAXN];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;fd;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        !(f[i]||flag)?zero++:flag=<span class="number">1</span>,tmpf[i-zero]=f[i];</span><br><span class="line">    &#125;</span><br><span class="line">    k=tmpf[<span class="number">0</span>],ln(fd-zero,tmpf,tmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;fd-zero;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp[i]=(li)tmp[i]*exponent%MOD; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exp</span>(fd-zero,tmp,tmp2),zero*=exponent,k=qpow(k,exponent);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> li i=zero;i&lt;fd;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        res[i]=(li)tmp2[i-zero]*k%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;fd;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmpf[i]=tmp[i]=tmp2[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多项式三角函数"><a href="#多项式三角函数" class="headerlink" title="多项式三角函数"></a>多项式三角函数</h3><p><a href="https://www.luogu.org/problemnew/show/P5264" target="_blank" rel="noopener">Luogu P5264</a></p><p>像求导积分之类的肯定布星，因为</p><script type="math/tex; mode=display">\frac{\mathrm{d}}{\mathrm{d}x}\sin x=\cos x,\frac{\mathrm{d}}{\mathrm{d}x}\cos x=-\sin x</script><p>然后这里试一下求导。</p><script type="math/tex; mode=display">G(x)=\sin F(x)</script><script type="math/tex; mode=display">G^\prime(x)=F^\prime(x)\cos F(x)</script><script type="math/tex; mode=display">G^{\prime\prime}(x)=-(F^\prime(x))^2)\sin F(x)+F^{\prime\prime}(x)\cos F(x)</script><p>于是，求导很明显解决不了问题。</p><p>牛顿迭代也会把你劝退，因为式子也会很复杂，这里就不推导了。</p><p>$\texttt{So?}$</p><p>考虑使用欧拉公式，将$F(x)$代入</p><script type="math/tex; mode=display">e^{\mathrm{i}F(x)}=\cos F(x)+\mathrm{i}\sin F(x)</script><p>再把$-F(x)$代入</p><script type="math/tex; mode=display">e^{-\mathrm{i}F(x)}=\cos (-F(x))+\mathrm{i}\sin (-F(x))</script><p>诱导公式搞一下</p><script type="math/tex; mode=display">e^{-\mathrm{i}F(x)}=\cos F(x)-\mathrm{i}\sin F(x)</script><p>两式相加相减</p><script type="math/tex; mode=display">e^{\mathrm{i}F(x)}+e^{-\mathrm{i}F(x)}=2\cos F(x)</script><script type="math/tex; mode=display">e^{\mathrm{i}F(x)}-e^{-\mathrm{i}F(x)}=2\mathrm{i}\sin F(x)</script><p>把那些系数除过去</p><script type="math/tex; mode=display">\cos F(x)=\frac{e^{\mathrm{i}F(x)}+e^{-\mathrm{i}F(x)}}{2}</script><script type="math/tex; mode=display">\sin F(x)=\frac{e^{\mathrm{i}F(x)}-e^{-\mathrm{i}F(x)}}{2\mathrm{i}}</script><p>等等，这个$\mathrm{i}$是怎么回事，乱搞一下</p><script type="math/tex; mode=display">i^2\equiv -1\pmod {998244353}</script><script type="math/tex; mode=display">i^2\equiv 998244352\pmod {998244353}</script><p>很明显蒯一个$\texttt{Cipolla}$的板子，算出来答案是$86583718$（$911660635$也是可以滴）</p><p>于是就可以考虑上代码啦qwq</p><p>这里窝把$\sin$和$\cos$放在一起，为了节省空间<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">trig</span><span class="params">(ll fd,ll *f,ll *res,ll type)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll inv2=<span class="number">499122177</span>,inv2i=qpow(I&lt;&lt;<span class="number">1</span>,MOD<span class="number">-2</span>);</span><br><span class="line">    <span class="keyword">static</span> ll tmp[MAXN],tmp2[MAXN],texp[MAXN],texp2[MAXN];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;fd;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp[i]=(li)I*f[i]%MOD,tmp2[i]=MOD-tmp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exp</span>(fd,tmp,texp),<span class="built_in">exp</span>(fd,tmp2,texp2);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;fd;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        res[i]=type?(texp[i]+texp2[i])%MOD:(texp[i]-texp2[i]+MOD)%MOD;</span><br><span class="line">        res[i]=(li)res[i]*(type?inv2:inv2i)%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="多项式反三角函数"><a href="#多项式反三角函数" class="headerlink" title="多项式反三角函数"></a>多项式反三角函数</h3><p><a href="https://www.luogu.org/problemnew/show/P5265" target="_blank" rel="noopener">Luogu P5265</a></p><p>先讨论$G(x)=\sin^{-1}F(x)$的情形。</p><p>两边同时求个导</p><script type="math/tex; mode=display">G^\prime(x)=\frac{F^\prime(x)}{\sqrt{1-F^2(x)}}</script><p>再积分回来</p><script type="math/tex; mode=display">G(x)=\int \frac{F^\prime(x)}{\sqrt{1-F^2(x)}}\,\mathrm{d}x</script><p>同理，$G(x)=\tan^{-1}F(x)$就会有</p><script type="math/tex; mode=display">G^\prime(x)=\frac{F^\prime(x)}{1+F^2(x)}</script><p>积分回来</p><script type="math/tex; mode=display">G^\prime(x)=\int \frac{F^\prime(x)}{1+F^2(x)}\,\mathrm{d}x</script><p>所以上个板子qwq（这里$\sin^{-1}$和$\tan^{-1}$分开了）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">asin</span><span class="params">(ll fd,ll *f,ll *res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> ll der[MAXN],tmp[MAXN],tmp2[MAXN],tmp3[MAXN];</span><br><span class="line">    ll cnt=<span class="number">1</span>,limit=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(cnt&lt;(fd&lt;&lt;<span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        cnt&lt;&lt;=<span class="number">1</span>,limit++;</span><br><span class="line">    &#125;</span><br><span class="line">    deriv(fd,f,der);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp[i]=MOD-f[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;limit);</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(tmp,cnt,<span class="number">1</span>),NTT(f,cnt,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp[i]=(li)tmp[i]*f[i]%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(tmp,cnt,<span class="number">-1</span>),NTT(f,cnt,<span class="number">-1</span>),tmp[<span class="number">0</span>]=(tmp[<span class="number">0</span>]+<span class="number">1</span>)%MOD;</span><br><span class="line">    <span class="built_in">sqrt</span>(fd,tmp,tmp2),inv(fd,tmp2,tmp3);</span><br><span class="line">    NTT(tmp3,cnt,<span class="number">1</span>),NTT(der,cnt,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp3[i]=(li)tmp3[i]*der[i]%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(tmp3,cnt,<span class="number">-1</span>),integ(fd,tmp3,res);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        der[i]=tmp[i]=tmp2[i]=tmp3[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">atan</span><span class="params">(ll fd,ll *f,ll *res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> ll der[MAXN],tmp[MAXN],tmp2[MAXN];</span><br><span class="line">    ll cnt=<span class="number">1</span>,limit=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(cnt&lt;(fd&lt;&lt;<span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        cnt&lt;&lt;=<span class="number">1</span>,limit++;</span><br><span class="line">    &#125;</span><br><span class="line">    deriv(fd,f,der);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp[i]=f[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;limit);</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(tmp,cnt,<span class="number">1</span>),NTT(f,cnt,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp[i]=(li)tmp[i]*f[i]%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(tmp,cnt,<span class="number">-1</span>),NTT(f,cnt,<span class="number">-1</span>),tmp[<span class="number">0</span>]=(tmp[<span class="number">0</span>]+<span class="number">1</span>)%MOD;</span><br><span class="line">    inv(fd,tmp,tmp2);</span><br><span class="line">    NTT(tmp2,cnt,<span class="number">1</span>),NTT(der,cnt,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp2[i]=(li)tmp2[i]*der[i]%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(tmp2,cnt,<span class="number">-1</span>),integ(fd,tmp2,res);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        der[i]=tmp[i]=tmp2[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多项式多点求值"><a href="#多项式多点求值" class="headerlink" title="多项式多点求值"></a>多项式多点求值</h3><p><a href="https://www.luogu.org/problemnew/show/P5050" target="_blank" rel="noopener">Luogu P5050</a></p><p>把求值的点均分成两份，并构造多项式</p><script type="math/tex; mode=display">G_0(x)=\prod\limits_{i=1}^{\lfloor\frac{n}{2}\rfloor}(x-x_i),G_1(x)=\prod\limits_{i=\lfloor\frac{n}{2}\rfloor+1}^{n}(x-x_i)</script><p>显然，对于$\forall i\in [1,\lfloor\frac{n}{2}\rfloor]$，$G_0(x_i)=0$，$G_1$同理。</p><p>于是拿$F(x)$（也就是给定的多项式）暴力除$G_0(x)$，有</p><script type="math/tex; mode=display">F(x)=G_0(x)Q_0(x)+R_0(x)</script><p>这样，对于$\forall i\in [1,\lfloor\frac{n}{2}\rfloor]$，就有$F(x_i)=R_0(x_i)$。</p><p>同理，构造</p><script type="math/tex; mode=display">F(x)=G_1(x)Q_1(x)+R_1(x)</script><p>对于$\forall i\in [\lfloor\frac{n}{2}\rfloor+1,n]$，就有$F(x_i)=R_1(x_i)$。</p><p>所以，问题转化为前$\lfloor\frac{n}{2}\rfloor$个点对$G_0(x)$求值和后$n-\lfloor\frac{n}{2}\rfloor$个点对$G_1(x)$求值的问题，然后就可以愉快的分治啦qwq，分治的过程可以用类似线段树的方法维护（一定要开<strong>$4$倍内存</strong>）</p><p>这里有一个细节：如果$F(x)$的最高次数大于$\prod\limits_{i=0}^N(x-x_i)$要先对$\prod\limits_{i=0}^N(x-x_i)$模一下。</p><p>但是，毒瘤的出题人把时间给卡成了$\texttt{1s}$，这样做是没有分的。于是可以在分治到一个地方时循环展开秦九韶暴力算（$\texttt{wys}$在召唤）。经人肉二分可以算出来是$1024$。</p><p>可是，由于评测姬的不稳定性，交此题要避开评测高峰期，在一个夜深人静的时候交上去，才有可能<font color="#5eb95e">$\texttt{AC}$</font>啦（尽管我是在评测高峰期交的）</p><p>终于可以上代码啦qwq（写的又长又臭，包括了优化后的多项式取模）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">mod</span><span class="params">(ll fd,ll gd,ll *f,ll *g,ll *r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> ll tmpf[MAXN],tmpg[MAXN],tinv[MAXN],q[MAXN];</span><br><span class="line">    <span class="keyword">if</span>(fd&lt;gd)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;gd<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    r[i]=f[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;fd;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmpf[i]=f[fd<span class="number">-1</span>-i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;gd;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmpg[i]=g[gd<span class="number">-1</span>-i];</span><br><span class="line">    &#125;</span><br><span class="line">    inv(fd-gd+<span class="number">2</span>,tmpg,tinv);</span><br><span class="line">    ll cnt=<span class="number">1</span>,limit=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(cnt&lt;(fd&lt;&lt;<span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        cnt&lt;&lt;=<span class="number">1</span>,limit++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">       rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;limit);</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(tmpf,cnt,<span class="number">1</span>),NTT(tinv,cnt,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    q[i]=<span class="number">1l</span>l*tmpf[i]*tinv[i]%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(q,cnt,<span class="number">-1</span>),reverse(q,q+fd-gd+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmpf[i]=tinv[i]=tmpg[i]=<span class="number">0</span>;</span><br><span class="line">        q[i]=i&lt;fd-gd+<span class="number">1</span>?q[i]:<span class="number">0</span>,g[i]=i&lt;gd?g[i]:<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cnt&gt;&gt;=<span class="number">1</span>,limit--;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">       rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;limit);</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(q,cnt,<span class="number">1</span>),NTT(g,cnt,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmpf[i]=<span class="number">1l</span>l*q[i]*g[i]%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(g,cnt,<span class="number">-1</span>),NTT(tmpf,cnt,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;gd<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        r[i]=(f[i]-tmpf[i]+MOD)%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        q[i]=tmpf[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;ll&gt; tmpf2[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dnc</span><span class="params">(ll *pts,ll l,ll r,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> ll tmp[MAXN],tmp2[MAXN];</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        tmpf2[node].push_back((MOD-pts[l])%MOD),tmpf2[node].push_back(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mid=(l+r)&gt;&gt;<span class="number">1</span>,ls=node&lt;&lt;<span class="number">1</span>,rs=ls|<span class="number">1</span>;</span><br><span class="line">    dnc(pts,l,mid,ls),dnc(pts,mid+<span class="number">1</span>,r,rs);</span><br><span class="line">    ll d=tmpf2[ls].size(),d2=tmpf2[rs].size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;d;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp[i]=tmpf2[ls][i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;d2;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp2[i]=tmpf2[rs][i];</span><br><span class="line">    &#125;</span><br><span class="line">    ll cnt=<span class="number">1</span>,limit=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(cnt&lt;(d+d2))</span><br><span class="line">    &#123;</span><br><span class="line">        cnt&lt;&lt;=<span class="number">1</span>,limit++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">       rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;limit);</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(tmp,cnt,<span class="number">1</span>),NTT(tmp2,cnt,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    tmp[i]=<span class="number">1l</span>l*tmp[i]*tmp2[i]%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(tmp,cnt,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;d+d2<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmpf2[node].push_back(tmp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp[i]=tmp2[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">ll tmpf3[<span class="number">17</span>][MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dnc2</span><span class="params">(ll fd,ll *f,ll depth,ll l,ll r,ll node,ll *pts,ll *res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> ll tmp[MAXN],pw[<span class="number">17</span>];</span><br><span class="line">    <span class="keyword">if</span>(r-l&lt;=<span class="number">1024</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=l;i&lt;=r;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            ll x=pts[i],cur=f[fd<span class="number">-1</span>],v1,v2,v3,v4;</span><br><span class="line">            pw[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">16</span>;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                pw[j]=<span class="number">1l</span>l*pw[j<span class="number">-1</span>]*x%MOD;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=fd<span class="number">-2</span>;j<span class="number">-15</span>&gt;=<span class="number">0</span>;j-=<span class="number">16</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                v1=(<span class="number">1l</span>l*cur*pw[<span class="number">16</span>]+<span class="number">1l</span>l*f[j]*pw[<span class="number">15</span>]+</span><br><span class="line">                    <span class="number">1l</span>l*f[j<span class="number">-1</span>]*pw[<span class="number">14</span>]+<span class="number">1l</span>l*f[j<span class="number">-2</span>]*pw[<span class="number">13</span>])%MOD;</span><br><span class="line">                v2=(<span class="number">1l</span>l*f[j<span class="number">-3</span>]*pw[<span class="number">12</span>]+<span class="number">1l</span>l*f[j<span class="number">-4</span>]*pw[<span class="number">11</span>]+</span><br><span class="line">                    <span class="number">1l</span>l*f[j<span class="number">-5</span>]*pw[<span class="number">10</span>]+<span class="number">1l</span>l*f[j<span class="number">-6</span>]*pw[<span class="number">9</span>])%MOD;</span><br><span class="line">                v3=(<span class="number">1l</span>l*f[j<span class="number">-7</span>]*pw[<span class="number">8</span>]+<span class="number">1l</span>l*f[j<span class="number">-8</span>]*pw[<span class="number">7</span>]+</span><br><span class="line">                    <span class="number">1l</span>l*f[j<span class="number">-9</span>]*pw[<span class="number">6</span>]+<span class="number">1l</span>l*f[j<span class="number">-10</span>]*pw[<span class="number">5</span>])%MOD;</span><br><span class="line">                v4=(<span class="number">1l</span>l*f[j<span class="number">-11</span>]*pw[<span class="number">4</span>]+<span class="number">1l</span>l*f[j<span class="number">-12</span>]*pw[<span class="number">3</span>]+</span><br><span class="line">                    <span class="number">1l</span>l*f[j<span class="number">-13</span>]*pw[<span class="number">2</span>]+<span class="number">1l</span>l*f[j<span class="number">-14</span>]*pw[<span class="number">1</span>])%MOD;</span><br><span class="line">                cur=(<span class="number">0l</span>l+v1+v2+v3+v4+f[j<span class="number">-15</span>])%MOD;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=((fd<span class="number">-1</span>)&amp;<span class="number">15</span>)<span class="number">-1</span>;~j;j--)</span><br><span class="line">            &#123;</span><br><span class="line">                cur=(<span class="number">1l</span>l*cur*x+f[j])%MOD;</span><br><span class="line">            &#125;</span><br><span class="line">            res[i]=cur;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll sz=tmpf2[node].size()<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;sz+<span class="number">1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp[i]=tmpf2[node][i];</span><br><span class="line">    &#125;</span><br><span class="line">    mod(fd,sz+<span class="number">1</span>,f,tmp,tmpf3[depth]);</span><br><span class="line">    ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    dnc2(sz,tmpf3[depth],depth+<span class="number">1</span>,l,mid,node&lt;&lt;<span class="number">1</span>,pts,res);</span><br><span class="line">    dnc2(sz,tmpf3[depth],depth+<span class="number">1</span>,mid+<span class="number">1</span>,r,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>,pts,res);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;sz;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmpf3[depth][i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">eval</span><span class="params">(ll fd,ll pcnt,ll *f,ll *pts,ll *res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dnc(pts,<span class="number">0</span>,pcnt<span class="number">-1</span>,<span class="number">1</span>),dnc2(fd,f,<span class="number">0</span>,<span class="number">0</span>,pcnt<span class="number">-1</span>,<span class="number">1</span>,pts,res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多项式快速插值（凑到-800-行啦。。。）"><a href="#多项式快速插值（凑到-800-行啦。。。）" class="headerlink" title="多项式快速插值（凑到$800$行啦。。。）"></a>多项式快速插值（凑到$800$行啦。。。）</h3><h3 id="代码全家福"><a href="#代码全家福" class="headerlink" title="代码全家福"></a>代码全家福</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">qpow</span><span class="params">(ll base,ll exponent)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    li res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(exponent)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(exponent&amp;<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            res=<span class="number">1l</span>l*res*base%MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        base=<span class="number">1l</span>l*base*base%MOD,exponent&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">NTT</span><span class="params">(ll *cp,ll cnt,ll inv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll cur=<span class="number">0</span>,res=<span class="number">0</span>,omg=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;rev[i])</span><br><span class="line">        &#123;</span><br><span class="line">            swap(cp[i],cp[rev[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=cnt;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cur=i&gt;&gt;<span class="number">1</span>,res=qpow(inv==<span class="number">1</span>?G:INVG,(MOD<span class="number">-1</span>)/i);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> ll *p=cp;p!=cp+cnt;p+=i)</span><br><span class="line">        &#123;</span><br><span class="line">            omg=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cur;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                ll t=<span class="number">1l</span>l*omg*p[j+cur]%MOD,t2=p[j];</span><br><span class="line">                p[j+cur]=(t2-t+MOD)%MOD,p[j]=(t2+t)%MOD;</span><br><span class="line">                omg=<span class="number">1l</span>l*omg*res%MOD;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(inv==<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ll invl=qpow(cnt,MOD<span class="number">-2</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=cnt;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            cp[i]=<span class="number">1l</span>l*cp[i]*invl%MOD;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">deriv</span><span class="params">(ll fd,ll *f,ll *res,ll mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;fd;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        res[i<span class="number">-1</span>]=f[i]*i%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    res[fd<span class="number">-1</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">integ</span><span class="params">(ll fd,ll *f,ll *res,ll mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;fd;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        res[i]=f[i<span class="number">-1</span>]*qpow(i,mod<span class="number">-2</span>,mod)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    res[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">inv</span><span class="params">(ll fd,ll *f,ll *res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> ll tmp[MAXN];</span><br><span class="line">    <span class="keyword">if</span>(fd==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        res[<span class="number">0</span>]=qpow(f[<span class="number">0</span>],MOD<span class="number">-2</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    inv((fd+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>,f,res);</span><br><span class="line">    ll cnt=<span class="number">1</span>,limit=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(cnt&lt;(fd&lt;&lt;<span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        cnt&lt;&lt;=<span class="number">1</span>,limit++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp[i]=i&lt;fd?f[i]:<span class="number">0</span>;</span><br><span class="line">        rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;limit);</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(tmp,cnt,<span class="number">1</span>),NTT(res,cnt,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        res[i]=<span class="number">1l</span>l*(<span class="number">2</span><span class="number">-1l</span>l*tmp[i]*res[i]%MOD+MOD)%MOD*res[i]%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(res,cnt,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=fd;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        res[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">div</span><span class="params">(ll fd,ll gd,ll *f,ll *g,ll *q,ll *r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> ll tmpf[MAXN],tmpg[MAXN],tinv[MAXN];</span><br><span class="line">    <span class="keyword">if</span>(fd&lt;gd)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;fd;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    r[i]=f[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;fd;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmpf[i]=f[fd<span class="number">-1</span>-i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;gd;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmpg[i]=g[gd<span class="number">-1</span>-i];</span><br><span class="line">    &#125;</span><br><span class="line">    inv(fd-gd+<span class="number">2</span>,tmpg,tinv);</span><br><span class="line">    ll cnt=<span class="number">1</span>,limit=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(cnt&lt;(fd&lt;&lt;<span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        cnt&lt;&lt;=<span class="number">1</span>,limit++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">       rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;limit);</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(tmpf,cnt,<span class="number">1</span>),NTT(tinv,cnt,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    q[i]=(li)tmpf[i]*tinv[i]%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(q,cnt,<span class="number">-1</span>),reverse(q,q+fd-gd+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmpf[i]=<span class="number">0</span>;</span><br><span class="line">        q[i]=i&lt;fd-gd+<span class="number">1</span>?q[i]:<span class="number">0</span>,g[i]=i&lt;gd?g[i]:<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(q,cnt,<span class="number">1</span>),NTT(g,cnt,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmpf[i]=(li)q[i]*g[i]%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(q,cnt,<span class="number">-1</span>),NTT(g,cnt,<span class="number">-1</span>),NTT(tmpf,cnt,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;gd<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        r[i]=(f[i]-tmpf[i]+MOD)%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmpf[i]=tmpg[i]=tinv[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">mod</span><span class="params">(ll fd,ll gd,ll *f,ll *g,ll *r)</span><span class="comment">// mod only!</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> ll tmpf[MAXN],tmpg[MAXN],tinv[MAXN],q[MAXN];</span><br><span class="line">    <span class="keyword">if</span>(fd&lt;gd)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;gd<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    r[i]=f[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;fd;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmpf[i]=f[fd<span class="number">-1</span>-i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;gd;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmpg[i]=g[gd<span class="number">-1</span>-i];</span><br><span class="line">    &#125;</span><br><span class="line">    inv(fd-gd+<span class="number">2</span>,tmpg,tinv);</span><br><span class="line">    ll cnt=<span class="number">1</span>,limit=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(cnt&lt;(fd&lt;&lt;<span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        cnt&lt;&lt;=<span class="number">1</span>,limit++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">       rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;limit);</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(tmpf,cnt,<span class="number">1</span>),NTT(tinv,cnt,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    q[i]=<span class="number">1l</span>l*tmpf[i]*tinv[i]%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(q,cnt,<span class="number">-1</span>),reverse(q,q+fd-gd+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmpf[i]=tinv[i]=tmpg[i]=<span class="number">0</span>;</span><br><span class="line">        q[i]=i&lt;fd-gd+<span class="number">1</span>?q[i]:<span class="number">0</span>,g[i]=i&lt;gd?g[i]:<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cnt&gt;&gt;=<span class="number">1</span>,limit--;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">       rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;limit);</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(q,cnt,<span class="number">1</span>),NTT(g,cnt,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmpf[i]=<span class="number">1l</span>l*q[i]*g[i]%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(g,cnt,<span class="number">-1</span>),NTT(tmpf,cnt,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;gd<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        r[i]=(f[i]-tmpf[i]+MOD)%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        q[i]=tmpf[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ln</span><span class="params">(ll fd,ll *f,ll *res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> ll pinv[MAXN],der[MAXN];</span><br><span class="line">    ll cnt=<span class="number">1</span>,limit=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(cnt&lt;(fd&lt;&lt;<span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        cnt&lt;&lt;=<span class="number">1</span>,limit++;</span><br><span class="line">    &#125;</span><br><span class="line">    inv(fd,f,pinv);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;fd;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        der[i<span class="number">-1</span>]=(li)f[i]*i%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    der[fd<span class="number">-1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;limit);</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(pinv,cnt,<span class="number">1</span>),NTT(der,cnt,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        der[i]=(li)der[i]*pinv[i]%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(der,cnt,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;fd;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        res[i]=(li)der[i<span class="number">-1</span>]*qpow(i,MOD<span class="number">-2</span>)%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    res[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        der[i]=pinv[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">exp</span><span class="params">(ll fd,ll *f,ll *res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> ll texp[MAXN];</span><br><span class="line">    <span class="keyword">if</span>(fd==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        res[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll cnt=<span class="number">1</span>,limit=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(cnt&lt;(fd&lt;&lt;<span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        cnt&lt;&lt;=<span class="number">1</span>,limit++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exp</span>((fd+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>,f,res),ln(fd,res,texp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;limit);</span><br><span class="line">    &#125;</span><br><span class="line">    texp[<span class="number">0</span>]=(f[<span class="number">0</span>]+<span class="number">1</span>-texp[<span class="number">0</span>]+MOD)%MOD;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;fd;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        texp[i]=(f[i]-texp[i]+MOD)%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(texp,cnt,<span class="number">1</span>),NTT(res,cnt,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        res[i]=(li)res[i]*texp[i]%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(res,cnt,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        texp[i]=<span class="number">0</span>,res[i]=i&lt;fd?res[i]:<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">sqrt</span><span class="params">(ll fd,ll *f,ll *res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> ll tsqrt[MAXN];</span><br><span class="line">    ln(fd,f,tsqrt);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;fd;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        tsqrt[i]=(li)tsqrt[i]*<span class="number">499122177</span>%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exp</span>(fd,tsqrt,res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">sqrt</span><span class="params">(ll fd,ll *f,ll *res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> ll tsqrt[MAXN];</span><br><span class="line">    ll k=f[<span class="number">0</span>],cnt=<span class="number">1</span>;</span><br><span class="line">    ln(fd,f,tsqrt);</span><br><span class="line">    <span class="keyword">while</span>(cnt&lt;(fd&lt;&lt;<span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        cnt&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tsqrt[i]=tsqrt[i]&amp;<span class="number">1</span>?(tsqrt[i]+MOD)&gt;&gt;<span class="number">1</span>:tsqrt[i]&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exp</span>(fd,tsqrt,res),k=qres(k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        res[i]=(li)res[i]*k%MOD;</span><br><span class="line">        tsqrt[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">qpow</span><span class="params">(ll fd,ll *f,ll *res,ll exponent)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> ll tmp[MAXN];</span><br><span class="line">    ln(fd,f,tmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;fd;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp[i]=(li)tmp[i]*exponent%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exp</span>(fd,tmp,res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">qpow</span><span class="params">(ll fd,ll *f,ll *res,ll exponent)</span><span class="comment">// extended!</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll k,flag=<span class="number">0</span>;</span><br><span class="line">    li zero=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> ll tmpf[MAXN],tmp[MAXN],tmp2[MAXN];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;fd;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        !(f[i]||flag)?zero++:flag=<span class="number">1</span>,tmpf[i-zero]=f[i];</span><br><span class="line">    &#125;</span><br><span class="line">    k=tmpf[<span class="number">0</span>],ln(fd-zero,tmpf,tmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;fd-zero;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp[i]=(li)tmp[i]*exponent%MOD; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exp</span>(fd-zero,tmp,tmp2),zero*=exponent,k=qpow(k,exponent);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> li i=zero;i&lt;fd;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        res[i]=(li)tmp2[i-zero]*k%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;fd;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmpf[i]=tmp[i]=tmp2[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">trig</span><span class="params">(ll fd,ll *f,ll *res,ll type)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll inv2=<span class="number">499122177</span>,inv2i=qpow(I&lt;&lt;<span class="number">1</span>,MOD<span class="number">-2</span>);</span><br><span class="line">    <span class="keyword">static</span> ll tmp[MAXN],tmp2[MAXN],texp[MAXN],texp2[MAXN];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;fd;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp[i]=(li)I*f[i]%MOD,tmp2[i]=MOD-tmp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exp</span>(fd,tmp,texp),<span class="built_in">exp</span>(fd,tmp2,texp2);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;fd;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        res[i]=type?(texp[i]+texp2[i])%MOD:(texp[i]-texp2[i]+MOD)%MOD;</span><br><span class="line">        res[i]=(li)res[i]*(type?inv2:inv2i)%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">asin</span><span class="params">(ll fd,ll *f,ll *res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> ll der[MAXN],tmp[MAXN],tmp2[MAXN],tmp3[MAXN];</span><br><span class="line">    ll cnt=<span class="number">1</span>,limit=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(cnt&lt;(fd&lt;&lt;<span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        cnt&lt;&lt;=<span class="number">1</span>,limit++;</span><br><span class="line">    &#125;</span><br><span class="line">    deriv(fd,f,der);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp[i]=MOD-f[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;limit);</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(tmp,cnt,<span class="number">1</span>),NTT(f,cnt,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp[i]=(li)tmp[i]*f[i]%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(tmp,cnt,<span class="number">-1</span>),NTT(f,cnt,<span class="number">-1</span>),tmp[<span class="number">0</span>]=(tmp[<span class="number">0</span>]+<span class="number">1</span>)%MOD;</span><br><span class="line">    <span class="built_in">sqrt</span>(fd,tmp,tmp2),inv(fd,tmp2,tmp3);</span><br><span class="line">    NTT(tmp3,cnt,<span class="number">1</span>),NTT(der,cnt,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp3[i]=(li)tmp3[i]*der[i]%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(tmp3,cnt,<span class="number">-1</span>),integ(fd,tmp3,res);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">     der[i]=tmp[i]=tmp2[i]=tmp3[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">atan</span><span class="params">(ll fd,ll *f,ll *res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> ll der[MAXN],tmp[MAXN],tmp2[MAXN];</span><br><span class="line">    ll cnt=<span class="number">1</span>,limit=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(cnt&lt;(fd&lt;&lt;<span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        cnt&lt;&lt;=<span class="number">1</span>,limit++;</span><br><span class="line">    &#125;</span><br><span class="line">    deriv(fd,f,der);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp[i]=f[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;limit);</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(tmp,cnt,<span class="number">1</span>),NTT(f,cnt,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp[i]=(li)tmp[i]*f[i]%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(tmp,cnt,<span class="number">-1</span>),NTT(f,cnt,<span class="number">-1</span>),tmp[<span class="number">0</span>]=(tmp[<span class="number">0</span>]+<span class="number">1</span>)%MOD;</span><br><span class="line">    inv(fd,tmp,tmp2);</span><br><span class="line">    NTT(tmp2,cnt,<span class="number">1</span>),NTT(der,cnt,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp2[i]=(li)tmp2[i]*der[i]%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(tmp2,cnt,<span class="number">-1</span>),integ(fd,tmp2,res);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        der[i]=tmp[i]=tmp2[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;ll&gt; tmpf2[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dnc</span><span class="params">(ll *pts,ll l,ll r,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> ll tmp[MAXN],tmp2[MAXN];</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        tmpf2[node].push_back((MOD-pts[l])%MOD),tmpf2[node].push_back(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mid=(l+r)&gt;&gt;<span class="number">1</span>,ls=node&lt;&lt;<span class="number">1</span>,rs=ls|<span class="number">1</span>;</span><br><span class="line">    dnc(pts,l,mid,ls),dnc(pts,mid+<span class="number">1</span>,r,rs);</span><br><span class="line">    ll d=tmpf2[ls].size(),d2=tmpf2[rs].size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;d;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp[i]=tmpf2[ls][i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;d2;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp2[i]=tmpf2[rs][i];</span><br><span class="line">    &#125;</span><br><span class="line">    ll cnt=<span class="number">1</span>,limit=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(cnt&lt;(d+d2))</span><br><span class="line">    &#123;</span><br><span class="line">        cnt&lt;&lt;=<span class="number">1</span>,limit++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">       rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;limit);</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(tmp,cnt,<span class="number">1</span>),NTT(tmp2,cnt,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    tmp[i]=<span class="number">1l</span>l*tmp[i]*tmp2[i]%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(tmp,cnt,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;d+d2<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmpf2[node].push_back(tmp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp[i]=tmp2[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">ll tmpf3[<span class="number">17</span>][MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dnc2</span><span class="params">(ll fd,ll *f,ll depth,ll l,ll r,ll node,ll *res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> ll tmp[MAXN],pw[<span class="number">17</span>];</span><br><span class="line">    <span class="keyword">if</span>(r-l&lt;=<span class="number">1024</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=l;i&lt;=r;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            ll x=pts[i],cur=f[fd<span class="number">-1</span>],v1,v2,v3,v4;</span><br><span class="line">            pw[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">16</span>;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                pw[j]=<span class="number">1l</span>l*pw[j<span class="number">-1</span>]*x%MOD;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=fd<span class="number">-2</span>;j<span class="number">-15</span>&gt;=<span class="number">0</span>;j-=<span class="number">16</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                v1=(<span class="number">1l</span>l*cur*pw[<span class="number">16</span>]+<span class="number">1l</span>l*f[j]*pw[<span class="number">15</span>]+</span><br><span class="line">                    <span class="number">1l</span>l*f[j<span class="number">-1</span>]*pw[<span class="number">14</span>]+<span class="number">1l</span>l*f[j<span class="number">-2</span>]*pw[<span class="number">13</span>])%MOD;</span><br><span class="line">                v2=(<span class="number">1l</span>l*f[j<span class="number">-3</span>]*pw[<span class="number">12</span>]+<span class="number">1l</span>l*f[j<span class="number">-4</span>]*pw[<span class="number">11</span>]+</span><br><span class="line">                    <span class="number">1l</span>l*f[j<span class="number">-5</span>]*pw[<span class="number">10</span>]+<span class="number">1l</span>l*f[j<span class="number">-6</span>]*pw[<span class="number">9</span>])%MOD;</span><br><span class="line">                v3=(<span class="number">1l</span>l*f[j<span class="number">-7</span>]*pw[<span class="number">8</span>]+<span class="number">1l</span>l*f[j<span class="number">-8</span>]*pw[<span class="number">7</span>]+</span><br><span class="line">                    <span class="number">1l</span>l*f[j<span class="number">-9</span>]*pw[<span class="number">6</span>]+<span class="number">1l</span>l*f[j<span class="number">-10</span>]*pw[<span class="number">5</span>])%MOD;</span><br><span class="line">                v4=(<span class="number">1l</span>l*f[j<span class="number">-11</span>]*pw[<span class="number">4</span>]+<span class="number">1l</span>l*f[j<span class="number">-12</span>]*pw[<span class="number">3</span>]+</span><br><span class="line">                    <span class="number">1l</span>l*f[j<span class="number">-13</span>]*pw[<span class="number">2</span>]+<span class="number">1l</span>l*f[j<span class="number">-14</span>]*pw[<span class="number">1</span>])%MOD;</span><br><span class="line">                cur=(<span class="number">0l</span>l+v1+v2+v3+v4+f[j<span class="number">-15</span>])%MOD;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=((fd<span class="number">-1</span>)&amp;<span class="number">15</span>)<span class="number">-1</span>;~j;j--)</span><br><span class="line">            &#123;</span><br><span class="line">                cur=(<span class="number">1l</span>l*cur*x+f[j])%MOD;</span><br><span class="line">            &#125;</span><br><span class="line">            res[i]=cur;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll sz=tmpf2[node].size()<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;sz+<span class="number">1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp[i]=tmpf2[node][i];</span><br><span class="line">    &#125;</span><br><span class="line">    mod(fd,sz+<span class="number">1</span>,f,tmp,tmpf3[depth]);</span><br><span class="line">    ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    dnc2(sz,tmpf3[depth],depth+<span class="number">1</span>,l,mid,node&lt;&lt;<span class="number">1</span>,res);</span><br><span class="line">    dnc2(sz,tmpf3[depth],depth+<span class="number">1</span>,mid+<span class="number">1</span>,r,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>,res);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;sz;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmpf3[depth][i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">eval</span><span class="params">(ll fd,ll pcnt,ll *f,ll *pts,ll *res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dnc(pts,<span class="number">0</span>,pcnt<span class="number">-1</span>,<span class="number">1</span>),dnc2(fd,f,<span class="number">0</span>,<span class="number">0</span>,pcnt<span class="number">-1</span>,<span class="number">1</span>,res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 多项式 </tag>
            
            <tag> FFT </tag>
            
            <tag> NTT </tag>
            
            <tag> 数论，数学 </tag>
            
            <tag> 微积分初步 </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P4213」【模板】杜教筛（Sum）</title>
      <link href="/2019/03/10/%E3%80%8CLuogu-P4213%E3%80%8D%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%9D%9C%E6%95%99%E7%AD%9B%EF%BC%88Sum%EF%BC%89/"/>
      <url>/2019/03/10/%E3%80%8CLuogu-P4213%E3%80%8D%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%9D%9C%E6%95%99%E7%AD%9B%EF%BC%88Sum%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>一共有$T$组数据，对于每组数据，求$\sum\limits_{i=1}^{n}\varphi(i)$和$\sum\limits_{i=1}^{n}\mu(i)$</p><p>$\texttt{Data Range:}T\leq 10,n\leq 2^{31}-1$<br><a id="more"></a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><h4 id="积性函数"><a href="#积性函数" class="headerlink" title="积性函数"></a>积性函数</h4><p>对于一个数论函数$f$，如果对于任意的<strong>互质整数</strong>$i,j$，使得$f(ij)=f(i)f(j)$，那么说$f$是一个<strong>积性函数</strong>。</p><p>如果对于任意的<strong>整数</strong>$i,j$，使得$f(ij)=f(i)f(j)$，那么说$f$是一个<strong>完全积性函数</strong>。</p><ul><li><p>常见的积性函数：$\varphi,\mu,\sigma,d$</p></li><li><p>常见的完全积性函数：$\epsilon,id,I$</p></li></ul><p>这里解释一下完全积性函数下的三个函数。</p><p>$\epsilon(n)=[n=1],I(n)=1,id(n)=n$</p><h4 id="狄利克雷卷积"><a href="#狄利克雷卷积" class="headerlink" title="狄利克雷卷积"></a>狄利克雷卷积</h4><p>对于两个数论函数$f,g$，它们的狄利克雷卷积是$\sum\limits_{d\vert n}f(d)g(\frac{n}{d})$，记作$(f\ast g)(n)$</p>]]></content>
      
      
      
        <tags>
            
            <tag> BZOJ </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 数论，数学 </tag>
            
            <tag> 筛法 </tag>
            
            <tag> 线性筛 </tag>
            
            <tag> 杜教筛 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P4726」【模板】多项式指数函数</title>
      <link href="/2019/02/18/%E3%80%8CLuogu-P4726%E3%80%8D%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E5%A4%9A%E9%A1%B9%E5%BC%8F%E6%8C%87%E6%95%B0%E5%87%BD%E6%95%B0/"/>
      <url>/2019/02/18/%E3%80%8CLuogu-P4726%E3%80%8D%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E5%A4%9A%E9%A1%B9%E5%BC%8F%E6%8C%87%E6%95%B0%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>给定一个$n-1$次整系数多项式$F(x)$，求在$\bmod x^n$意义下的整系数多项式$G(x)$，使得$G(x)=e^{F(x)}$。</p><p>在$\bmod 998244353$下进行，且$F(x)$系数均在$[0,998244352]$范围内。<br><a id="more"></a><br>首先考虑与多项式对数函数一样的做法，两边求导，会得到这样一个式子：</p><script type="math/tex; mode=display">G^\prime(x)=F^\prime(x)e^{F(x)}</script><p>但是$e^{F(x)}$没有消去，所以这种方法就这样活生生地被搞掉了。</p><p>然后考虑与多项式求逆一样去倍增。假设知道$H(x)=e^{F(x)}\pmod x^{\lceil\frac{n}{2}\rceil}$，想推出$G(x)$，那么肿么办？</p><p>一个常见的策略是牛顿迭代。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 多项式 </tag>
            
            <tag> FFT </tag>
            
            <tag> NTT </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 数论，数学 </tag>
            
            <tag> 倍增 </tag>
            
            <tag> 微积分初步 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P4725」【模板】多项式对数函数</title>
      <link href="/2019/02/18/%E3%80%8CLuogu-P4725%E3%80%8D%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E5%A4%9A%E9%A1%B9%E5%BC%8F%E5%AF%B9%E6%95%B0%E5%87%BD%E6%95%B0/"/>
      <url>/2019/02/18/%E3%80%8CLuogu-P4725%E3%80%8D%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E5%A4%9A%E9%A1%B9%E5%BC%8F%E5%AF%B9%E6%95%B0%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>给定一个$n-1$次整系数多项式$F(x)$，求在$\bmod x^n$意义下的整系数多项式$G(x)$，使得$G(x)=\ln F(x)$。</p><p>在$\bmod 998244353$下进行，且$F(x)$系数均在$[0,998244352]$范围内。<br><a id="more"></a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.org/problemnew/show/P4725" target="_blank" rel="noopener">Luogu P4725</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>首先声明，这题要使用微积分知识。（不会的可以看我的微积分初步的笔记（一个大坑））</p><p>自然对数直接求感觉很不对劲，但是有这样一个好东西：</p><script type="math/tex; mode=display">\cfrac{\mathrm{d}}{\mathrm{d}x}\ln x=\cfrac{1}{x}</script><p>所以说可以考虑将等式两边求导，右边用链式求导法则搞一下，会得到这个</p><script type="math/tex; mode=display">G^\prime(x)=\cfrac{F^\prime(x)}{F(x)}</script><p>右边很明显，是$F(x)$的逆乘上它的导数，使用多项式求导和求逆即可算出右边。左边是$G(x)$的导数，而右边是可以求出的多项式，所以可以对右边在膜意义下求不定积分求出$G(x)$，即</p><script type="math/tex; mode=display">G(x)=\int \cfrac{F^\prime(x)}{F(x)}</script><p>时间复杂度当然只有多项式求逆的$O(n\log n)$啦qwq</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">3e5</span>+<span class="number">51</span>,MOD=<span class="number">998244353</span>,G=<span class="number">3</span>;</span><br><span class="line">ll fd,gd;</span><br><span class="line">ll f[MAXN],res[MAXN],tmp[MAXN],pinv[MAXN],der[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">qadd</span><span class="params">(ll x,ll y,ll mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x+y&gt;mod?x+y-mod:x+y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">qmin</span><span class="params">(ll x,ll y,ll mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x-y&lt;<span class="number">0</span>?x-y+mod:x-y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">qpow</span><span class="params">(ll base,ll exponent,ll mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!exponent)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll temp=qpow(base,exponent&gt;&gt;<span class="number">1</span>,mod),res=temp*temp%mod;</span><br><span class="line">    <span class="keyword">if</span>(exponent&amp;<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        res=res*base%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">NTT</span><span class="params">(ll *cp,ll cnt,ll inv,ll mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll lim=<span class="number">0</span>,cur=<span class="number">0</span>,res=<span class="number">0</span>,omg=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((<span class="number">1</span>&lt;&lt;lim)&lt;cnt)</span><br><span class="line">    &#123;</span><br><span class="line">    lim++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cur=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;lim;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((i&gt;&gt;j)&amp;<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                cur|=(<span class="number">1</span>&lt;&lt;(lim-j<span class="number">-1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;cur)</span><br><span class="line">        &#123;</span><br><span class="line">            swap(cp[i],cp[cur]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=cnt;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cur=i&gt;&gt;<span class="number">1</span>,res=qpow(G,(mod<span class="number">-1</span>)/i,mod);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> ll *p=cp;p!=cp+cnt;p+=i)</span><br><span class="line">        &#123;</span><br><span class="line">            omg=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cur;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                ll t=omg*p[j+cur]%mod;</span><br><span class="line">                p[j+cur]=qmin(p[j],t,mod);</span><br><span class="line">                p[j]=qadd(p[j],t,mod);</span><br><span class="line">                omg=omg*res%mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(inv==<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ll invl=qpow(cnt,mod<span class="number">-2</span>,mod);</span><br><span class="line">        cp[<span class="number">0</span>]=cp[<span class="number">0</span>]*invl%mod;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt&gt;&gt;<span class="number">1</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            cp[i]=cp[i]*invl%mod;</span><br><span class="line">            <span class="keyword">if</span>(i!=cnt-i)</span><br><span class="line">            &#123;</span><br><span class="line">                cp[cnt-i]=cp[cnt-i]*invl%mod;</span><br><span class="line">            &#125;</span><br><span class="line">            swap(cp[i],cp[cnt-i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">deriv</span><span class="params">(ll fd,ll *f,ll *res,ll mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;fd;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        res[i<span class="number">-1</span>]=f[i]*i%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    res[fd<span class="number">-1</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">integ</span><span class="params">(ll fd,ll *f,ll *res,ll mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;fd;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        res[i]=f[i<span class="number">-1</span>]*qpow(i,mod<span class="number">-2</span>,mod)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    res[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">inv</span><span class="params">(ll fd,ll *f,ll *res,ll mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(fd==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        res[<span class="number">0</span>]=qpow(f[<span class="number">0</span>],mod<span class="number">-2</span>,mod);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    inv((fd+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>,f,res,mod);</span><br><span class="line">    ll cnt=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(cnt&lt;(fd&lt;&lt;<span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        cnt&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp[i]=i&lt;fd?f[i]:<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(tmp,cnt,<span class="number">1</span>,mod),NTT(res,cnt,<span class="number">1</span>,mod);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        res[i]=qmin(<span class="number">2</span>,tmp[i]*res[i]%mod,mod)*res[i]%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(res,cnt,<span class="number">-1</span>,mod);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=fd;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        res[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ln</span><span class="params">(ll fd,ll *f,ll *res,ll mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll cnt=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(cnt&lt;(fd&lt;&lt;<span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        cnt&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    inv(fd,f,pinv,mod),deriv(fd,f,der,mod);</span><br><span class="line">    NTT(pinv,cnt,<span class="number">1</span>,mod),NTT(der,cnt,<span class="number">1</span>,mod);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        der[i]=der[i]*pinv[i]%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(der,cnt,<span class="number">-1</span>,mod),integ(fd,der,res,mod);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        der[i]=pinv[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fd=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;fd;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        f[i]=read();</span><br><span class="line">    &#125;</span><br><span class="line">    ln(fd,f,res,MOD);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;fd;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld "</span>,res[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 多项式 </tag>
            
            <tag> FFT </tag>
            
            <tag> NTT </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 数论，数学 </tag>
            
            <tag> 微积分初步 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>BZOJ题解合集</title>
      <link href="/2019/01/27/BZOJ%E9%A2%98%E8%A7%A3%E5%90%88%E9%9B%86/"/>
      <url>/2019/01/27/BZOJ%E9%A2%98%E8%A7%A3%E5%90%88%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<p>较慢更新ing……<br><a id="more"></a></p><h2 id="1001-1999"><a href="#1001-1999" class="headerlink" title="1001-1999"></a>1001-1999</h2><h3 id="1001-1099"><a href="#1001-1099" class="headerlink" title="1001-1099"></a>1001-1099</h3><h4 id="1001-1009"><a href="#1001-1009" class="headerlink" title="1001-1009"></a>1001-1009</h4><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=1002" target="_blank" rel="noopener"><strong>1002 [FJOI2007]轮状病毒</strong></a></p><p>简单的$\texttt{Matrix-Tree}$定理的运用，找规律+高精。</p><p><a href="https://karry5307.github.io/2019/01/27/%E3%80%8CLuogu-P2144%E3%80%8D-FJOI2007-%E8%BD%AE%E7%8A%B6%E7%97%85%E6%AF%92/">题解</a></p><h4 id="1011-1019"><a href="#1011-1019" class="headerlink" title="1011-1019"></a>1011-1019</h4><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=1012" target="_blank" rel="noopener"><strong>1012 [JSOI2008]最大数maxnumber</strong></a></p><p>线段树裸题。</p><p>题解</p><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=1013" target="_blank" rel="noopener"><strong>1013 [JSOI2008]球形空间产生器sphere</strong></a></p><p>构造二次方程组，相邻两项作差得到一次方程组，高斯消元即可。</p><p>题解</p><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=1015" target="_blank" rel="noopener"><strong>1015 [JSOI2008]星球大战starwar</strong></a></p><p>考虑逆推加边，并查集即可。</p><p>题解</p><h3 id="1040-1049"><a href="#1040-1049" class="headerlink" title="1040-1049"></a>1040-1049</h3><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=1041" target="_blank" rel="noopener"><strong>1041 [HAOI2008]圆上的整点</strong></a></p><p>比较复杂的神仙数论题。</p><p><a href="https://karry5307.github.io/2018/12/16/%E3%80%8CLuogu-P2508%E3%80%8D-HAOI2008-%E5%9C%86%E4%B8%8A%E7%9A%84%E6%95%B4%E7%82%B9/">题解</a></p><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=1042" target="_blank" rel="noopener"><strong>1042 [HAOI2008]硬币购物</strong></a></p><p>DP+容斥。</p><p>题解</p><p>今天暂时更到这里。</p>]]></content>
      
      
      
        <tags>
            
            <tag> BZOJ </tag>
            
            <tag> 合集 </tag>
            
            <tag> 未完待续 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P2144」[FJOI2007]轮状病毒</title>
      <link href="/2019/01/27/%E3%80%8CLuogu-P2144%E3%80%8D-FJOI2007-%E8%BD%AE%E7%8A%B6%E7%97%85%E6%AF%92/"/>
      <url>/2019/01/27/%E3%80%8CLuogu-P2144%E3%80%8D-FJOI2007-%E8%BD%AE%E7%8A%B6%E7%97%85%E6%AF%92/</url>
      
        <content type="html"><![CDATA[<p>有$n+1$个点组成一个无向图，其中$n$个点组成一个环，剩下一个点向这$n$个点各连一条边，求这个图不同的生成树个数。</p><p>Data Range：$n\leq 100$<br><a id="more"></a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.org/problemnew/show/P2144" target="_blank" rel="noopener">Luogu P2144</a><br><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=1002" target="_blank" rel="noopener">BZOJ 1002</a><br><a href="http://codevs.cn/problem/2886/" target="_blank" rel="noopener">CodeVS 2886</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>既然这个题要你生成树数量，那么就可以用$\texttt{Matrix-Tree}$定理乱搞了。</p><p>设$F_i$表示$n=i$时的答案，那么有：</p><p>$F_1=1,F_2=5,F_3=16,F_4=45\cdots$</p><p>好像看不出来啊，然而你可以打一个$O(n^3)$的高斯消元求行列式，所以又可以算出一下数据：</p><p>$F_5=121,F_6=320$</p><p>那么可以看到奇数项都是平方数，于是想把偶数项拆成有关平方数的式子。</p><p>那么$F_1=1^2,F_2=3^2-4,F_3=4^2,F_4=7^2-4,F_5=11^2,F_6=18^2-4$</p><p>于是考虑怎么推出这些平方项的。把它们提出来，会是这样：</p><p>$1,3,4,7,11,18\cdots$</p><p>所以这一项会是前两项的和，于是就可以开开心心写了。</p><p>但是$n\leq 100$，所以要用到高精qwq。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">151</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BigInt</span>&#123;</span></span><br><span class="line">    ll digit;</span><br><span class="line">    ll num[MAXN];</span><br><span class="line">    BigInt()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(num,<span class="number">0</span>,<span class="keyword">sizeof</span>(num));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">void</span> <span class="keyword">operator</span> =(ll x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(x)</span><br><span class="line">        &#123;</span><br><span class="line">            num[digit++]=x%<span class="number">100000000</span>,x/=<span class="number">100000000</span>;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">op</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld"</span>,num[digit<span class="number">-1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=digit<span class="number">-2</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!num[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"00000000"</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ll rest=<span class="number">7</span>-(ll)(<span class="built_in">log10</span>(num[i]));</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=rest;j;j--)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">putchar</span>(<span class="string">'0'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld"</span>,num[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;; </span><br><span class="line">BigInt res;</span><br><span class="line">BigInt sqr[<span class="number">151</span>];</span><br><span class="line">ll num;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> BigInt <span class="keyword">operator</span> +(BigInt x,BigInt y)</span><br><span class="line">&#123;</span><br><span class="line">    BigInt res;</span><br><span class="line">    ll carry=<span class="number">0</span>;</span><br><span class="line">    res.digit=max(x.digit,y.digit)+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=res.digit;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        res.num[i]=x.num[i]+y.num[i]+carry;</span><br><span class="line">        carry=res.num[i]/<span class="number">100000000</span>,res.num[i]%=<span class="number">100000000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!res.num[res.digit<span class="number">-1</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        res.digit--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> BigInt <span class="keyword">operator</span> *(BigInt x,ll y)</span><br><span class="line">&#123;</span><br><span class="line">    BigInt res;</span><br><span class="line">    ll carry=<span class="number">0</span>;</span><br><span class="line">    res.digit=x.digit+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=res.digit;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        res.num[i]=x.num[i]*y+carry;</span><br><span class="line">        carry=res.num[i]/<span class="number">100000000</span>,res.num[i]%=<span class="number">100000000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!res.num[res.digit<span class="number">-1</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        res.digit--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> BigInt <span class="keyword">operator</span> *(BigInt x,BigInt y)</span><br><span class="line">&#123;</span><br><span class="line">    BigInt res;</span><br><span class="line">    res.digit=x.digit+y.digit;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;res.digit;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>,k=i;k&gt;=<span class="number">0</span>;j++,k--)</span><br><span class="line">        &#123;</span><br><span class="line">            res.num[i]+=x.num[j]*y.num[k];</span><br><span class="line">            res.num[i+<span class="number">1</span>]+=res.num[i]/<span class="number">100000000</span>,res.num[i]%=<span class="number">100000000</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!res.num[res.digit<span class="number">-1</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        res.digit--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">(ll num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sqr[<span class="number">1</span>]=<span class="number">1</span>,sqr[<span class="number">2</span>]=<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=num;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sqr[i]=sqr[i<span class="number">-1</span>]+sqr[i<span class="number">-2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    num=read();</span><br><span class="line">    setup(num);</span><br><span class="line">    res=sqr[num]*sqr[num],res.num[<span class="number">0</span>]-=(num&amp;<span class="number">1</span>)?<span class="number">0</span>:<span class="number">4</span>;</span><br><span class="line">    res.op();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> BZOJ </tag>
            
            <tag> 图论 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> CodeVS </tag>
            
            <tag> 组合数学 </tag>
            
            <tag> 生成树 </tag>
            
            <tag> Matrix-Tree定理 </tag>
            
            <tag> 高精 </tag>
            
            <tag> 打表 </tag>
            
            <tag> 找规律 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P4245」【模板】任意模数NTT</title>
      <link href="/2019/01/26/%E3%80%8CLuogu-P4245%E3%80%8D%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E4%BB%BB%E6%84%8F%E6%A8%A1%E6%95%B0NTT/"/>
      <url>/2019/01/26/%E3%80%8CLuogu-P4245%E3%80%8D%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E4%BB%BB%E6%84%8F%E6%A8%A1%E6%95%B0NTT/</url>
      
        <content type="html"><![CDATA[<p>给定两个$n$次多项式$F(x),G(x)$的系数数列$a,b$和一个整数$p$，求$F(x)G(x)$在$\bmod p$意义下的值，<strong>不保证$p$可以分解成$a\cdot 2^k+1$的形式。</strong></p><p>Data Range：$1\leq n\leq 10^5,0\leq a_i,b_i\leq 10^9,2\leq p\leq 10^9+9$<br><a id="more"></a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.org/problemnew/show/P4245" target="_blank" rel="noopener">Luogu P4245</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>如果$p$是形如$a\cdot 2^k+1$的质数，可以直接刚$\texttt{NTT}$，但是布星啊，样例中的$p$都不是质数，所以说怎么办呢？</p><p>用$\texttt{NTT}$计算多项式乘法的最终结果是取模后的，所以考虑采用$\texttt{CRT}$合并答案。</p><p>但是，答案要在$\texttt{long long}$范围内唯一，所以取两个模数布星，要取三个，即所谓的三模数$\texttt{NTT}$。</p><p>这里我个人倾向于取$p_1=469762049$，$p_2=998244353$和$p_3=1004535809$，因为这三个数的原根是$3$。</p><p>于是可以通过$\texttt{NTT}$算出所给的多项式在模$p_1,p_2,p_3$意义下的乘积。</p><p>坑。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">4e5</span>+<span class="number">51</span>,G=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">const</span> ll MOD1=<span class="number">469762049</span>,MOD2=<span class="number">998244353</span>,MOD3=<span class="number">1004535809</span>;</span><br><span class="line"><span class="keyword">const</span> ll MOD=<span class="number">468937312667959297</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Polynomial</span>&#123;</span></span><br><span class="line">    ll deg;</span><br><span class="line">    ll coeff[MAXN];</span><br><span class="line">&#125;;</span><br><span class="line">Polynomial x,y,res1,res2,res3;</span><br><span class="line">ll cnt,mod;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">qadd</span><span class="params">(ll x,ll y,ll mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x+y&gt;mod?x+y-mod:x+y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">qmin</span><span class="params">(ll x,ll y,ll mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x-y&lt;<span class="number">0</span>?x-y+mod:x-y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">qmul</span><span class="params">(ll x,ll y,ll mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x%=mod,y%=mod;</span><br><span class="line">    <span class="keyword">return</span> ((x*y-(ll)((ll)((<span class="keyword">long</span> <span class="keyword">double</span>)x/mod*y+<span class="number">0.5</span>)*mod))%mod+mod)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">qpow</span><span class="params">(ll base,ll exponent,ll mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!exponent)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll temp=qpow(base,exponent&gt;&gt;<span class="number">1</span>,mod),res=temp*temp%mod;</span><br><span class="line">    <span class="keyword">if</span>(exponent&amp;<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        res=res*base%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">NTT</span><span class="params">(ll *cp,ll cnt,ll inv,ll mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll lim=<span class="number">0</span>,cur=<span class="number">0</span>,res=<span class="number">0</span>,omg=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((<span class="number">1</span>&lt;&lt;lim)&lt;cnt)</span><br><span class="line">    &#123;</span><br><span class="line">    lim++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cur=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;lim;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((i&gt;&gt;j)&amp;<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                cur|=(<span class="number">1</span>&lt;&lt;(lim-j<span class="number">-1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;cur)</span><br><span class="line">        &#123;</span><br><span class="line">            swap(cp[i],cp[cur]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=cnt;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cur=i&gt;&gt;<span class="number">1</span>,res=qpow(G,(mod<span class="number">-1</span>)/i,mod);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> ll *p=cp;p!=cp+cnt;p+=i)</span><br><span class="line">        &#123;</span><br><span class="line">            omg=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cur;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                ll t=omg*p[j+cur]%mod;</span><br><span class="line">                p[j+cur]=qmin(p[j],t,mod);</span><br><span class="line">                p[j]=qadd(p[j],t,mod);</span><br><span class="line">                omg=omg*res%mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Polynomial <span class="title">mul</span><span class="params">(Polynomial x,Polynomial y,ll mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Polynomial res;</span><br><span class="line">    ll cnt=<span class="number">1</span>,inv;</span><br><span class="line">    <span class="keyword">static</span> ll cpx[MAXN],cpy[MAXN];</span><br><span class="line">    <span class="built_in">memset</span>(cpx,<span class="number">0</span>,<span class="keyword">sizeof</span>(cpx)),<span class="built_in">memset</span>(cpy,<span class="number">0</span>,<span class="keyword">sizeof</span>(cpy));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=x.deg;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cpx[i]=x.coeff[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=y.deg;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cpy[i]=y.coeff[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(cnt&lt;=x.deg+y.deg)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(cpx,cnt,<span class="number">1</span>,mod),NTT(cpy,cnt,<span class="number">1</span>,mod);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cpx[i]=cpx[i]*cpy[i]%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(cpx,cnt,<span class="number">-1</span>,mod);</span><br><span class="line">    res.deg=x.deg+y.deg,inv=qpow(cnt,mod<span class="number">-2</span>,mod);</span><br><span class="line">    cpx[<span class="number">0</span>]=cpx[<span class="number">0</span>]*inv%mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt&gt;&gt;<span class="number">1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cpx[i]=cpx[i]*inv%mod;</span><br><span class="line">        <span class="keyword">if</span>(i!=cnt-i)</span><br><span class="line">        &#123;</span><br><span class="line">            cpx[cnt-i]=cpx[cnt-i]*inv%mod;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(cpx[i],cpx[cnt-i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=res.deg;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        res.coeff[i]=qmin(cpx[i],<span class="number">0</span>,mod);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">CRT</span><span class="params">(ll r1,ll r2,ll r3,ll mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll inv1=<span class="number">208783132</span>,inv2=<span class="number">395249030</span>;</span><br><span class="line">    ll r=qadd(qmul(qmul(qmin(r1,r2,MOD1),inv1,MOD1),MOD2,MOD),r2,MOD);</span><br><span class="line">    ll k=qmul(qmin(r3,r,MOD3),inv2,MOD3);</span><br><span class="line">    <span class="keyword">return</span> ((k%mod)*(MOD%mod)%mod+r)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x.deg=read(),y.deg=read(),mod=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=x.deg;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        x.coeff[i]=read()%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=y.deg;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        y.coeff[i]=read()%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    res1=mul(x,y,MOD1),res2=mul(x,y,MOD2),res3=mul(x,y,MOD3);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=res1.deg;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld "</span>,CRT(res1.coeff[i],res2.coeff[i],res3.coeff[i],mod));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 多项式 </tag>
            
            <tag> FFT </tag>
            
            <tag> NTT </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 数论，数学 </tag>
            
            <tag> CRT </tag>
            
            <tag> MTT </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>学习笔记·多项式专题（一）</title>
      <link href="/2019/01/20/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E5%A4%9A%E9%A1%B9%E5%BC%8F%E4%B8%93%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2019/01/20/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E5%A4%9A%E9%A1%B9%E5%BC%8F%E4%B8%93%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><del>多项式，爽！</del><br><a id="more"></a></p><h3 id="FFT"><a href="#FFT" class="headerlink" title="FFT"></a>FFT</h3><h4 id="卷积与-texttt-DFT-IDFT-的思想"><a href="#卷积与-texttt-DFT-IDFT-的思想" class="headerlink" title="卷积与$\texttt{DFT,IDFT}$的思想"></a>卷积与$\texttt{DFT,IDFT}$的思想</h4><p>$\texttt{FFT}$，即快速傅里叶变换（英文名$\texttt{Fast Fourier Transform}$），是一个用来求<strong>卷积</strong>的方法。</p><p>卷积这个词以后会经常用到，所以先普及一下这个词到底是什么意思。</p><p>形如$h_n=\sum\limits_{i}f_ig_{n-i}$的式子，将$h$称为$f$和$g$的卷积。</p><p>但是这个东西有一个更直观的名字：<strong>多项式乘法</strong>！</p><p>为什么呢？这里解释一下。</p><p>比如说有两个$n$次的多项式$F(x)$和$G(x)$，它们乘起来为$H(x)$，这些多项式的系数数列依次为$f,g,h$，有</p><script type="math/tex; mode=display">h_i=\sum\limits_{j}f_jg_{i-j}</script><p>为什么呢？</p><p>众所周知，$H(x)=\sum\limits_{i=0}^{n}h_ix^i$。</p><p>为了凑一个$x^i$，如果$F(x)$出$f_jx^j$的话，那么$G(x)$只能出$g_{i-j}x^{i-j}$。</p><p>所以，$h_ix^i=\sum\limits_{j=0}^{i}f_jx^j\cdot g_{i-j}x^{i-j}$</p><p>把$x^i$约去，有</p><script type="math/tex; mode=display">h_i=\sum\limits_{j}f_jg_{i-j}</script><p>然而，普通的多项式乘法要对$F(x)$和$G(x)$每一项进行相乘，时间复杂度为$O(n^2)$，布星。</p><p>所以说，有没有更快一点的方法呢？</p><p>还真有！！</p><p>首先看一个问题。</p><p>给定有$n$个点$(a_i,F(a_i))$。$F(x)$是几次多项式呢？怎么求$F(x)$呢？</p><p>先考虑一个简单的，比如说给出了两个点,$(0,1)$和$(1,3)$，怎么求$F(x)$？</p><p>比如说，假设$F(x)$是一次的。那么设$F(x)=a_0x+a_1$，于是将$(0,1),(1,3)$代入$F(x)$，那么有：</p><script type="math/tex; mode=display">\begin{cases}a_1=1 \\ a_0+a_1=3\end{cases}</script><p>解得</p><script type="math/tex; mode=display">\begin{cases}a_0=2 \\ a_1=1\end{cases}</script><p>而当$F(x)$为二次多项式时，即$F(x)=a_0x^2+a_1x+a_2$，那么可列出如下式子：</p><script type="math/tex; mode=display">\begin{cases}a_2=1 \\ a_0+a_1+a_2=3\end{cases}</script><p>这样子我们最多得到</p><script type="math/tex; mode=display">\begin{cases}a_0+a_1=2 \\ a_2=3\end{cases}</script><p>$F(x)$为二次多项式就已经不能精确解出系数的值了，那么更高次多项式更不行了。</p><p>所以说给两个点的值能确定一个一次多项式。</p><p>可以尝试一下$3$个点，它是可以确定一个二次多项式的（可能不能确定一个一次多项式，因为方程组可能无解）。</p><p>根据以上的实验<del>和常识</del>可知，$n$个点<strong>最多</strong>确定一个$n-1$次多项式。</p><p>那么我们现在理论上证明一下。</p><p>首先看一个小问题。</p><p>给定$m$个值$a_i$和$n$次多项式$F(x)$，求$F(a_i)$。</p><p>考虑把它写成矩阵的形式，有</p><script type="math/tex; mode=display">\begin{pmatrix}1  & \cdots & a_1^n\\ \vdots & \ddots &  \vdots \\ 1 & \cdots & a_m^n \end{pmatrix}\times\begin{pmatrix}f_0 \\ \vdots \\ f_n \end{pmatrix}=\begin{pmatrix}F(a_1) \\ \vdots \\ F(a_n) \end{pmatrix}</script><p>所以</p><script type="math/tex; mode=display">\begin{pmatrix}f_0 \\ \vdots \\ f_n \end{pmatrix}=\begin{pmatrix}F(a_1) \\ \vdots \\ F(a_n) \end{pmatrix}\times \begin{pmatrix}1  & \cdots & a_1^n\\ \vdots & \ddots &  \vdots \\ 1 & \cdots & a_m^n \end{pmatrix}^{-1}</script><p>根据基本线代常识，<strong>只有方阵才是可逆矩阵</strong>，所以只有右边的矩阵为方阵，即为范德蒙德矩阵时它才可能有逆，也即可以解出系数数列$f$。</p><p>然而，范德蒙德矩阵吗一定可逆吗？</p><p>由范德蒙德矩阵的行列式公式可知，矩阵可逆当且仅当$a_1,a_2\cdots a_m$两两不等。</p><p>这里就证明了<code>最多</code>这个条件。</p><p>所以$n+1=m$，即$n=m-1$，即确定的多项式为$m-1$次。</p><p>所以说，一个$n-1$次多项式与它的曲线上的$n$个点的集合是等价的，而这个集合，叫做多项式的<strong>点值表达</strong>。</p><p>下面说点值表达是怎么优化多项式乘法的。</p><p>两个多项式相乘，如果是用系数乘法，是$O(n^2)$的，但点值乘法只需对应的点值相乘，时间复杂度为$O(n)$。</p><p>但是你插值的时候会出问题。</p><p>两个$n$次多项式相乘，乘出来的多项式明摆的是$2n$次的，可是两个$n$次多项式给出的点值只有$n+1$个。在称完之后插不出确定的多项式。怎么办？</p><p>考虑扔一些点上去凑即可。这些点只是起到附加作用，并没有对原来的多项式有影响。</p><p>所以点值表达有什么用？还不是加速多项式乘法。</p><p>于是自然的考虑<strong>先求点值，相乘后插值即可</strong>。这就是$\texttt{FFT}$的流程。</p><p>把<strong>系数</strong>表达转换为<strong>点值</strong>表达叫做$\texttt{DFT}$，</p><p>把<strong>点值</strong>表达转换为<strong>系数</strong>表达叫做$\texttt{IDFT}$。</p><p>什么鬼！！求值是$O(n^2)$的，插值是$O(n^3)$的，你跟我讲这个？？</p><p>别着急。你只要代的数好的话就可以大大简化。</p><h4 id="复数的性质以及单位根的引入"><a href="#复数的性质以及单位根的引入" class="headerlink" title="复数的性质以及单位根的引入"></a>复数的性质以及单位根的引入</h4><p>先来回答上面的问题。</p><p>想我们这种小蒟蒻只会代入人畜无害的有理数，但这对计算无益。</p><p>但这时，有一位搞复数的$\texttt{dalao}$横空出世，他就是傅里叶。</p><p>这人啊，把单位根代入多项式想求点值表达，可是由于单位根有一些优秀的性质，就可以分治做到$O(n\log n)$。</p><p>接着，我们来介绍复数。</p><p>数轴可以表示任意实数，对吧。</p><p>可是尽管有数轴还不足以解决问题。比如说解方程$x^2=-1$。</p><p>数轴上没有数的平方等于$-1$。于是数学家们提出了一个东西叫做$\mathrm{i}$，规定了$\mathrm{i}^2=-1$。</p><p>所以说，刚刚的方程就有了两个解$x_1=\mathrm{i},x_2=-\mathrm{i}$。</p><p>而这个$\mathrm{i}$就叫做<strong>虚数单位</strong>。数学家们把形如$z=a+b\mathrm{i}$的数叫做<strong>复数</strong>，其中$a$叫做<strong>实部</strong>，$b$叫做<strong>虚部</strong>。</p><p>可是仅仅有一根数轴无法表示复数，于是就出现了一根轴，两根轴共同组成了一个平面，叫做<strong>复平面</strong>。就像这样</p><p><img src="/2019/01/20/学习笔记·多项式专题（一）/1.JPG" alt=""></p><p>横着的那根轴叫做<strong>实轴</strong>，用来记录复数的实部。与实轴垂直的轴叫做<strong>虚轴</strong>，记录复数的虚部。</p><p>于是我们就可以用一个复平面来表示复数了。如下图</p><p><img src="/2019/01/20/学习笔记·多项式专题（一）/2.JPG" alt=""></p><p>红点表示的复数为$-1+2\mathrm{i}$，蓝点表示的复数则为$2+4\mathrm{i}$。</p><p>加减法的话不多说。乘法当一次多项式成就可以了。除法的话有套路。</p><p>首先求$\frac{1}{a+b\mathrm{i}}$。</p><p>考虑分母有理化，分子分母同乘共轭复数，有</p><script type="math/tex; mode=display">\frac{1}{a+b\mathrm{i}}=\frac{a-b\mathrm{i}}{a^2+b^2}</script><p>所以有</p><script type="math/tex; mode=display">\frac{a+b\mathrm{i}}{c+d\mathrm{i}}=\frac{(a+b\mathrm{i})(c-d\mathrm{i})}{c^2+d^2}=\frac{ac+bd}{c^2+d^2}+\frac{bc-ad}{c^2+d^2}\mathrm{i}</script><p>接着是模长和辐角的概念。</p><p>模长是什么？说白了，就是复数所对应的复平面上的点到原点的距离。也即复数$a+b\mathrm{i}$的模长为$\sqrt{a^2+b^2}$。</p><p>辐角的话呢，就是如下图</p><p><img src="/2019/01/20/学习笔记·多项式专题（一）/3.JPG" alt=""></p><p>所谓辐角，就是红点与原点的连线和实轴上那根黑线所成的夹角。</p><p>如果红点对应的复数为$z$，那么$z$的辐角记作$\arg z$。</p><p>接下来就是终点了。</p><p>负数的乘法：<strong>模长相乘，辐角相加</strong>。</p><p>我们用一个图形说明这一点。</p><p><img src="/2019/01/20/学习笔记·多项式专题（一）/4.JPG" alt=""></p><p>设$A,B$代表的复数依次为$a+b\mathrm{i},c+d\mathrm{i}$，则</p><script type="math/tex; mode=display">\vert\overrightarrow{OA}\vert=\sqrt{a^2+b^2}</script><script type="math/tex; mode=display">\vert\overrightarrow{OB}\vert=\sqrt{c^2+d^2}</script><p>乘起来，有</p><script type="math/tex; mode=display">\vert\overrightarrow{OA}\vert\cdot\vert\overrightarrow{OB}\vert=\sqrt{(a^2+b^2)(c^2+d^2)}</script><p>还有</p><script type="math/tex; mode=display">\vert\overrightarrow{OC}\vert=\sqrt{(ac-bd)^2+(bc+ad)^2}</script><p>所以，只需要证明$(ac-bd)^2+(bc+ad)^2=(a^2+b^2)(c^2+d^2)$</p><p>左边展开，有</p><script type="math/tex; mode=display">(ac-bd)^2+(bc+ad)^2=a^2c^2+a^2d^2+b^2c^2+b^2d^2=(a^2+c^2)(b^2+d^2)</script><p>命题得证。</p><p>要想证明第二个命题，我们得用一个公式。</p><script type="math/tex; mode=display">\tan (\alpha+\beta)=\frac{\tan\alpha+\tan\beta}{1-\tan\alpha\tan\beta}</script><p>暴力拆开，得</p><script type="math/tex; mode=display">\frac{bc+ad}{ac-bd}=\frac{\frac{b}{a}+\frac{d}{c}}{1-\frac{bd}{ac}}</script><p>右边展开，有</p><script type="math/tex; mode=display">\frac{\frac{b}{a}+\frac{d}{c}}{1-\frac{bd}{ac}}=\frac{\frac{bc+ad}{ac}}{\frac{ac-bd}{ac}}=\frac{bc+ad}{ac-bd}</script><p>命题得证。</p><p>这里下发一个<a href="https://www.desmos.com/calculator/11nqysfvyc" target="_blank" rel="noopener">$\texttt{demo}$</a>，以上的图片就是基于它而绘制的。</p><p>于是讲讲<strong>单位根</strong>这种东西。</p><p>首先证明欧拉公式：$e^{\mathrm{i}\theta}=\cos\theta+\mathrm{i}\sin\theta$</p><p>左边泰勒展开，有</p><script type="math/tex; mode=display">e^{\mathrm{i}\theta}=\sum\limits_{j=0}^{\infty}\frac{(\mathrm{i}\theta)^j}{j!}</script><p>右边那东西，直观地看，就是这样的</p><script type="math/tex; mode=display">e^{\mathrm{i}\theta}=1+\mathrm{i}\theta-\frac{\theta^2}{2!}-\frac{\mathrm{i}\theta^3}{3!}+\frac{\theta^4}{4!}+\cdots</script><p>分组，有</p><script type="math/tex; mode=display">e^{\mathrm{i}\theta}=(1-\frac{\theta^2}{2!}+\frac{\theta^4}{4!}-\cdots)+\mathrm{i}(\theta-\frac{\theta^3}{3!}+\frac{\theta^5}{5!}-\cdots)</script><p>然后可以发现括号内的东西为$\cos\theta$和$\sin\theta$的麦克劳林级数，于是命题得证。</p><p>接着可以看到，复数$\cos\theta+\mathrm{i}\sin\theta$所对应的复平面的点为$(\cos\theta,\sin\theta)$，这个点有一个特殊的性质，那就是</p><p>无论$\theta$为多少，这个点总在一个半径为$1$的单位圆上！</p><p>不仅如此，我们还有一个小小的推论，就是$(\cos\theta+\mathrm{i}\sin\theta)^n=\cos(n\theta)+\mathrm{i}\sin(n\theta)$</p><p>然后要解一个有$n$个解的方程：$z^n=1$，其中$z$为复数。</p><p>我们知道，$z=1$为一合法解，但剩下的解呢？？</p><p>考虑换元做。设$z=a+b\mathrm{i}$，那么它的模长为$\sqrt{a^2+b^2}$，于是$z^n$的模长就为$(\sqrt{a^2+b^2})^n$，而它又要等于$1$，所以，$z$的模长就是$1$了，也即$z$在一个单位圆上。</p><p>所以可设$z=\cos\theta+\mathrm{i}\sin\theta$，所以</p><script type="math/tex; mode=display">z^n=\cos(n\theta)+\mathrm{i}\sin(n\theta)=1+0\mathrm{i}</script><p>所以</p><script type="math/tex; mode=display">\begin{cases}\cos(n\theta)=1 \\ \sin(n\theta)=0\end{cases}</script><p><img src="/2019/01/20/学习笔记·多项式专题（一）/5.JPG" alt=""></p><p>在<font color="#c74440">$\cos x$</font>和<font color="2d70b3">$\sin x$</font>的一个周期内，满足上述方程组的$n\theta$只能为$0$。</p><p>所以上述方程组等价于$n\theta=2k\pi$，所以解为</p><script type="math/tex; mode=display">z=\cos(\frac{2k\pi}{n})+\mathrm{i}\sin(\frac{2k\pi}{n})</script><p>其中，$0\leq k\leq n-1$。</p><p>这些$z$就被叫做$n$次单位根，第$i$个记作$\omega_n^i$，有</p><script type="math/tex; mode=display">\omega_n^k=\cos(\frac{2k\pi}{n})+\mathrm{i}\sin(\frac{2k\pi}{n})</script><p>这里下发一个帮助理解的<a href="https://www.desmos.com/calculator/6ymz2anh0x" target="_blank" rel="noopener">$\texttt{demo}$</a></p><p>接着是单位根的性质（<del>满屏三角函数来袭</del>）</p><ul><li>对于任意的$n$，都有$\omega_n^0=1$</li></ul><p>显然的，有</p><script type="math/tex; mode=display">\omega_n^0=\cos 0+\mathrm{i}\sin 0=1</script><ul><li>消去引理：$\omega_{dn}^{dk}=\omega_n^k$</li></ul><p>左边暴力搞一搞，有</p><script type="math/tex; mode=display">\omega_{dn}^{dk}=\cos(\frac{2dk\pi}{dn})+\mathrm{i}\sin(\frac{2dk\pi}{dn})=\cos(\frac{2k\pi}{n})+\mathrm{i}\sin(\frac{2k\pi}{n})=\omega_n^k</script><ul><li><strong>折半引理</strong>：$\omega_n^{k+\frac{n}{2}}=-\omega_n^k$，其中$n$为偶数。</li></ul><p>左边暴力搞一搞，有</p><script type="math/tex; mode=display">\omega_n^{k+\frac{n}{2}}=\cos(\frac{2(k+\frac{n}{2})\pi}{n})+\mathrm{i}\sin(\frac{2(k+\frac{n}{2})\pi}{n})=\cos(\frac{2k\pi+n\pi}{n})+\mathrm{i}\sin(\frac{2k\pi+n\pi}{n})</script><p>于是有</p><script type="math/tex; mode=display">\cos(\frac{2k\pi+n\pi}{n})=\cos(\frac{2k\pi}{n}+\pi)=-\cos(\frac{2k\pi}{n})</script><p>和</p><script type="math/tex; mode=display">\sin(\frac{2k\pi+n\pi}{n})=\sin(\frac{2k\pi}{n}+\pi)=-\sin(\frac{2k\pi}{n})</script><p>这样一来，就有</p><script type="math/tex; mode=display">\cos(\frac{2k\pi+n\pi}{n})+\mathrm{i}\sin(\frac{2k\pi+n\pi}{n})=-(\cos(\frac{2k\pi}{n})+\mathrm{i}\sin(\frac{2k\pi}{n}))=-\omega_n^k</script><p>命题得证。</p><ul><li>求和引理：$\sum\limits_{i=0}^{n-1}\omega_n^i=0$</li></ul><p>先证一个小小的引理：$\omega_n^k=(\omega_n^1)^k$</p><p>证明如下</p><script type="math/tex; mode=display">\omega_n^k=\cos(\frac{2k\pi}{n})+\mathrm{i}\sin(\frac{2k\pi}{n})=e^{\frac{2\pi i}{n}\cdot k}=(e^\frac{2\pi i}{n})^k=(\omega_n^1)^k</script><p>所以，有</p><script type="math/tex; mode=display">\sum\limits_{i=0}^{n-1}\omega_n^i=\sum\limits_{i=0}^{n-1}(\omega_n^1)^i=\frac{(\omega_n^1)^n-1}{\omega_n^1-1}=\frac{\omega_n^n-1}{\omega_n^1-1}=\frac{\omega_n^0-1}{\omega_n^1-1}=0</script>]]></content>
      
      
      
        <tags>
            
            <tag> 多项式 </tag>
            
            <tag> FFT </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P5160」WD与循环</title>
      <link href="/2019/01/01/%E3%80%8CLuogu-P5160%E3%80%8DWD%E4%B8%8E%E5%BE%AA%E7%8E%AF/"/>
      <url>/2019/01/01/%E3%80%8CLuogu-P5160%E3%80%8DWD%E4%B8%8E%E5%BE%AA%E7%8E%AF/</url>
      
        <content type="html"><![CDATA[<p>给定$n,m$，求以下代码的运行结果：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> a_1=<span class="number">0</span>;a_1&lt;=m;a_1++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> a_2=<span class="number">0</span>;a_1+a_2&lt;=m;a_2++)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> a_n=<span class="number">0</span>;a_1+a_2+...+a_n&lt;=m;a_n++)</span><br><span class="line">&#123;</span><br><span class="line">cnt=(cnt+<span class="number">1</span>)%<span class="number">19491001</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, cnt);</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>先声明：$19491001$是质数！<del>质数的日子一般都会发生大事，比如说以1开头的某个8位质数</del><br>如同第一题一样，可以考虑爆搜出小样例。（程序是个坑）<br>还是一样，设$(n,m)$表示循环个数为$n$，上界为$m$时的答案</p>]]></content>
      
      
      
        <tags>
            
            <tag> 组合数学 </tag>
            
            <tag> 找规律 </tag>
            
            <tag> Lucas定理 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P5159」WD与矩阵</title>
      <link href="/2018/12/31/%E3%80%8CLuogu-P5159%E3%80%8DWD%E4%B8%8E%E7%9F%A9%E9%98%B5/"/>
      <url>/2018/12/31/%E3%80%8CLuogu-P5159%E3%80%8DWD%E4%B8%8E%E7%9F%A9%E9%98%B5/</url>
      
        <content type="html"><![CDATA[<p>求有多少个$n\times m$的矩阵，使得每行每列异或值都是$0$。</p><p>Data Range：$T\leq 10^5,1\leq n,m\leq 10^9$<br><a id="more"></a></p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>先声明一下，$(n,m)$表示$n\times m$矩阵的答案，这里假定$n\leq m$，因为$(n,m)=(m,n)$。</p><p>不知道有没有人在看到这题的时候想到了NOIP 2018的填数游戏，按照这个思路，可以写一个爆搜跑一下小数据，这里记录一下我得到的小数据的答案：</p><p>$(2,2)=2,(2,3)=4,(2,4)=8,(2,5)=16,(2,6)=32\cdots$</p><p>$(3,3)=16,(3,4)=64,(3,5)=256,(3,6)=1024\cdots$</p><p>$(4,4)=512,(4,5)=4096,(4,6)=32768\cdots$</p><p>$(5,5)=65536\cdots$</p><p>首先考虑$(n,m)\div (n,m-1)$，把这个值记为$\operatorname{grow}(n)$，于是有：</p><p>$\operatorname{grow}(2)=2,\operatorname{grow}(3)=4,\operatorname{grow}(4)=8,\operatorname{grow}(5)=16\cdots$</p><p>所以$\operatorname{grow}(n)=2^{n-1}$。</p><p>接下来算$(n,n)$，有：</p><p>$(2,2)=2,(3,3)=16,(4,4)=512,(5,5)=65536$。</p><p>乍一看，没什么规律，所以将这些式子变个形：</p><p>$(2,2)=2^1,(3,3)=2^4,(4,4)=2^9,(5,5)=2^{16}\cdots$</p><p>啊哈！这样就有规律啦qwq！</p><p>于是就有$(n,n)=2^{(n-1)^2}$</p><p>综上，可以得出$(n,m)\equiv 2^{(n-1)^2}\times(2^{n-1})^{m-n}$。</p><p>于是就可以用快速幂做啦qwq。</p><p>但是这样子$\texttt{Subtask 3}$会TLE，所以考虑优化。</p><p>不是有欧拉定理吗？</p><p>所以说可以把$(n-1)^2$模个$\varphi(998244353)=998244352$，就可以完结撒花啦qwq！</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll MOD=<span class="number">998244353</span>;</span><br><span class="line">ll test,length,width,base,grow;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">qpow</span><span class="params">(ll base,ll exponent,ll mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!exponent)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll temp=qpow(base,exponent&gt;&gt;<span class="number">1</span>,mod),res=temp*temp%mod;</span><br><span class="line">    <span class="keyword">if</span>(exponent&amp;<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        res=res*base%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    test=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;test;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        length=read(),width=read();</span><br><span class="line">        <span class="keyword">if</span>(length&gt;width)</span><br><span class="line">        &#123;</span><br><span class="line">            swap(length,width);</span><br><span class="line">        &#125;</span><br><span class="line">        base=qpow(<span class="number">2</span>,(length<span class="number">-1</span>)*(length<span class="number">-1</span>)%(MOD<span class="number">-1</span>),MOD);</span><br><span class="line">        grow=qpow(<span class="number">2</span>,length<span class="number">-1</span>,MOD);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,base*qpow(grow,width-length,MOD)%MOD);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 打表 </tag>
            
            <tag> 找规律 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P5110」块速递推</title>
      <link href="/2018/12/28/%E3%80%8CLuogu-P5110%E3%80%8D%E5%9D%97%E9%80%9F%E9%80%92%E6%8E%A8/"/>
      <url>/2018/12/28/%E3%80%8CLuogu-P5110%E3%80%8D%E5%9D%97%E9%80%9F%E9%80%92%E6%8E%A8/</url>
      
        <content type="html"><![CDATA[<p>给定一个数列$a$，满足如下递推式：</p><p>$a_n=233a_{n-1}+666a_{n-2}$。</p><p>求出这个数列第$n$项$a_n\bmod 10^9+7$的值，一共有$T$组数据，为了减少输出量，请输出这些答案的异或和。</p><p>Data Range：$T\leq 5\times 10^7,0\leq n&lt;2^{64}$</p><p>11<br><a id="more"></a></p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>首先求$a_n=233a_{n-1}+666a_{n-2}$的通项式。</p><p>考虑这个数列的特征方程，为$x^2=233x+666$，于是解出$x_1=\cfrac{233+\sqrt{56953}}{2},x_2=\cfrac{233-\sqrt{56953}}{2}$。</p><p>所以可以设这个数列的通项式为$a_n=p(\cfrac{233+\sqrt{56953}}{2})^n+q(\cfrac{233-\sqrt{56953}}{2})^n$。</p><p>可别忘了，$a_0=0,a_1=1$，所以解出$p=\cfrac{1}{\sqrt{56953}},q=-\cfrac{1}{\sqrt{56953}}$。</p><p>所以$a_n=\cfrac{1}{\sqrt{56953}}[(\cfrac{233+\sqrt{56953}}{2})^n-(\cfrac{233-\sqrt{56953}}{2})^n]$</p><p>现在来解决除号以及根号。首先，枚举得$\sqrt{56953}\equiv 188305837\pmod {10^9+7}$。</p><p>所以说</p><script type="math/tex; mode=display">a_n=\cfrac{1}{188305037}(94153035^n-905847205^n)$而$188305837^{-1}\equiv 233230706\pmod {10^9+7}</script><p>所以，最终的通项式就是</p><p><script type="math/tex">a_n=233230706(94153035^n-905847205^n)</script>。</p><p>但是，由于毒瘤出题人的毒瘤给分制度，前面六个点每点$1 pts$，所以用龟速幂只能水$6 pts$。我尝试用$O(1)$的按位龟速乘优化了一下后，还是只有$6 pts$。看来我们只能优化计算上面的两个幂的过程。</p><p>很明显可以先优化一下指数，由欧拉定理得：</p><p>$a_{n+\varphi(10^9+7)}\equiv a_n\pmod {10^9+7}$</p><p>于是可以把指数模$\varphi(10^9+7)=10^9+6$，但是还是只能得$6 pts$。</p><p>于是考虑$100 pts$的<strong>分块打表</strong>大法。由上面的结论可知，可以将指数控制在$10^9+6$以内，所以可以考虑分块打表。</p><p>可以知道，$\lceil\sqrt{10^9+6}\rceil=31623$，所以以这个数作为块长分块，将它记为$k$。</p><p>首先，预处理出</p><p>$94153035^0,94153035^1\cdots 94153035^{k-1}$</p><p>和$905847205^0,905847205^1\cdots 905847205^{k-1}$</p><p>然后，用龟速幂可算出</p><p>$94153035^k\equiv 37348318\pmod {10^9+7}$，$905847205^k\equiv 482464047\pmod {10^9+7}$</p><p>最后，预处理出</p><p>$94153035^k,94153035^2k\cdots 94153035^{k(k-1)}$</p><p>和<br>$905847205^k,905847205^k\cdots 905847205^{k(k-1)}$</p><p>显然，这些步骤的时间复杂度为$O(k)$的。</p><p>把询问$m$拆成$ak+b$的形式，其中$0\leq b\leq k-1$。<br>用数学化的语言来讲，$a=\lfloor \frac{m}{k}\rfloor,b=m\bmod k$，所以可以拆成整块和散块来做到$O(1)$查询啦qwq。</p><p>时间复杂度为$O(T+\sqrt{10^9+6})$。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">31651</span>,MOD=<span class="number">1e9</span>+<span class="number">7</span>,blockSize=<span class="number">31623</span>;</span><br><span class="line">ll test,num,res,resx,resy;</span><br><span class="line">ll blockx[MAXN],powx[MAXN],blocky[MAXN],powy[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    blockx[<span class="number">0</span>]=powx[<span class="number">0</span>]=blocky[<span class="number">0</span>]=powy[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;blockSize;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        blockx[i]=blockx[i<span class="number">-1</span>]*<span class="number">37348318u</span>ll%MOD;</span><br><span class="line">        blocky[i]=blocky[i<span class="number">-1</span>]*<span class="number">482464047u</span>ll%MOD;</span><br><span class="line">        powx[i]=powx[i<span class="number">-1</span>]*<span class="number">94153035l</span>l%MOD;</span><br><span class="line">        powy[i]=powy[i<span class="number">-1</span>]*<span class="number">905847205l</span>l%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> maker&#123;</span><br><span class="line">    ll sa,sb,sc;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        sa=read(),sb=read(),sc=read();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">randInt</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        sa^=sa&lt;&lt;<span class="number">32</span>,sa^=sa&gt;&gt;<span class="number">13</span>,sa^=sa&lt;&lt;<span class="number">1</span>;</span><br><span class="line">        ll t=sa;</span><br><span class="line">        sa=sb,sb=sc,sc^=t^sa;</span><br><span class="line">        <span class="keyword">return</span> sc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    test=read();</span><br><span class="line">    maker::setup(),setup();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;test;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        num=maker::randInt()%(MOD<span class="number">-1</span>);</span><br><span class="line">        resx=blockx[num/blockSize]*powx[num%blockSize]%MOD;</span><br><span class="line">        resy=blocky[num/blockSize]*powy[num%blockSize]%MOD;</span><br><span class="line">        res^=(<span class="number">233230706</span>*((resx-resy+MOD)%MOD)%MOD);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%llu"</span>,res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 打表 </tag>
            
            <tag> 数论，数学 </tag>
            
            <tag> 分块 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P5104」红包发红包</title>
      <link href="/2018/12/27/%E3%80%8CLuogu-P5104%E3%80%8D%E7%BA%A2%E5%8C%85%E5%8F%91%E7%BA%A2%E5%8C%85/"/>
      <url>/2018/12/27/%E3%80%8CLuogu-P5104%E3%80%8D%E7%BA%A2%E5%8C%85%E5%8F%91%E7%BA%A2%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<p>一个$w$元钱的红包，有$n$个人抢，求第$k$个人抢的钱的期望。<br><a id="more"></a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>先来看一个引理：<br>$\mathbf{Lemma}\quad$在$l$到$r$中随机选一个实数的期望为$\frac{l+r}{2}$。<br>$\mathbf{Proof:}$<br>采用切片法。由于实数密度的均匀性，可以考虑做极限。<br>考虑将$l$到$r$的实数区间均匀的切$i-1$片，出现$i$个端点，于是对这些数求期望。<br>那么这些数的期望是：<br>$\cfrac{nl+(r-l)\sum\limits_{i=0}^{n-1}\frac{i}{n-1}}{n}$<br>$=l+\cfrac{(r-l)\frac{n}{2}}{n}$<br>$=l+\cfrac{r-l}{2}$<br>$=\cfrac{l+r}{2}$<br>所以，这东西与$i$没任何关系，求极限还是这个值，证毕。<br>回到本题。于是可以知道，第一个人抢的钱的期望是$\frac{w}{2}$，剩下$\frac{w}{2}$元。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 概率 </tag>
            
            <tag> 期望 </tag>
            
            <tag> 数论，数学 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P3690」【模板】Link Cut Tree （动态树）</title>
      <link href="/2018/12/22/%E3%80%8CLuogu-P3690%E3%80%8D%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91Link-Cut-Tree-%EF%BC%88%E5%8A%A8%E6%80%81%E6%A0%91%EF%BC%89/"/>
      <url>/2018/12/22/%E3%80%8CLuogu-P3690%E3%80%8D%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91Link-Cut-Tree-%EF%BC%88%E5%8A%A8%E6%80%81%E6%A0%91%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>给定$n$个点以及它们的点权，要求写一种数据结构支持以下操作：<br>求$x$到$y$路径上点权的$operatorname{xor}$和，连接或删除一条边，以及修改某个点的点权。<br><a id="more"></a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>一道LCT裸题。<br>坑。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">3e5</span>+<span class="number">51</span>;</span><br><span class="line">ll cnt,qcnt,op,x,y;</span><br><span class="line">ll num[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> LCT&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">        ll fa,val,tag;</span><br><span class="line">        ll ch[<span class="number">2</span>];</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LinkCutTree</span>&#123;</span></span><br><span class="line">        Node nd[MAXN];</span><br><span class="line">    ll st[MAXN];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">nroot</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> nd[nd[x].fa].ch[<span class="number">0</span>]==x||nd[nd[x].fa].ch[<span class="number">1</span>]==x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    nd[x].val=nd[nd[x].ch[<span class="number">0</span>]].val^nd[nd[x].ch[<span class="number">1</span>]].val^num[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    swap(nd[x].ch[<span class="number">0</span>],nd[x].ch[<span class="number">1</span>]),nd[x].tag^=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">spread</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(nd[x].tag)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">if</span>(nd[x].ch[<span class="number">0</span>])</span><br><span class="line">    &#123;</span><br><span class="line">    reverse(nd[x].ch[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(nd[x].ch[<span class="number">1</span>])</span><br><span class="line">    &#123;</span><br><span class="line">    reverse(nd[x].ch[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    nd[x].tag=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    ll fa=nd[x].fa,gfa=nd[fa].fa;</span><br><span class="line">            ll dir=nd[fa].ch[<span class="number">1</span>]==x,son=nd[x].ch[!dir];</span><br><span class="line">    <span class="keyword">if</span>(nroot(fa))</span><br><span class="line">    &#123;</span><br><span class="line">    nd[gfa].ch[nd[gfa].ch[<span class="number">1</span>]==fa]=x;</span><br><span class="line">    &#125;</span><br><span class="line">            nd[x].ch[!dir]=fa,nd[fa].ch[dir]=son;</span><br><span class="line">    <span class="keyword">if</span>(son)</span><br><span class="line">    &#123;</span><br><span class="line">    nd[son].fa=fa;</span><br><span class="line">    &#125;</span><br><span class="line">            nd[fa].fa=x,nd[x].fa=gfa;</span><br><span class="line">    update(fa);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">splay</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    ll fa=x,gfa,cur=<span class="number">0</span>;</span><br><span class="line">    st[++cur]=fa;</span><br><span class="line">    <span class="keyword">while</span>(nroot(fa))</span><br><span class="line">    &#123;</span><br><span class="line">    st[++cur]=fa=nd[fa].fa;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(cur)</span><br><span class="line">    &#123;</span><br><span class="line">    spread(st[cur--]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(nroot(x))</span><br><span class="line">    &#123;</span><br><span class="line">    fa=nd[x].fa,gfa=nd[fa].fa;</span><br><span class="line">    <span class="keyword">if</span>(nroot(fa))</span><br><span class="line">    &#123;</span><br><span class="line">    rotate((nd[fa].ch[<span class="number">0</span>]==x)^(nd[gfa].ch[<span class="number">0</span>]==fa)?x:fa);</span><br><span class="line">    &#125;</span><br><span class="line">                rotate(x);</span><br><span class="line">    &#125;</span><br><span class="line">    update(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">access</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;x;x=nd[i=x].fa)</span><br><span class="line">    &#123;</span><br><span class="line">    splay(x),nd[x].ch[<span class="number">1</span>]=i,update(x);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">makeRoot</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    access(x),splay(x),reverse(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">findRoot</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    access(x),splay(x);</span><br><span class="line">    <span class="keyword">while</span>(nd[x].ch[<span class="number">0</span>])</span><br><span class="line">    &#123;</span><br><span class="line">                spread(x),x=nd[x].ch[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">split</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    makeRoot(x),access(y),splay(y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">link</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    makeRoot(x);</span><br><span class="line">    <span class="keyword">if</span>(findRoot(y)!=x)</span><br><span class="line">    &#123;</span><br><span class="line">    nd[x].fa=y;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    makeRoot(x);</span><br><span class="line">    <span class="keyword">if</span>(findRoot(y)==x&amp;&amp;nd[x].fa==y&amp;&amp;!nd[x].ch[<span class="number">1</span>])</span><br><span class="line">    &#123;</span><br><span class="line">    nd[x].fa=nd[y].ch[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    update(y);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">LCT::LinkCutTree lct;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt=read(),qcnt=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        num[i]=read();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;qcnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        op=read(),x=read(),y=read();</span><br><span class="line">        <span class="keyword">if</span>(!op)</span><br><span class="line">        &#123;</span><br><span class="line">            lct.split(x,y);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,lct.nd[y].val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            lct.link(x,y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            lct.cut(x,y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            lct.splay(x),num[x]=y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
            <tag> 树链剖分 </tag>
            
            <tag> 平衡树 </tag>
            
            <tag> Splay </tag>
            
            <tag> 模板 </tag>
            
            <tag> Link Cut Tree </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P4289」[HAOI2008]移动玩具</title>
      <link href="/2018/12/19/%E3%80%8CLuogu-P4289%E3%80%8D-HAOI2008-%E7%A7%BB%E5%8A%A8%E7%8E%A9%E5%85%B7/"/>
      <url>/2018/12/19/%E3%80%8CLuogu-P4289%E3%80%8D-HAOI2008-%E7%A7%BB%E5%8A%A8%E7%8E%A9%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p>给定两个$4\times 4$的$01$矩阵，第一个是初始矩阵，另一个是目标矩阵，每一次可以交换两个相邻的元素，求最少的操作使得初始矩阵可以变换到目标矩阵。<br><a id="more"></a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.org/problemnew/show/P4289" target="_blank" rel="noopener">Luogu P4289</a><br><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=1054" target="_blank" rel="noopener">BZOJ 1054</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> BZOJ </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> HAOI </tag>
            
            <tag> 各省省选 </tag>
            
            <tag> BFS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P2508」[HAOI2008]圆上的整点</title>
      <link href="/2018/12/16/%E3%80%8CLuogu-P2508%E3%80%8D-HAOI2008-%E5%9C%86%E4%B8%8A%E7%9A%84%E6%95%B4%E7%82%B9/"/>
      <url>/2018/12/16/%E3%80%8CLuogu-P2508%E3%80%8D-HAOI2008-%E5%9C%86%E4%B8%8A%E7%9A%84%E6%95%B4%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p>给定$r$，求满足$x^2+y^2=r^2$的整数对$(x,y)$个数量。<br><a id="more"></a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.org/problemnew/show/P2508" target="_blank" rel="noopener">Luogu P2508</a><br><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=1041" target="_blank" rel="noopener">BZOJ 1041</a><br><a href="http://codevs.cn/problem/1867/" target="_blank" rel="noopener">CodeVS 1867</a></p><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><p>首先引入虚数单位$\mathrm{i}$，表示$\sqrt{-1}$，将$a+b\mathrm{i},a,b\in\mathbb{R}$型的数称为复数（其中$a\in\mathbb{R}$表示$a$为实数）。<br>所以说可以规定一些运算。<br>$a+b\mathrm{i}\pm c+d\mathrm{i}=(a\pm b)+(c\pm d)\mathrm{i}$<br>$(a+b\mathrm{i})(c+d\mathrm{i})=(ac-bd)+(ad+bc)\mathrm{i}$<br>其中，称$a+b\mathrm{i}$的复共轭为$a-b\mathrm{i}$。<br>每一个坐标$(x,y)$，又可以唯一对应到一个复数$x+y\mathrm{i}$，于是将这种一个坐标表示一个复数的平面直角坐标系叫做复平面。<br>对于复平面上的格点$(x,y)$，可以对应到复数$x+y\mathrm{i}$，将这类复数叫做<strong>高斯整数</strong>。<br>说白了，高斯整数就是满足$a,b$是整数的$a+b\mathrm{i}$型数。<br>而不能再次被分解的数就是<strong>高斯素数</strong>。<br>比如说，$5$不是高斯素数，因为$5=5+0\mathrm{i}=(2+\mathrm{i})(2-\mathrm{i})$，而分解出的$2+\mathrm{i}$和$2-\mathrm{i}$都是高斯素数。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>一道码量不长，但是数学知识需求挺多的一道题。<br>先转换一下所给的方程，改成$x^2-(y\mathrm{i})^2=r^2$。<br>拆开可得$(x+y\mathrm{i})(x-y\mathrm{i})=r^2$。<br>而两个括号内互为复共轭，所以只需要解决这个问题，即有多少个$x+y\mathrm{i}$使得它成它的复共轭为$r^2$。<br>这里举个栗子，比如说手玩$r=5$的情况，要先将$r^2$拆成高斯素数的乘积。<br>$25=5^2=(2+\mathrm{i})(2-\mathrm{i})(2+\mathrm{i})(2-\mathrm{i})$<br>在将这些高斯素数分成两列，其中第一列的第$n$个数和第二列的第$n$个数互为复共轭，最后算出来有多少种组合方式。<br>但是这些组合方式满足左边的乘积与右边的乘积互为复共轭吗？<br>答案是显然的，先证明两个高斯整数的乘积与它们的复共轭的乘积互为复共轭。<br>考虑这两个数的乘积，$(a+b\mathrm{i})(c+d\mathrm{i})=(ac-bd)+(ad+bc)\mathrm{i}$。<br>它们的复共轭的乘积，$(a-b\mathrm{i})(c-d\mathrm{i})=(ac-bd)-(ad+bc)\mathrm{i}$。<br>啊哈！它们正好互为复共轭，所以左边的乘积与右边的乘积互为复共轭。<br>但是，还不够。要把答案乘上$4$才行，因为两列数的乘积可以同时乘上$1$或$-1$，或一个乘以$\mathrm{i}$，另一个乘以$-\mathrm{i}$都<strong>不改变两列乘起来后两个数的乘积</strong>，所以有$4$种变换，所以算出来是$12$。<br>现在来看一般情况。对$r^2$做质因数分解，有$r^2={p_1}^{r_1}{p_2}^{r_2}\cdots {p_k}^{r_k}$。<br>假设现在考虑到$p_i$了（这个$i$与虚数单位的字体不一样），那么……<br>如果$p_i\equiv 1\pmod 4$，那么这个可以分解成两个高斯素数的乘积。这个因子对格点数目点的影响为$r_i+1$，因为可以在左边放$0,1\cdots r_i$个分解后的高斯素数中的一种。<br>如果$p_i\equiv 3\pmod 4$，那么$p_i$本身是高斯素数，对分解的贡献取决于$r_i$，如果$r_i$是奇数，那么这个多出来的因子没地方放，它会使得两边不平衡，没有格点，否则，它可以放两边，对格点个数没有贡献。<br>如果$p_i$为$2$，那么有$2=(1+\mathrm{i})(1-\mathrm{i})$，而这两个复数刚好是旋转$90^{\circ}$的，所以变换少了$2$种，但是带来$2$中组合，对格点个数没有贡献。<br>所以，这个算法只需要分解质因数，然后判断即可。<br>不懂的可以看看<a href="https://www.bilibili.com/video/av12131743" target="_blank" rel="noopener">这个视频</a></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">5e4</span>+<span class="number">51</span>;</span><br><span class="line">ll r,tot,res=<span class="number">1</span>;</span><br><span class="line">ll factor[MAXN],cnt[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">getFact</span><span class="params">(ll num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=num;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(num==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(num%i==<span class="number">0</span>)</span><br><span class="line">        &#123; </span><br><span class="line">            factor[tot]=i;</span><br><span class="line">            <span class="keyword">while</span>(num%i==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                cnt[tot]+=<span class="number">2</span>,num/=i;</span><br><span class="line">            &#125;</span><br><span class="line">            tot++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    getFact(r=read());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;tot;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((factor[i]&amp;<span class="number">3</span>)==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            res*=(cnt[i]+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>((factor[i]&amp;<span class="number">3</span>)==<span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            res*=((cnt[i]&amp;<span class="number">1</span>)^<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>,res&lt;&lt;<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> BZOJ </tag>
            
            <tag> 数论 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> HAOI </tag>
            
            <tag> 各省省选 </tag>
            
            <tag> CodeVS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P4084」[USACO17DEC]Barn Painting</title>
      <link href="/2018/12/13/%E3%80%8CLuogu-P4084%E3%80%8D-USACO17DEC-Barn-Painting/"/>
      <url>/2018/12/13/%E3%80%8CLuogu-P4084%E3%80%8D-USACO17DEC-Barn-Painting/</url>
      
        <content type="html"><![CDATA[<p>咕着先……<br><a id="more"></a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>开始写题解的今天，正是$12$月$13$日。今天，是南京大屠杀的$81$周年的纪念日。<br>$81$年前，即$1937$年$12$月$13$日。日本侵略者在南京制造了震惊中外的南京大屠杀惨案。这是中华民族的血泪史，饱含着中华人民对日本侵略者的仇恨。<br>现在，我们生活在伟大富强的新中国，与现代的日本作为隔海相望的邻邦，历史的悲剧已平和下来，但是我们不能忘记这次国家的耻辱。<br>所以，我们要以史为鉴，吸取教训，努力学习，奋发图强，不让历史悲剧再次重演。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> USACO </tag>
            
            <tag> 树形DP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P2234」[HNOI2002]营业额统计</title>
      <link href="/2018/12/03/%E3%80%8CLuogu-P2234%E3%80%8D-HNOI2002-%E8%90%A5%E4%B8%9A%E9%A2%9D%E7%BB%9F%E8%AE%A1/"/>
      <url>/2018/12/03/%E3%80%8CLuogu-P2234%E3%80%8D-HNOI2002-%E8%90%A5%E4%B8%9A%E9%A2%9D%E7%BB%9F%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<p>给定一个数列$a$，对于$a_i$，寻找一个$a_j$使得$i&gt;j$且$\vert a_i-a_j\vert$最小。<br><a id="more"></a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>一道近乎Splay裸题的题。<br>很显然可以将最小的$\vert a_i-a_j\vert$拆成$a_i$与其前驱的差和与其后继的差的最小值。<br>所以说就可以用Splay维护啦qwq。<br><del>论手贱，你是比不过我的，今天又把while打成if啦</del></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">4e4</span>+<span class="number">51</span>,inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line">ll cnt,num,res,prv,nxt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> Splay&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">        ll fa,val,size,temp;</span><br><span class="line">        ll ch[<span class="number">2</span>];</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">reset</span><span class="params">(ll val=<span class="number">0</span>,ll fa=<span class="number">0</span>)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;fa=fa,<span class="keyword">this</span>-&gt;val=val,<span class="keyword">this</span>-&gt;temp=<span class="keyword">this</span>-&gt;size=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">this</span>-&gt;ch[<span class="number">0</span>]=<span class="keyword">this</span>-&gt;ch[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Splay</span>&#123;</span></span><br><span class="line">        ll tot,root;</span><br><span class="line">        Node nd[MAXN];</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">id</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> nd[nd[x].fa].ch[<span class="number">1</span>]==x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            nd[x].size=nd[nd[x].ch[<span class="number">0</span>]].size+nd[nd[x].ch[<span class="number">1</span>]].size+nd[x].temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">(ll x,ll fa,ll dir)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            nd[x].fa=fa,nd[fa].ch[dir]=x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            ll fa=nd[x].fa,gfa=nd[fa].fa,dir=id(x);</span><br><span class="line">            connect(x,gfa,id(fa));</span><br><span class="line">            connect(nd[x].ch[dir^<span class="number">1</span>],fa,dir);</span><br><span class="line">            connect(fa,x,dir^<span class="number">1</span>);</span><br><span class="line">            update(fa),update(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">splay</span><span class="params">(ll cur,ll target)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(nd[cur].fa!=target)</span><br><span class="line">            &#123;</span><br><span class="line">                ll fa=nd[cur].fa,gfa=nd[fa].fa;</span><br><span class="line">                <span class="keyword">if</span>(gfa!=target)</span><br><span class="line">                &#123;</span><br><span class="line">                    rotate(id(cur)^id(fa)?cur:fa);</span><br><span class="line">                &#125;</span><br><span class="line">                rotate(cur);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!target)</span><br><span class="line">            &#123;</span><br><span class="line">                root=cur;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(ll val)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            ll cur=root,fa=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(cur&amp;&amp;nd[cur].val!=val)</span><br><span class="line">            &#123;</span><br><span class="line">                fa=cur,cur=nd[cur].ch[val&gt;nd[cur].val];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(cur)</span><br><span class="line">            &#123;</span><br><span class="line">            nd[cur].temp++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">            cur=++tot;</span><br><span class="line">                <span class="keyword">if</span>(fa)</span><br><span class="line">                &#123;</span><br><span class="line">                   nd[fa].ch[val&gt;nd[fa].val]=cur;</span><br><span class="line">                &#125;</span><br><span class="line">                nd[cur].reset(val,fa);</span><br><span class="line">            &#125;</span><br><span class="line">            splay(cur,<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">find</span><span class="params">(ll val)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            ll cur=root;</span><br><span class="line">            <span class="keyword">if</span>(!cur)</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(nd[cur].ch[val&gt;nd[cur].val]&amp;&amp;val!=nd[cur].val)</span><br><span class="line">            &#123;</span><br><span class="line">                cur=nd[cur].ch[val&gt;nd[cur].val];</span><br><span class="line">            &#125;</span><br><span class="line">            splay(cur,<span class="number">0</span>);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="function"><span class="keyword">inline</span> ll <span class="title">prev</span><span class="params">(ll val)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            find(val);</span><br><span class="line">            ll cur=root;</span><br><span class="line">            <span class="keyword">if</span>(nd[cur].val&lt;=val)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> nd[cur].val;</span><br><span class="line">            &#125;</span><br><span class="line">            cur=nd[cur].ch[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">while</span>(nd[cur].ch[<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                cur=nd[cur].ch[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> nd[cur].val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> ll <span class="title">next</span><span class="params">(ll val)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            find(val);</span><br><span class="line">            ll cur=root;</span><br><span class="line">            <span class="keyword">if</span>(nd[cur].val&gt;=val)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> nd[cur].val;</span><br><span class="line">            &#125;</span><br><span class="line">            cur=nd[cur].ch[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">while</span>(nd[cur].ch[<span class="number">0</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                cur=nd[cur].ch[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> nd[cur].val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">Splay::Splay splay;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt=read();</span><br><span class="line">    splay.insert(inf),splay.insert(-inf);</span><br><span class="line">    splay.insert(res=read()); </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        num=read();</span><br><span class="line">        prv=splay.prev(num),nxt=splay.next(num);</span><br><span class="line">        res+=min(num-prv,nxt-num);</span><br><span class="line">        splay.insert(num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
            <tag> 各省省选 </tag>
            
            <tag> 平衡树 </tag>
            
            <tag> Splay </tag>
            
            <tag> HNOI </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>学习笔记·平衡树</title>
      <link href="/2018/12/01/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
      <url>/2018/12/01/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E5%B9%B3%E8%A1%A1%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>平衡树是一种使用较为广泛的数据结构，代码比较长。<br><a id="more"></a></p><h3 id="Splay"><a href="#Splay" class="headerlink" title="Splay"></a>Splay</h3><p>Splay最主要的一点是它能反转区间，而Treap以及替罪羊不能，这也是为什么它作为Link Cut Tree的辅助树。</p><h4 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h4><p>首先需要写一个这样的程序框架：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEBUG printf(<span class="meta-string">"In function %s, line %d\n"</span>,__FUNCTION__,__LINE__)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">2e5</span>+<span class="number">51</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line">ll cnt,qcnt,l,r;</span><br><span class="line"><span class="keyword">namespace</span> Splay&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">        ll fa,val,size,tag;</span><br><span class="line">        ll ch[<span class="number">2</span>];</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Splay</span>&#123;</span></span><br><span class="line">    ll tot,root;</span><br><span class="line">        Node nd[MAXN];</span><br><span class="line">        <span class="comment">//Code goes here</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以下代码片段全部接在注释处。</p><h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><p>首先是$update$，用于更新节点的$size$。<br>既然写过线段树，那么这个操作应该不难。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">nd[x].size=nd[nd[x].ch[<span class="number">0</span>]].size+nd[nd[x].ch[<span class="number">1</span>]].size+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接下来是$id$，用于判断一个节点是它的父亲的哪一个孩子。<br>这个很简单，只需要几行代码。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">id</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> nd[nd[x].fa].ch[<span class="number">1</span>]==x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下一个是$connect$，用于建立新的父子关系，这个也不难。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">(ll x,ll fa,ll dir)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    nd[x].fa=fa,nd[fa].ch[dir]=x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="关键操作"><a href="#关键操作" class="headerlink" title="关键操作"></a>关键操作</h4><p>以下两个操作是旋转操作，很关键，而且不好调。<br>首先是$rotate$，用于平衡旋转。<br>举个栗子，这是原来的平衡树。<br><img src="/2018/12/01/学习笔记·平衡树/splay0.jpg" alt=""><br>其中蓝色指向父亲，红色指向儿子。<br>调用$rotate(y)$之后，平衡树就变成这个样子了：<br><img src="/2018/12/01/学习笔记·平衡树/splay1.jpg" alt=""><br>由于之前$connect$的实现，这个就变得不难了，因为旋转依次要改变$3$对父子关系。<br>第一对，对照第二幅图可以发现，可以直接在$y$与$R$建立关系，就像这样<br><img src="/2018/12/01/学习笔记·平衡树/splay2.jpg" alt=""><br>第二对，在$B$与$x$之间建立父子关系，然后就变成了这个<br><img src="/2018/12/01/学习笔记·平衡树/splay3.jpg" alt=""><br>最后，在$x$与$y$建立父子关系就大功告成啦qwq。<br>所以，上代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll fa=nd[x].fa,gfa=nd[fa].fa,dir=id(x);</span><br><span class="line">    connect(x,gfa,id(fa));</span><br><span class="line">    connect(nd[x].ch[dir^<span class="number">1</span>],fa,dir);</span><br><span class="line">    connect(fa,x,dir^<span class="number">1</span>);</span><br><span class="line">    update(fa),update(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>还有一个是$splay$，这个尽管代码不长，但是很难调。<br>我不推荐直接上旋，因为这样可能会很慢。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">splay</span><span class="params">(ll cur,ll target)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(nd[cur].fa!=target)</span><br><span class="line">    &#123;</span><br><span class="line">        ll fa=nd[cur].fa,gfa=nd[fa].fa;</span><br><span class="line">        <span class="keyword">if</span>(gfa!=target)</span><br><span class="line">        &#123;</span><br><span class="line">            rotate(id(cur)^id(fa)?cur:fa);</span><br><span class="line">        &#125;</span><br><span class="line">        rotate(cur);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!target)</span><br><span class="line">    &#123;</span><br><span class="line">        root=cur;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="一些特例"><a href="#一些特例" class="headerlink" title="一些特例"></a>一些特例</h4>]]></content>
      
      
      
        <tags>
            
            <tag> 平衡树 </tag>
            
            <tag> Splay </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P3391」【模板】文艺平衡树（Splay）</title>
      <link href="/2018/11/30/%E3%80%8CLuogu-P3391%E3%80%8D%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%96%87%E8%89%BA%E5%B9%B3%E8%A1%A1%E6%A0%91%EF%BC%88Splay%EF%BC%89/"/>
      <url>/2018/11/30/%E3%80%8CLuogu-P3391%E3%80%8D%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%96%87%E8%89%BA%E5%B9%B3%E8%A1%A1%E6%A0%91%EF%BC%88Splay%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>给一个$1$到$n$的排列，每一次能将区间$[l,r]$反转，求最后的排列<br><a id="more"></a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>实测暴力能<script type="math/tex">Rush\ 48pts</script>，但是不能用暴力，只能老老实实写Splay。<br>作为一道模板题，还是说一下我犯过的错误吧qwq。<br>第一，<strong>$splay$函数中旋转完了一定要更新$fa$和$x$的信息</strong>，由于这个，我居然调了一下午+一晚上。<br>第二，<strong>注意$reverse$中更新信息的语句</strong>，又调了一中午。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEBUG printf(<span class="meta-string">"In function %s, line %d\n"</span>,__FUNCTION__,__LINE__)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">2e5</span>+<span class="number">51</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line">ll cnt,qcnt,l,r;</span><br><span class="line"><span class="keyword">namespace</span> Splay&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">        ll fa,val,size,tag;</span><br><span class="line">        ll ch[<span class="number">2</span>];</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">reset</span><span class="params">(ll val=<span class="number">0</span>,ll fa=<span class="number">0</span>)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;fa=fa,<span class="keyword">this</span>-&gt;val=val,<span class="keyword">this</span>-&gt;size=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">this</span>-&gt;tag=<span class="keyword">this</span>-&gt;ch[<span class="number">0</span>]=<span class="keyword">this</span>-&gt;ch[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Splay</span>&#123;</span></span><br><span class="line">        ll tot,root;</span><br><span class="line">        Node nd[MAXN];</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">id</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> nd[nd[x].fa].ch[<span class="number">1</span>]==x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            nd[x].size=nd[nd[x].ch[<span class="number">0</span>]].size+nd[nd[x].ch[<span class="number">1</span>]].size+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">spread</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(nd[x].tag)</span><br><span class="line">            &#123;</span><br><span class="line">                nd[nd[x].ch[<span class="number">0</span>]].tag^=<span class="number">1</span>,nd[nd[x].ch[<span class="number">1</span>]].tag^=<span class="number">1</span>;</span><br><span class="line">                nd[x].tag=<span class="number">0</span>;</span><br><span class="line">                swap(nd[x].ch[<span class="number">0</span>],nd[x].ch[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">(ll x,ll fa,ll dir)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            nd[x].fa=fa,nd[fa].ch[dir]=x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            ll fa=nd[x].fa,gfa=nd[fa].fa,dir=id(x);</span><br><span class="line">            connect(x,gfa,id(fa));</span><br><span class="line">            connect(nd[x].ch[dir^<span class="number">1</span>],fa,dir);</span><br><span class="line">            connect(fa,x,dir^<span class="number">1</span>);</span><br><span class="line">            update(fa),update(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">splay</span><span class="params">(ll cur,ll target)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(nd[cur].fa!=target)</span><br><span class="line">            &#123;</span><br><span class="line">                ll fa=nd[cur].fa,gfa=nd[fa].fa;</span><br><span class="line">                <span class="keyword">if</span>(gfa!=target)</span><br><span class="line">                &#123;</span><br><span class="line">                    rotate(id(cur)^id(fa)?cur:fa);</span><br><span class="line">                &#125;</span><br><span class="line">                rotate(cur);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!target)</span><br><span class="line">            &#123;</span><br><span class="line">                root=cur;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(ll val)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            ll cur=root,fa=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(cur)</span><br><span class="line">            &#123;</span><br><span class="line">                fa=cur,cur=nd[cur].ch[val&gt;nd[cur].val];</span><br><span class="line">            &#125;</span><br><span class="line">            cur=++tot;</span><br><span class="line">            <span class="keyword">if</span>(fa)</span><br><span class="line">            &#123;</span><br><span class="line">                nd[fa].ch[val&gt;nd[fa].val]=cur;</span><br><span class="line">            &#125;</span><br><span class="line">            nd[cur].reset(val,fa);</span><br><span class="line">            splay(cur,<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> ll <span class="title">findVal</span><span class="params">(ll rk)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            ll cur=root;</span><br><span class="line">            <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                spread(cur);</span><br><span class="line">                <span class="keyword">if</span>(nd[nd[cur].ch[<span class="number">0</span>]].size&gt;=rk)</span><br><span class="line">                &#123;</span><br><span class="line">                    cur=nd[cur].ch[<span class="number">0</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(nd[nd[cur].ch[<span class="number">0</span>]].size+<span class="number">1</span>==rk)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">return</span> cur;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        rk-=nd[nd[cur].ch[<span class="number">0</span>]].size+<span class="number">1</span>,cur=nd[cur].ch[<span class="number">1</span>];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(ll l,ll r)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            l=findVal(l),r=findVal(r+<span class="number">2</span>);</span><br><span class="line">            splay(l,<span class="number">0</span>),splay(r,l);</span><br><span class="line">            nd[nd[nd[root].ch[<span class="number">1</span>]].ch[<span class="number">0</span>]].tag^=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">op</span><span class="params">(ll cur)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            spread(cur);</span><br><span class="line">            <span class="keyword">if</span>(nd[cur].ch[<span class="number">0</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                op(nd[cur].ch[<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(nd[cur].val&gt;<span class="number">1</span>&amp;&amp;nd[cur].val&lt;cnt+<span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d "</span>,nd[cur].val<span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(nd[cur].ch[<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                op(nd[cur].ch[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">Splay::Splay splay;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt=read(),qcnt=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt+<span class="number">2</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        splay.insert(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;qcnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        l=read(),r=read();</span><br><span class="line">        splay.reverse(l,r);</span><br><span class="line">    &#125;</span><br><span class="line">    splay.op(splay.root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 平衡树 </tag>
            
            <tag> Splay </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「SP1043」Can you answer these queries I</title>
      <link href="/2018/11/29/%E3%80%8CSP1043%E3%80%8DCan-you-answer-these-queries-I/"/>
      <url>/2018/11/29/%E3%80%8CSP1043%E3%80%8DCan-you-answer-these-queries-I/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>「Luogu P3701」「伪模板」主席树</title>
      <link href="/2018/11/29/%E3%80%8CLuogu-P3701%E3%80%8D%E4%B8%BB%E5%B8%AD%E6%A0%91/"/>
      <url>/2018/11/29/%E3%80%8CLuogu-P3701%E3%80%8D%E4%B8%BB%E5%B8%AD%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>A和B有五种不同的人物，共$n$个，两人之间要比$m$场。A的的$i$个人物的寿命为$hpA_i$，B的为$hpB_i$。<br>每一次A和B选出不同的人物进行PK，每一次PK使得两边人物的寿命$-1s$，当寿命为$0$时就不能比赛了，两个人之间只能比一场。<br>同时，当J的寿命为$0$时，同一棵树上的YYY可以为他$+1s$。每个YYY只能给每个J续一次，最大化A能赢的场次的数目。<br><a id="more"></a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>一个比较巧妙的网络流建模题。<br>首先打出人物之间输赢的表，然后考虑从源点像A的第$i$个人物连边，容量为$hpA_i$，从B的第$i$个人物像汇点连边，容量为$hpB_i$。<br>以上连边，如果第$i$个人是J，则将容量增加本方YYY的数量。<br>对于A的第$i$个人能赢B的第$j$个人，就从A的第$i$个人向B的第$j$个人A的人连边，容量为$1$。跑一边最大流即可。<br>下面分析为什么这样连边是对的。<br>先不考虑续命，这个人物不能出战即找不到经过这个人物的增广路，而<strong>通过这个人物的增广路只能是从源点直接到这个人物再到后面或是前面找到的增广路到这个人物再到汇点。</strong><br>以上这句话很重要，请仔细理解。所以，<strong>当源点到这个人物或这个人物到汇点的边为零流边就找不到增广路了，即这个人没命了。</strong>所以从源点发出或到汇点连边是正确的。<br>由于两个人之间只能比一场，而题目要求只求胜利场次数，所以中间的连边也是正确的。<br>现在考虑续命。对于一个J，无论YYY是死是活，总能在它死的时候续命，对于每一个J都是一样。所以将从源点连到J的边或是J连到汇点的边的容量增加本方YYY的个数。<br>至此，连边的正确性就已经说明清楚了。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">1e5</span>+<span class="number">51</span>,inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    ll to,prev,flow;</span><br><span class="line">&#125;;</span><br><span class="line">Edge ed[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,ll&gt;mp;</span><br><span class="line">ll nc,ec,source,sink,tot=<span class="number">1</span>,from,to,flow,maxFlow;</span><br><span class="line">ll cnt,ccnt,life,xx,yy;</span><br><span class="line">ll last[MAXN],depth[MAXN],inQueue[MAXN];</span><br><span class="line">ll win[<span class="number">5</span>][<span class="number">5</span>]=&#123;</span><br><span class="line">    <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,</span><br><span class="line">    <span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line">    <span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,</span><br><span class="line">    <span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">string</span> x[<span class="number">151</span>],y[<span class="number">151</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(ll from,ll to,ll flow)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ed[++tot].prev=last[from];</span><br><span class="line">    ed[tot].to=to;</span><br><span class="line">    ed[tot].flow=flow;</span><br><span class="line">    last[from]=tot; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Min</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x:y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;ll&gt;q;</span><br><span class="line">    ll top,to;</span><br><span class="line">    <span class="built_in">memset</span>(depth,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(depth));</span><br><span class="line">    depth[source]=<span class="number">0</span>,q.push(source);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        top=q.front();</span><br><span class="line">        q.pop(),inQueue[top]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=last[top];i;i=ed[i].prev)</span><br><span class="line">        &#123;</span><br><span class="line">            to=ed[i].to;</span><br><span class="line">            <span class="keyword">if</span>(depth[to]&gt;depth[top]+<span class="number">1</span>&amp;&amp;ed[i].flow)</span><br><span class="line">            &#123;</span><br><span class="line">                depth[to]=depth[top]+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(!inQueue[to])</span><br><span class="line">                &#123;</span><br><span class="line">                    q.push(to),inQueue[to]=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(depth[sink]!=<span class="number">0x3f3f3f3f</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">dfs</span><span class="params">(ll cur,ll flow)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll low;</span><br><span class="line">    <span class="keyword">if</span>(cur==sink)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> flow;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=last[cur];i;i=ed[i].prev)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ed[i].flow&amp;&amp;depth[ed[i].to]==depth[cur]+<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(low=dfs(ed[i].to,Min(flow,ed[i].flow)))</span><br><span class="line">            &#123;</span><br><span class="line">                ed[i].flow-=low,ed[i^<span class="number">1</span>].flow+=low;</span><br><span class="line">                <span class="keyword">return</span> low;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll flow;</span><br><span class="line">    <span class="keyword">while</span>(bfs())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(flow=dfs(source,inf))</span><br><span class="line">        &#123;</span><br><span class="line">            maxFlow+=flow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxFlow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt=read(),ccnt=read();</span><br><span class="line">    nc=sink=(cnt+<span class="number">1</span>)&lt;&lt;<span class="number">1</span>,source=<span class="number">1</span>;</span><br><span class="line">    mp[<span class="string">"J"</span>]=<span class="number">0</span>,mp[<span class="string">"E"</span>]=<span class="number">1</span>,mp[<span class="string">"YYY"</span>]=<span class="number">2</span>,mp[<span class="string">"HK"</span>]=<span class="number">3</span>,mp[<span class="string">"W"</span>]=<span class="number">4</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x[i];</span><br><span class="line">        xx+=(x[i]==<span class="string">"YYY"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;y[i];</span><br><span class="line">    yy+=(y[i]==<span class="string">"YYY"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=cnt+<span class="number">1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        life=read();</span><br><span class="line">        addEdge(source,i,life+(x[i<span class="number">-1</span>]==<span class="string">"J"</span>?xx:<span class="number">0</span>)),addEdge(i,source,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=cnt+<span class="number">1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        life=read();</span><br><span class="line">        addEdge(i+cnt,sink,life+(y[i<span class="number">-1</span>]==<span class="string">"J"</span>?yy:<span class="number">0</span>)),addEdge(sink,i+cnt,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        xx=mp[x[i]];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            yy=mp[y[j]];</span><br><span class="line">            <span class="keyword">if</span>(win[xx][yy])</span><br><span class="line">            &#123;</span><br><span class="line">                addEdge(i+<span class="number">1</span>,j+<span class="number">1</span>+cnt,<span class="number">1</span>),addEdge(j+<span class="number">1</span>+cnt,i+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,min(ccnt,Dinic()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
            <tag> 网络流 </tag>
            
            <tag> 最大流 </tag>
            
            <tag> Dinic </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「CodeForces 558E」A Simple Task</title>
      <link href="/2018/11/24/%E3%80%8CCodeForces-558E%E3%80%8DA-Simple-Task/"/>
      <url>/2018/11/24/%E3%80%8CCodeForces-558E%E3%80%8DA-Simple-Task/</url>
      
        <content type="html"><![CDATA[<p>给定一个字符串，每次将一个子串排序，问最后的字符串是什么。<br><a id="more"></a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>一个比较好的思维题。<br>用线段树维护区间内$26$个字母的出现次数。对于排序，将区间内每个字母出现的次数查出来，然后一个一个遍历就好了。如果是升序就从小往大覆盖，反之从大往小覆盖就好了。时间复杂度$O(26n\log n)$<del>这里常数不能省</del><br>还有，最坑爹的一点是，线段树开$4\times 10^5$过不去，会RE #9，要开$8\times 10^5$……</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">2e5</span>+<span class="number">51</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Occur</span>&#123;</span></span><br><span class="line">    ll num[<span class="number">28</span>];</span><br><span class="line">    Occur()</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">memset</span>(<span class="keyword">this</span>-&gt;num,<span class="number">0</span>,<span class="keyword">sizeof</span>(<span class="keyword">this</span>-&gt;num));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> !=(<span class="keyword">const</span> ll &amp;rhs)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">26</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(num[i]!=rhs)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(num,<span class="number">0</span>,<span class="keyword">sizeof</span>(num));</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegmentTree</span>&#123;</span></span><br><span class="line">    ll l,r;</span><br><span class="line">    Occur sum,cover;</span><br><span class="line">&#125;;</span><br><span class="line">SegmentTree tree[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line">ll cnt,qcnt,l,r,x;</span><br><span class="line"><span class="keyword">char</span> str[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Occur <span class="keyword">operator</span> +(Occur x,Occur y)</span><br><span class="line">&#123;</span><br><span class="line">    Occur res;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">26</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        res.num[i]=x.num[i]+y.num[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Occur <span class="keyword">operator</span> *(Occur x,ll y)</span><br><span class="line">&#123;</span><br><span class="line">    Occur res;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">26</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        res.num[i]=x.num[i]*y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[node].sum=tree[node&lt;&lt;<span class="number">1</span>].sum+tree[(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">(ll l,ll r,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[node].l=l,tree[node].r=r;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[node].sum.num[str[l<span class="number">-1</span>]-<span class="string">'a'</span>+<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    create(l,mid,node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    create(mid+<span class="number">1</span>,r,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">    update(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">spread</span><span class="params">(ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll ls=node&lt;&lt;<span class="number">1</span>,rs=ls|<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(tree[node].cover!=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">tree[ls].sum=tree[node].cover*(tree[ls].r-tree[ls].l+<span class="number">1</span>);</span><br><span class="line">tree[rs].sum=tree[node].cover*(tree[rs].r-tree[rs].l+<span class="number">1</span>);</span><br><span class="line">tree[ls].cover=tree[node].cover;</span><br><span class="line">tree[rs].cover=tree[node].cover;</span><br><span class="line">tree[node].cover.clear();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cover</span><span class="params">(ll l,ll r,Occur val,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=tree[node].l&amp;&amp;r&gt;=tree[node].r)</span><br><span class="line">&#123;</span><br><span class="line">tree[node].sum=val*(tree[node].r-tree[node].l+<span class="number">1</span>);</span><br><span class="line">tree[node].cover=val;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">ll mid=(tree[node].l+tree[node].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">spread(node);</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid)</span><br><span class="line">&#123;</span><br><span class="line">cover(l,r,val,node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid)</span><br><span class="line">&#123;</span><br><span class="line">cover(l,r,val,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">update(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Occur <span class="title">query</span><span class="params">(ll l,ll r,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=tree[node].l&amp;&amp;r&gt;=tree[node].r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> tree[node].sum;</span><br><span class="line">&#125; </span><br><span class="line">ll mid=(tree[node].l+tree[node].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">Occur res;</span><br><span class="line">spread(node);</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid)</span><br><span class="line">&#123;</span><br><span class="line">res=res+query(l,r,node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid)</span><br><span class="line">&#123;</span><br><span class="line">res=res+query(l,r,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">sorts</span><span class="params">(ll l,ll r,ll cmp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll cur=l;</span><br><span class="line">Occur val=query(l,r,<span class="number">1</span>),curr;</span><br><span class="line"><span class="keyword">if</span>(!cmp)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">26</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">curr.num[i]=<span class="number">1</span>,curr.num[i<span class="number">-1</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(val.num[i])</span><br><span class="line">&#123;</span><br><span class="line">cover(l,l+val.num[i]<span class="number">-1</span>,curr,<span class="number">1</span>);</span><br><span class="line">l=l+val.num[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">26</span>;i;i--)</span><br><span class="line">&#123;</span><br><span class="line">curr.num[i]=<span class="number">1</span>,curr.num[i+<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(val.num[i])</span><br><span class="line">&#123;</span><br><span class="line">cover(l,l+val.num[i]<span class="number">-1</span>,curr,<span class="number">1</span>);</span><br><span class="line">l=l+val.num[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">spreadAll</span><span class="params">(ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">spread(node);</span><br><span class="line"><span class="keyword">if</span>(tree[node].l==tree[node].r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">spreadAll(node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">spreadAll((node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">update(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">preorder</span><span class="params">(ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tree[node].l==tree[node].r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">26</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(tree[node].sum.num[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">putchar</span>((<span class="keyword">char</span>)(i+<span class="string">'a'</span><span class="number">-1</span>));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">preorder(node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">preorder((node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt=read(),qcnt=read();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,&amp;str);</span><br><span class="line">    create(<span class="number">1</span>,cnt,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;qcnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    l=read(),r=read(),x=read();</span><br><span class="line">    sorts(l,r,!x);</span><br><span class="line">&#125;</span><br><span class="line">spreadAll(<span class="number">1</span>),preorder(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「CodeForces 501D」Misha and Permutations Summation</title>
      <link href="/2018/11/19/%E3%80%8CCodeForces-501D%E3%80%8DMisha-and-Permutations-Summation/"/>
      <url>/2018/11/19/%E3%80%8CCodeForces-501D%E3%80%8DMisha-and-Permutations-Summation/</url>
      
        <content type="html"><![CDATA[<p>设$P$是一个长度为$n$的排列，定义$\operatorname{ord}P$为$P$在所有排列中的名次。<br>给定两个长度为$n$的排列$P_1,P_2$，求第$\operatorname{ord}P_1+\operatorname{ord}P_2 \bmod n!$小的排列。<br><a id="more"></a></p><h3 id="前置技能"><a href="#前置技能" class="headerlink" title="前置技能"></a>前置技能</h3><p><a href="https://karry5307.github.io/2018/11/18/%E3%80%8CUVa-11525%E3%80%8DPermutation/">康托展开</a><br>这里讲从排列映射到数的过程，还是假设这个排列长度为$n$。<br>对于第$i$次操作，统计这个数后面有多少个比它小的数，记为$a_i$<br>那么答案是$\sum_{i=1}^{n}a_i(n-i)!$</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这一个题和<a href="https://www.luogu.org/problemnew/show/UVA11525" target="_blank" rel="noopener">UVa 11525</a>很像，不会做的可以参考一下<a href="https://karry5307.github.io/2018/11/18/%E3%80%8CUVa-11525%E3%80%8DPermutation/">本蒟蒻的题解</a>，做法就是用一颗权值线段树维护全局没被放进排列中的第$k$小，所以做这个题可以先把它转化为上面那个题。<br>首先把两个排列映射到整数，这里要统计后面有多少个比第$i$个数$a_i$小的数。如果暴力找的话是$O(n^2)$的。但是，可以发现排列是由$0,1\cdots n-1$组成的，那么<strong>排列里比这个数小的数的个数就是这个数</strong>。<br>这句话不是很好懂，但是很重要。因为排列里比这个数$x$小的只有$0,1\cdots x-1$，共有$x$个，所以有$x$个数比$x$小。<br>所以可以显然推出后面比$a_i$小的数的个$=$总共比$a_i$小的数$-$在$a_i$前面比$a_i$小的数。而排在前面比$a_i$小的数可以用树状数组维护。<br>用一个树状数组维护第$i$个数是否出现过。对于当前的数，统计$1$到当前数$-1$中的和，就是在这个数前面比它小的数。<br>所以说，可以用$O(n\log n)$的时间复杂度把$a_{P_1,i}$和$a_{P_2,i}$（$a$指的是前置技能里的$a$数组）求出来，记$S_i=a_{P_1,i}+a_{P_2,i}$。<br>接下来化简$S$，由于$(x+1)\cdot x!=(x+1)!$，于是可以用这个性质化简$S_i$，使得$0\leq S_i\leq n-i$。<br>具体方法是，对于$S_i$，$S_{i+1}+=S_i \% n-i,S_i\%=n-i$就可以简化$S$数组了。<br>最后我们就把问题转化为上面的那个题了，用那个题的方法做就可以了qwq。<br>时间复杂度$O(n\log n)$，常数不大<del>除了权值线段树</del>，跑了$2270$ms，拿了最优解qwq。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">2e5</span>+<span class="number">51</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BIT</span>&#123;</span></span><br><span class="line">    ll size;</span><br><span class="line">    ll num[MAXN];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">lowbit</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x&amp;-x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(ll pos,ll val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(;pos&lt;=size;pos+=lowbit(pos))</span><br><span class="line">        &#123;</span><br><span class="line">            num[pos]+=val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">queryPrefix</span><span class="params">(ll pos)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ll res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;pos;pos-=lowbit(pos))</span><br><span class="line">        &#123;</span><br><span class="line">            res+=num[pos];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegmentTree</span>&#123;</span></span><br><span class="line">    ll l,r,size;</span><br><span class="line">&#125;;</span><br><span class="line">BIT bit,bit2;</span><br><span class="line">SegmentTree tree[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line">ll cnt,num;</span><br><span class="line">ll perm[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[node].size=tree[node&lt;&lt;<span class="number">1</span>].size+tree[(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">(ll l,ll r,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[node].l=l,tree[node].r=r;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[node].size=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    create(l,mid,node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    create(mid+<span class="number">1</span>,r,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">    update(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">findVal</span><span class="params">(ll rk,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[node].l==tree[node].r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[node].size=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> tree[node].l;</span><br><span class="line">    &#125;</span><br><span class="line">    ll res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(rk&lt;=tree[node&lt;&lt;<span class="number">1</span>].size)</span><br><span class="line">    &#123;</span><br><span class="line">        res=findVal(rk,node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        res=findVal(rk-tree[node&lt;&lt;<span class="number">1</span>].size,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">    &#125; </span><br><span class="line">    update(node);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    bit.size=bit2.size=cnt=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        num=read();</span><br><span class="line">        perm[i]=num-bit.queryPrefix(num),bit.add(num+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        num=read();</span><br><span class="line">        perm[i]+=num-bit2.queryPrefix(num),bit2.add(num+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=cnt,j=<span class="number">0</span>;i;i--,j++)</span><br><span class="line">    &#123;</span><br><span class="line">        perm[i<span class="number">-1</span>]+=perm[i]/(j+<span class="number">1</span>),perm[i]%=(j+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    create(<span class="number">1</span>,cnt,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,findVal(perm[i]+<span class="number">1</span>,<span class="number">1</span>)<span class="number">-1</span>);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CodeForces </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 权值线段树 </tag>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「UVa 11525」Permutation</title>
      <link href="/2018/11/18/%E3%80%8CUVa-11525%E3%80%8DPermutation/"/>
      <url>/2018/11/18/%E3%80%8CUVa-11525%E3%80%8DPermutation/</url>
      
        <content type="html"><![CDATA[<p>给定$n$个数$x_1,x_2\cdots x_n$，已知$S=\sum^{n}_{i=1}x_i(n-i)!$，求第$S$个排列<br><a id="more"></a></p><h3 id="前置技能"><a href="#前置技能" class="headerlink" title="前置技能"></a>前置技能</h3><p>康托展开是一个比较常用的哈希技巧，可以将一个排列$a_1,a_2\cdots a_n$映射到一个整数$k$，这个整数$k$就是这个排列在所有排列中的名次。<br>由于它是双射的，所以也可以从一个整数还原这个整数所对应的全排列。<br>假定这个排列是由$n$个数组成的，那么有从一个整数$k$映射到第$k$小的排列的方法：<br>将$k$写成$\sum^{n}_{i=1}x_i(n-i)!$的形式，其中对于任意$x_i$，有$0\leq x_i\leq i$。<br>对于第$i$次操作，选择当前没有选过的第$x_i$大的数加入排列。<br>进行第二步$n$次，所得的排列即为所求。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>注意到，题目已经完成了第一步，所以只需要完成第二步就可以了。<br>而数据范围$k\leq 5\times10^4$，所以要写一种高效的数据结构，支持区间第$k$小和删除一个数。<br>这里用权值线段树实现，由于$1\leq x_i\leq n$（这里的变量都是值上面的题意而言的），所以不用离散化。于是查询变得很简单了，但删除呢？<br>可以将这个数置为$0$，意思是被删除了。如果这个节点的值为$0$，那么整个子树都不复存在。<br>这份代码还是跑的蛮快的，$60$ms。<del>可还是没有最优解跑的快</del><br>最后，<strong>此题卡输出格式，</strong>要像我这么写才能AC</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">5e4</span>+<span class="number">51</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegmentTree</span>&#123;</span></span><br><span class="line">    ll l,r,size;</span><br><span class="line">&#125;;</span><br><span class="line">ll test,cnt,num;</span><br><span class="line">SegmentTree tree[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[node].size=tree[node&lt;&lt;<span class="number">1</span>].size+tree[(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">(ll l,ll r,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[node].l=l,tree[node].r=r;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[node].size=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    create(l,mid,node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    create(mid+<span class="number">1</span>,r,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">    update(node);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">findVal</span><span class="params">(ll rk,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[node].l==tree[node].r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[node].size=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> tree[node].l;</span><br><span class="line">    &#125;</span><br><span class="line">    ll res;</span><br><span class="line">    <span class="keyword">if</span>(rk&lt;=tree[node&lt;&lt;<span class="number">1</span>].size)</span><br><span class="line">    &#123;</span><br><span class="line">        res=findVal(rk,node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        res=findVal(rk-tree[node&lt;&lt;<span class="number">1</span>].size,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    update(node);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    test=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;test;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt=read();</span><br><span class="line">        create(<span class="number">1</span>,cnt,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cnt;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            num=read()+<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>,findVal(num,<span class="number">1</span>));</span><br><span class="line">            <span class="built_in">putchar</span>(j==cnt<span class="number">-1</span>?<span class="string">'\n'</span>:<span class="string">' '</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 权值线段树 </tag>
            
            <tag> 组合数学 </tag>
            
            <tag> UVa </tag>
            
            <tag> 康托展开 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「UVa 11297」Census</title>
      <link href="/2018/11/16/%E3%80%8CUVa-11297%E3%80%8DCensus/"/>
      <url>/2018/11/16/%E3%80%8CUVa-11297%E3%80%8DCensus/</url>
      
        <content type="html"><![CDATA[<p>给定一个$n\times n$的矩阵，支持单点修改，查询子矩阵最大值和子矩阵最小值。<br><a id="more"></a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.org/problemnew/show/UVA11297" target="_blank" rel="noopener">UVa 11297</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>经典的二维带修RMQ问题。<br>一个暴力的思想是建$500$棵线段树，对于修改就在对应的线段树上修改，对于查询的时候就一行一行的查询，每一次把答案与之前的答案合并一下就好了qwq。<br>这样子做的时间复杂度是$O(qn\log n)$，不会TLE，但是跑的极慢，在测的时候跑了$1070$ms，没有树套树跑的快……</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">551</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegmentTree</span>&#123;</span></span><br><span class="line">    ll l,r,minn,maxn;  </span><br><span class="line">&#125;;</span><br><span class="line">SegmentTree tree[MAXN][MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line">ll size,qcnt,lx,ly,rx,ry,x,y,val,minn,maxn;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line">ll num[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(ll dim,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[dim][node].maxn=max(tree[dim][node&lt;&lt;<span class="number">1</span>].maxn,tree[dim][(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].maxn);</span><br><span class="line">    tree[dim][node].minn=min(tree[dim][node&lt;&lt;<span class="number">1</span>].minn,tree[dim][(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].minn);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">(ll dim,ll l,ll r,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[dim][node].l=l,tree[dim][node].r=r;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[dim][node].minn=tree[dim][node].maxn=num[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    create(dim,l,mid,node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    create(dim,mid+<span class="number">1</span>,r,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">    update(dim,node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">changePoint</span><span class="params">(ll dim,ll pos,ll val,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[dim][node].l==tree[dim][node].r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[dim][node].minn=tree[dim][node].maxn=val;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mid=(tree[dim][node].l+tree[dim][node].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(pos&lt;=mid)</span><br><span class="line">    &#123;</span><br><span class="line">        changePoint(dim,pos,val,node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        changePoint(dim,pos,val,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    update(dim,node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">queryMax</span><span class="params">(ll dim,ll l,ll r,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tree[dim][node].l&amp;&amp;r&gt;=tree[dim][node].r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> tree[dim][node].maxn;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mid=(tree[dim][node].l+tree[dim][node].r)&gt;&gt;<span class="number">1</span>,res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid)</span><br><span class="line">    &#123;</span><br><span class="line">        res=max(res,queryMax(dim,l,r,node&lt;&lt;<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid)</span><br><span class="line">    &#123;</span><br><span class="line">        res=max(res,queryMax(dim,l,r,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">queryMin</span><span class="params">(ll dim,ll l,ll r,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tree[dim][node].l&amp;&amp;r&gt;=tree[dim][node].r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> tree[dim][node].minn;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mid=(tree[dim][node].l+tree[dim][node].r)&gt;&gt;<span class="number">1</span>,res=<span class="number">0x7fffffff</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid)</span><br><span class="line">    &#123;</span><br><span class="line">        res=min(res,queryMin(dim,l,r,node&lt;&lt;<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid)</span><br><span class="line">    &#123;</span><br><span class="line">        res=min(res,queryMin(dim,l,r,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    size=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=size;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=size;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            num[j]=read();</span><br><span class="line">        &#125;</span><br><span class="line">        create(i,<span class="number">1</span>,size,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    qcnt=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;qcnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;ch;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">'q'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            lx=read(),ly=read(),rx=read(),ry=read();</span><br><span class="line">            maxn=<span class="number">0</span>,minn=<span class="number">0x7fffffff</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=lx;j&lt;=rx;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                maxn=max(maxn,queryMax(j,ly,ry,<span class="number">1</span>));</span><br><span class="line">                minn=min(minn,queryMin(j,ly,ry,<span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,maxn,minn);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            x=read(),y=read(),val=read();</span><br><span class="line">            changePoint(x,y,val,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> UVa </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「UVa 11992」Fast Matrix Operations</title>
      <link href="/2018/11/15/%E3%80%8CUVa-11992%E3%80%8DFast-Matrix-Operations/"/>
      <url>/2018/11/15/%E3%80%8CUVa-11992%E3%80%8DFast-Matrix-Operations/</url>
      
        <content type="html"><![CDATA[<p>给定一个$r\times c$矩阵，支持子矩阵加某一个值，子矩阵覆盖为某一个值，查询某个子矩阵的值。<br><a id="more"></a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>一如既往放洛谷的链接……<br><a href="https://www.luogu.org/problemnew/show/UVA11992" target="_blank" rel="noopener">UVa 11992</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>一个暴力的想法是由于$r$不超过$20$，所以可以开$20$棵线段树，修改和覆盖就不难啦qwq。<br>至于查询，可以处理这一行的时候合并这一行的答案和原来的答案就好了qwq。<del>所以我查询了$3$次</del><br>这个时间复杂度是$O(r\log c)$，绝对不会T掉的</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>代码略丑，$233$行……</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">5e4</span>+<span class="number">51</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegmentTree</span>&#123;</span></span><br><span class="line">    ll l,r,sum,maxn,minn,tag,cover;</span><br><span class="line">&#125;; </span><br><span class="line">SegmentTree tree[<span class="number">21</span>][MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line">ll length,width,qcnt,lx,rx,ly,ry,op,val,sum,maxn,minn;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(ll dim,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[dim][node].sum=tree[dim][node&lt;&lt;<span class="number">1</span>].sum+tree[dim][(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].sum;</span><br><span class="line">    tree[dim][node].maxn=max(tree[dim][node&lt;&lt;<span class="number">1</span>].maxn,tree[dim][(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].maxn);</span><br><span class="line">    tree[dim][node].minn=min(tree[dim][node&lt;&lt;<span class="number">1</span>].minn,tree[dim][(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].minn);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">(ll dim,ll l,ll r,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[dim][node].l=l,tree[dim][node].r=r,tree[dim][node].cover=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[dim][node].sum=tree[dim][node].maxn=tree[dim][node].minn=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    create(dim,l,mid,node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    create(dim,mid+<span class="number">1</span>,r,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">    update(dim,node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">spread</span><span class="params">(ll dim,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ls=node&lt;&lt;<span class="number">1</span>,rs=ls|<span class="number">1</span>;</span><br><span class="line">    ll lx=(tree[dim][ls].r-tree[dim][ls].l+<span class="number">1</span>);</span><br><span class="line">    ll rx=(tree[dim][rs].r-tree[dim][rs].l+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(tree[dim][node].cover!=<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[dim][ls].maxn=tree[dim][node].cover;</span><br><span class="line">        tree[dim][rs].maxn=tree[dim][node].cover;</span><br><span class="line">        tree[dim][ls].minn=tree[dim][node].cover;</span><br><span class="line">        tree[dim][rs].minn=tree[dim][node].cover;</span><br><span class="line">        tree[dim][ls].sum=tree[dim][node].cover*lx;</span><br><span class="line">        tree[dim][rs].sum=tree[dim][node].cover*rx;</span><br><span class="line">        tree[dim][ls].cover=tree[dim][rs].cover=tree[dim][node].cover;</span><br><span class="line">        tree[dim][ls].tag=tree[dim][rs].tag=<span class="number">0</span>;</span><br><span class="line">        tree[dim][node].cover=<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(tree[dim][node].tag)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[dim][ls].maxn+=tree[dim][node].tag;</span><br><span class="line">        tree[dim][rs].maxn+=tree[dim][node].tag;</span><br><span class="line">        tree[dim][ls].minn+=tree[dim][node].tag;</span><br><span class="line">        tree[dim][rs].minn+=tree[dim][node].tag;</span><br><span class="line">        tree[dim][ls].sum+=tree[dim][node].tag*lx;</span><br><span class="line">        tree[dim][rs].sum+=tree[dim][node].tag*rx;</span><br><span class="line">        tree[dim][ls].tag+=tree[dim][node].tag;</span><br><span class="line">        tree[dim][rs].tag+=tree[dim][node].tag;</span><br><span class="line">        tree[dim][node].tag=<span class="number">0</span>;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(ll dim,ll l,ll r,ll val,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tree[dim][node].l&amp;&amp;r&gt;=tree[dim][node].r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[dim][node].sum+=(tree[dim][node].r-tree[dim][node].l+<span class="number">1</span>)*val;</span><br><span class="line">        tree[dim][node].maxn+=val,tree[dim][node].minn+=val;</span><br><span class="line">        tree[dim][node].tag+=val;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    spread(dim,node);</span><br><span class="line">    ll mid=(tree[dim][node].l+tree[dim][node].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid)</span><br><span class="line">    &#123;</span><br><span class="line">        add(dim,l,r,val,node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid)</span><br><span class="line">    &#123;</span><br><span class="line">        add(dim,l,r,val,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    update(dim,node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cover</span><span class="params">(ll dim,ll l,ll r,ll val,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tree[dim][node].l&amp;&amp;r&gt;=tree[dim][node].r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[dim][node].sum=(tree[dim][node].r-tree[dim][node].l+<span class="number">1</span>)*val;</span><br><span class="line">        tree[dim][node].maxn=tree[dim][node].minn=val;</span><br><span class="line">        tree[dim][node].cover=val;</span><br><span class="line">        tree[dim][node].tag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    spread(dim,node);</span><br><span class="line">    ll mid=(tree[dim][node].l+tree[dim][node].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid)</span><br><span class="line">    &#123;</span><br><span class="line">        cover(dim,l,r,val,node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid)</span><br><span class="line">    &#123;</span><br><span class="line">        cover(dim,l,r,val,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    update(dim,node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">query</span><span class="params">(ll dim,ll l,ll r,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tree[dim][node].l&amp;&amp;r&gt;=tree[dim][node].r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> tree[dim][node].sum;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mid=(tree[dim][node].l+tree[dim][node].r)&gt;&gt;<span class="number">1</span>,res=<span class="number">0</span>;</span><br><span class="line">    spread(dim,node);</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid)</span><br><span class="line">    &#123;</span><br><span class="line">        res+=query(dim,l,r,node&lt;&lt;<span class="number">1</span>);  </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid)</span><br><span class="line">    &#123;</span><br><span class="line">        res+=query(dim,l,r,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">queryMax</span><span class="params">(ll dim,ll l,ll r,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tree[dim][node].l&amp;&amp;r&gt;=tree[dim][node].r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> tree[dim][node].maxn;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mid=(tree[dim][node].l+tree[dim][node].r)&gt;&gt;<span class="number">1</span>,res=<span class="number">0</span>;</span><br><span class="line">    spread(dim,node);</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid)</span><br><span class="line">    &#123;</span><br><span class="line">        res=max(res,queryMax(dim,l,r,node&lt;&lt;<span class="number">1</span>));  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid)</span><br><span class="line">    &#123;</span><br><span class="line">        res=max(res,queryMax(dim,l,r,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">queryMin</span><span class="params">(ll dim,ll l,ll r,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tree[dim][node].l&amp;&amp;r&gt;=tree[dim][node].r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> tree[dim][node].minn;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mid=(tree[dim][node].l+tree[dim][node].r)&gt;&gt;<span class="number">1</span>,res=<span class="number">0x7fffffff</span>;</span><br><span class="line">    spread(dim,node);</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid)</span><br><span class="line">    &#123;</span><br><span class="line">        res=min(res,queryMin(dim,l,r,node&lt;&lt;<span class="number">1</span>));  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid)</span><br><span class="line">    &#123;</span><br><span class="line">        res=min(res,queryMin(dim,l,r,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    width=read(),qcnt=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=length;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        create(i,<span class="number">1</span>,width,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=qcnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        op=read(),lx=read(),ly=read(),rx=read(),ry=read();</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            val=read();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=lx;j&lt;=rx;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                add(j,ly,ry,val,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            val=read(); </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=lx;j&lt;=rx;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                cover(j,ly,ry,val,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sum=maxn=<span class="number">0</span>,minn=<span class="number">0x7fffffff</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=lx;j&lt;=rx;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                sum+=query(j,ly,ry,<span class="number">1</span>);</span><br><span class="line">                maxn=max(maxn,queryMax(j,ly,ry,<span class="number">1</span>));</span><br><span class="line">                minn=min(minn,queryMin(j,ly,ry,<span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>,sum,minn,maxn);</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;length)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        solve();</span><br><span class="line">        <span class="built_in">memset</span>(tree,<span class="number">0</span>,<span class="keyword">sizeof</span>(tree));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> UVa </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>NOIP2018滚粗记</title>
      <link href="/2018/11/15/NOIP2018%E6%BB%9A%E7%B2%97%E8%AE%B0/"/>
      <url>/2018/11/15/NOIP2018%E6%BB%9A%E7%B2%97%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>NOIP要咕咕了……<br><a id="more"></a></p><h3 id="Day-0"><a href="#Day-0" class="headerlink" title="Day 0"></a>Day 0</h3><p>上午写模板,lca,Heap+Dijkstra,k短路,网络流，好像背不下来……<br>下午与全机房的大佬颓slay，咕咕咕……</p><h3 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h3><h4 id="Task-1-road"><a href="#Task-1-road" class="headerlink" title="Task 1 road"></a>Task 1 road</h4><p>开始：先写个线段树再说吧……<br>后来:这……这不是积木大赛吗？我怎么一开始就写的线段树……</p><h4 id="Task-2-money"><a href="#Task-2-money" class="headerlink" title="Task 2 money"></a>Task 2 money</h4><p>开始：一脸茫然的样子……<br>后来：可以乱搞诶，消掉其他货币组成的货币，剩下的直接选，标记一下，$O(Tn25000)$应该不会TLE……</p><h4 id="Task-3-track"><a href="#Task-3-track" class="headerlink" title="Task 3 track"></a>Task 3 track</h4><p>开始：应该是个二分答案……<br>后来：觉得$m=1$可做，好像有$10$分啊，后面的骗一下分吧，今天要$100+100+10=210$滚粗了……</p><h3 id="Day-2"><a href="#Day-2" class="headerlink" title="Day 2"></a>Day 2</h3><h4 id="Task-1-travel"><a href="#Task-1-travel" class="headerlink" title="Task 1 travel"></a>Task 1 travel</h4><p>开始：树上$60$分真好做，基环树？不会……<br>后来：好像可以找环，断边乱搞……（事实上这是非正解，咕咕，但是可以过咕咕F的数据）</p><h4 id="Task-2-game"><a href="#Task-2-game" class="headerlink" title="Task 2 game"></a>Task 2 game</h4><p>开始：先爆搜，打个表再说……<br>后来：为什么$3\times3$不对，搜出$144$，为什么……骗一点分吧</p><h4 id="Task-3-defense"><a href="#Task-3-defense" class="headerlink" title="Task 3 defense"></a>Task 3 defense</h4><p>开始：好像是个$dp$……<br>后来：我擦！$ddp$？不会做，今天是不是要$76+33+0=109$滚粗……</p><h3 id="Day-log-n"><a href="#Day-log-n" class="headerlink" title="Day $log(n)$"></a>Day $log(n)$</h3><p>洛谷成绩$100+100+25+76+55+0=356$滚粗……</p><h3 id="Day-n"><a href="#Day-n" class="headerlink" title="Day $n$"></a>Day $n$</h3><p>咕咕F的成绩再一次咕掉了，我的博客也要咕掉……</p><h3 id="Day-n-log-n"><a href="#Day-n-log-n" class="headerlink" title="Day $n\log(n)$"></a>Day $n\log(n)$</h3><p><img src="/2018/11/15/NOIP2018滚粗记/score.JPG" alt=""><br>成绩？呵呵……技不如人，被吊打</p>]]></content>
      
      
      
        <tags>
            
            <tag> 游记/考试 </tag>
            
            <tag> 待修改 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P2532」[AHOI2012]树屋阶梯</title>
      <link href="/2018/11/10/%E3%80%8CLuogu-P2532%E3%80%8D-AHOI2012-%E6%A0%91%E5%B1%8B%E9%98%B6%E6%A2%AF/"/>
      <url>/2018/11/10/%E3%80%8CLuogu-P2532%E3%80%8D-AHOI2012-%E6%A0%91%E5%B1%8B%E9%98%B6%E6%A2%AF/</url>
      
        <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>NOIP rp++!<br><a id="more"></a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.org/problemnew/show/P2532" target="_blank" rel="noopener">Luogu P2532</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>考虑$f_i$表示搭$i$层高的阶梯的方案数，$g_{i,j}$表示最左下角的钢材上面有$i$层高，右边有$j$层高的方案数，那么如图<br><img src="/2018/11/10/「Luogu-P2532」-AHOI2012-树屋阶梯/42848.jpg" alt=""><br>$f_n=\sum^{n-1}_{i=1}g_{i,j}$<br>而<br>$i+j=n$且$g_{i,j}=f_if_j$<br>$\therefore f_n=\sum^{n-1}_{i=1}f_if_{n-i}$<br><del>显然</del>是卡特兰的递推式，所以就可以用卡特兰数求，但是要用高精度……</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">2e4</span>+<span class="number">51</span>; </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BigInt</span>&#123;</span></span><br><span class="line">    ll digit;</span><br><span class="line">    ll num[MAXN];</span><br><span class="line">    BigInt()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(num,<span class="number">0</span>,<span class="keyword">sizeof</span>(num));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">void</span> <span class="keyword">operator</span> =(ll x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(x)</span><br><span class="line">        &#123;</span><br><span class="line">            num[digit++]=x%<span class="number">10000</span>,x/=<span class="number">10000</span>;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">op</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,num[digit<span class="number">-1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=digit<span class="number">-2</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!num[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"0000"</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ll rest=<span class="number">3</span>-(ll)(<span class="built_in">log10</span>(num[i]));</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=rest;j;j--)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">putchar</span>(<span class="string">'0'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>,num[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &gt;(<span class="keyword">const</span> BigInt &amp;rhs)<span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(digit!=rhs.digit)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> digit&gt;rhs.digit;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=digit<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(num[i]!=rhs.num[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> num[i]&gt;rhs.num[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;; </span><br><span class="line">ll num;</span><br><span class="line">BigInt res;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> BigInt <span class="keyword">operator</span> +(BigInt x,BigInt y)</span><br><span class="line">&#123;</span><br><span class="line">    BigInt res;</span><br><span class="line">    ll carry=<span class="number">0</span>;</span><br><span class="line">    res.digit=max(x.digit,y.digit)+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=res.digit;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        res.num[i]=x.num[i]+y.num[i]+carry;</span><br><span class="line">        carry=res.num[i]/<span class="number">10000</span>,res.num[i]%=<span class="number">10000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!res.num[res.digit<span class="number">-1</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        res.digit--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> BigInt <span class="keyword">operator</span> *(BigInt x,ll y)</span><br><span class="line">&#123;</span><br><span class="line">    BigInt res;</span><br><span class="line">    ll carry=<span class="number">0</span>;</span><br><span class="line">    res.digit=x.digit+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=res.digit;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        res.num[i]=x.num[i]*y+carry;</span><br><span class="line">        carry=res.num[i]/<span class="number">10000</span>,res.num[i]%=<span class="number">10000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!res.num[res.digit<span class="number">-1</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        res.digit--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> BigInt <span class="keyword">operator</span> /(BigInt x,ll y)</span><br><span class="line">&#123;</span><br><span class="line">    BigInt res;</span><br><span class="line">    ll cur=<span class="number">0</span>;</span><br><span class="line">    res.digit=x.digit;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=x.digit<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        cur=cur*<span class="number">10000</span>+x.num[i];</span><br><span class="line">        <span class="keyword">if</span>(cur&gt;=y)</span><br><span class="line">        &#123;</span><br><span class="line">            res.num[i]=cur/y,cur%=y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!res.num[res.digit<span class="number">-1</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        res.digit--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    num=read();</span><br><span class="line">    res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2</span>*num;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        res=res*i;</span><br><span class="line">    &#125;</span><br><span class="line">    res=res/(num+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=num;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        res=res/i/i;</span><br><span class="line">    &#125;</span><br><span class="line">    res.op();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 高精 </tag>
            
            <tag> 卡特兰 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P3939」数颜色</title>
      <link href="/2018/11/08/%E3%80%8CLuogu-P3939%E3%80%8D%E6%95%B0%E9%A2%9C%E8%89%B2/"/>
      <url>/2018/11/08/%E3%80%8CLuogu-P3939%E3%80%8D%E6%95%B0%E9%A2%9C%E8%89%B2/</url>
      
        <content type="html"><![CDATA[<p>给定一个序列，支持交换两个元素和询问区间$(l,r)$内等于这个值的位置的数量。<br><a id="more"></a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.org/problemnew/show/P3939" target="_blank" rel="noopener">Luogu P3939</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>肯定有人学数据结构学傻了吧，我们机房有写cdq的，有写主席树的，跑的都<del>很快</del>亲测这份代码不吸氧比上面两份代码吸氧还快……<br><a href="https://www.luogu.org/record/show?rid=13432611" target="_blank" rel="noopener">评测结果</a><br>用vector记录每一种颜色的兔子出现在从左到右的哪几个位置，对于每个询问，二分查找出当前右端点$r$的位置和左端点$l-1$的位置，两个值相减即得答案，但是要注意边界处理。<br>对于交换，找到两个兔子的位置，直接进行交换即可，注意要把所有的信息都交换……</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">3e5</span>+<span class="number">51</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;ll&gt;rabbit[MAXN];</span><br><span class="line">ll cnt,ccnt,op,l,r,x,lx,rx,maxn;</span><br><span class="line"><span class="built_in">vector</span>&lt;ll&gt;::iterator bg,ed;</span><br><span class="line">ll color[MAXN],ind[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt=read(),ccnt=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        color[i]=read();</span><br><span class="line">        rabbit[color[i]].push_back(i);</span><br><span class="line">        ind[i]=rabbit[color[i]].size()<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=ccnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        op=read();</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            l=read()<span class="number">-1</span>,r=read(),x=read();</span><br><span class="line">            bg=rabbit[x].begin();</span><br><span class="line">            ed=rabbit[x].end();</span><br><span class="line">            <span class="keyword">if</span>(bg==ed)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            lx=lower_bound(bg,ed,l)-bg,rx=lower_bound(bg,ed,r)-bg;</span><br><span class="line">            <span class="keyword">if</span>(rabbit[x][lx]==l)</span><br><span class="line">            &#123;</span><br><span class="line">                lx++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(rabbit[x][rx]==r)</span><br><span class="line">            &#123;</span><br><span class="line">                rx++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,rx-lx);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            x=read();</span><br><span class="line">            <span class="keyword">if</span>(color[x]!=color[x+<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                rabbit[color[x]][ind[x]]=x+<span class="number">1</span>;</span><br><span class="line">                rabbit[color[x+<span class="number">1</span>]][ind[x+<span class="number">1</span>]]=x;</span><br><span class="line">                swap(color[x],color[x+<span class="number">1</span>]);</span><br><span class="line">                swap(ind[x],ind[x+<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
            <tag> 模拟 </tag>
            
            <tag> 二分查找 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P1337」[JSOI2004]平衡点 / 吊打XXX</title>
      <link href="/2018/11/05/%E3%80%8CLuogu-P1337%E3%80%8D-JSOI2004-%E5%B9%B3%E8%A1%A1%E7%82%B9-%E5%90%8A%E6%89%93XXX/"/>
      <url>/2018/11/05/%E3%80%8CLuogu-P1337%E3%80%8D-JSOI2004-%E5%B9%B3%E8%A1%A1%E7%82%B9-%E5%90%8A%E6%89%93XXX/</url>
      
        <content type="html"><![CDATA[<p>给定一些带权点，求它们的带权费马点。<br><a id="more"></a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.org/problemnew/show/P1337" target="_blank" rel="noopener">Luogu P1337</a><br><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3680" target="_blank" rel="noopener">BZOJ 3680</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这题备选的解很多，所以采用<del>猜答案的方法</del>模拟退火来做此题。<br>注意下一些常数吧……<del>我是不会告诉你我卡了7次的</del></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">1e4</span>+<span class="number">51</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> delta=<span class="number">0.997</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x,y,weight; </span><br><span class="line">&#125;;</span><br><span class="line">Node nd[MAXN];</span><br><span class="line">ll cnt;</span><br><span class="line"><span class="keyword">double</span> resx,resy,res=<span class="number">1e18</span>,t; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">randInt</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>*rand()-RAND_MAX;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">potentialEnergy</span><span class="params">(<span class="keyword">double</span> x,<span class="keyword">double</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> sum=<span class="number">0</span>,xx,yy;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        xx=x-nd[i].x,yy=y-nd[i].y;</span><br><span class="line">        sum+=<span class="built_in">sqrt</span>(xx*xx+yy*yy)*nd[i].weight;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">simulatedAnnealing</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> x=resx,y=resy,rd,xx,yy,dt;</span><br><span class="line">    t=<span class="number">19260</span>;</span><br><span class="line">    <span class="keyword">while</span>(t&gt;<span class="number">1e-18</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        xx=resx+randInt()*t,yy=resy+randInt()*t;</span><br><span class="line">        rd=potentialEnergy(xx,yy),dt=rd-res;</span><br><span class="line">        <span class="keyword">if</span>(dt&lt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            x=xx,y=yy,resx=x,resy=y,res=rd;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">exp</span>(-dt/t)*RAND_MAX&gt;rand())</span><br><span class="line">            &#123;</span><br><span class="line">                x=xx,y=yy;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        t*=delta; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">SA</span><span class="params">(ll times)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;times;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        simulatedAnnealing();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    srand(time(<span class="number">0</span>)); </span><br><span class="line">    cnt=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        nd[i].x=read(),nd[i].y=read(),nd[i].weight=read();</span><br><span class="line">    &#125;</span><br><span class="line">    SA(<span class="number">9</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.3lf %.3lf"</span>,resx,resy);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> BZOJ </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> JSOI </tag>
            
            <tag> 随机化 </tag>
            
            <tag> 模拟退火 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P2197」【模板】nim游戏</title>
      <link href="/2018/11/02/%E3%80%8CLuogu-P2197%E3%80%8D%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91nim%E6%B8%B8%E6%88%8F/"/>
      <url>/2018/11/02/%E3%80%8CLuogu-P2197%E3%80%8D%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91nim%E6%B8%B8%E6%88%8F/</url>
      
        <content type="html"><![CDATA[<p>有$n$堆石子，第$i$堆有$a_i$个，$Alice$和$Bob$轮流取石子，$Alice$先取。每个游戏者只能取一堆石子，至少取一个，问哪个游戏者会赢。<br><a id="more"></a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.org/problemnew/show/P2197" target="_blank" rel="noopener">Luogu P2197</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>最基础的Nim游戏，先手必赢当且仅当$a_1 \operatorname{xor} a_2 \operatorname{xor} \cdots \operatorname{xor} a_n \not = 0$，代码很短。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line">ll test,cnt,res;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        res^=read();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(res!=<span class="number">0</span>?<span class="string">"Yes"</span>:<span class="string">"No"</span>);</span><br><span class="line">    res=<span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    test=read();</span><br><span class="line">    <span class="keyword">while</span>(test--)</span><br><span class="line">    &#123;</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
            <tag> 博弈论 </tag>
            
            <tag> Nim游戏 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P4438」[HNOI/AHOI2018]道路</title>
      <link href="/2018/11/01/%E3%80%8CLuogu-P4438%E3%80%8D-HNOI-AHOI2018-%E9%81%93%E8%B7%AF/"/>
      <url>/2018/11/01/%E3%80%8CLuogu-P4438%E3%80%8D-HNOI-AHOI2018-%E9%81%93%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<p>给你一颗有$2n-1$个节点的树，这一棵树的非叶节点均有两个儿子，左儿子与它连红边，右儿子与它连绿边，定义节点$i$的不便利值为<br>$c_i\cdot(a_i+x)\cdot(b_i+y)$<br>其中$x$表示根节点到节点$i$的未加粗红边数量，$y$表示根节点到节点$i$的未加粗绿边数量。<br>求加粗边数量为$n-1$的所有叶节点的不便利值。<br><a id="more"></a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.org/problemnew/show/P4438" target="_blank" rel="noopener">Luogu P4438</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>一道比较好的树形dp题。<br>将每一个城市标号$1$到$n-1$，乡村标号$n$到$2n-1$，设$dp[i][j][k]$表示标号后的$i$号节点到根节点要走过$j$条没有翻修的公路和$k$条没有翻修的铁路最小的不便利值。<br>设$l[i]$指的是通过公路连接$i$号结点的城市或乡村，$r[i]$指的是通过铁路连接$i$号结点的城市或乡村，那么<br>如果$i$是乡村，直接暴力算不便利值即可，即<br>$dp[i][j][k]=c_i\cdot(a_i+j)\cdot(b_i+k)$<br>如果$i$是城市，因为最多翻修$n-1$条路，所以考虑对通向每一个城市的公路或铁路进行翻修。<br>翻修通往城市$i$的公路的不便利值是$dp[l_i][j+1][k]+dp[r_i[j][k]$（因为通向$i$的铁路没翻修），铁路同理，即<br>$dp[i][j][k]=\min(dp[l_i][j+1][k]+dp[r_i[j][k],dp[l_i[j][k]+dp[r_i][j][k+1])$<br>所以就得到了转移方程。<br>最后善意的提醒一句，<strong>本题卡空间</strong>，大佬们可以将$dp$的一维改成$dfn$，蒟蒻不会，只能暴力</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">4e4</span>+<span class="number">51</span>;</span><br><span class="line">ll cnt;</span><br><span class="line">ll l[MAXN],r[MAXN],lx[MAXN],rx[MAXN];</span><br><span class="line">ll x[MAXN],y[MAXN],z[MAXN];</span><br><span class="line">ll dp[MAXN][<span class="number">41</span>][<span class="number">41</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node&gt;=cnt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    lx[l[node]]=lx[node]+<span class="number">1</span>,lx[r[node]]=lx[node];</span><br><span class="line">    rx[r[node]]=rx[node]+<span class="number">1</span>,rx[l[node]]=rx[node];</span><br><span class="line">    dfs(l[node]);</span><br><span class="line">    dfs(r[node]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ddp</span><span class="params">(ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll lc,rc;</span><br><span class="line">    <span class="keyword">if</span>(node&gt;=cnt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=lx[node];i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=rx[node];j++)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[node][i][j]=<span class="number">1l</span>l*(x[node]+i)*(y[node]+j)*z[node];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        ddp(l[node]);</span><br><span class="line">        ddp(r[node]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=lx[node];i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=rx[node];j++)</span><br><span class="line">            &#123;</span><br><span class="line">                lc=dp[l[node]][i][j]+dp[r[node]][i][j+<span class="number">1</span>];</span><br><span class="line">                rc=dp[r[node]][i][j]+dp[l[node]][i+<span class="number">1</span>][j];</span><br><span class="line">                dp[node][i][j]=min(lc,rc);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        l[i]=read(),r[i]=read();</span><br><span class="line">        l[i]=l[i]&lt;<span class="number">0</span>?-l[i]+cnt<span class="number">-1</span>:l[i],r[i]=r[i]&lt;<span class="number">0</span>?-r[i]+cnt<span class="number">-1</span>:r[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        x[i+cnt<span class="number">-1</span>]=read(),y[i+cnt<span class="number">-1</span>]=read(),z[i+cnt<span class="number">-1</span>]=read();</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>),ddp(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>,dp[<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 各省省选 </tag>
            
            <tag> HNOI </tag>
            
            <tag> 树形DP </tag>
            
            <tag> AHOI </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「SPOJ 2713」Can you answer these queries IV</title>
      <link href="/2018/10/28/%E3%80%8CSPOJ-2713%E3%80%8DCan-you-answer-these-queries-IV/"/>
      <url>/2018/10/28/%E3%80%8CSPOJ-2713%E3%80%8DCan-you-answer-these-queries-IV/</url>
      
        <content type="html"><![CDATA[<p>给一段正整数构成的区间，支持区间开平方以及询问区间和。<br><a id="more"></a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.org/problemnew/show/SP2713" target="_blank" rel="noopener">SPOJ 2713</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>考虑线段树，显然区间开平方是不能用<script type="math/tex">lazy\ tag</script>的，所以我们选择暴力修改。<br>先证明一个引理，区间最大值为<script type="math/tex">1</script>的区间进行修改是没有意义的。（这个证明算是补了一个坑）<br>证明：由于区间内所有数是正整数，所以区间最大值为<script type="math/tex">1</script>的区间内所有数均为<script type="math/tex">1</script>，而<script type="math/tex">\sqrt{1}=1</script>，故修改区间内的值没有意义，证毕。<br>于是我们考虑在修改区间时判断一下当前区间最大值是不是<script type="math/tex">1</script>，如果是，就没有修改的必要。如果这个节点的左右端点重合，直接修改即可，这样可以少修改许多修改了也没用的区间，至于查询还是一样的。<br>提醒大家有多组数据，<strong>记得初始化</strong></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">1e5</span>+<span class="number">51</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegmentTree</span>&#123;</span></span><br><span class="line">    ll l,r,sum,maxn;</span><br><span class="line">&#125;;</span><br><span class="line">SegmentTree tree[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line">ll cnt,qcnt,op,l,r,ccnt;</span><br><span class="line">ll num[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[node].sum=tree[node&lt;&lt;<span class="number">1</span>].sum+tree[(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].sum;</span><br><span class="line">    tree[node].maxn=max(tree[node&lt;&lt;<span class="number">1</span>].maxn,tree[(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].maxn);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">(ll l,ll r,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[node].l=l,tree[node].r=r;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[node].sum=tree[node].maxn=num[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    create(l,mid,node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    create(mid+<span class="number">1</span>,r,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">    update(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(ll l,ll r,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[node].maxn&lt;=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(tree[node].l==tree[node].r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[node].sum=tree[node].maxn=<span class="built_in">sqrt</span>(tree[node].sum);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mid=(tree[node].l+tree[node].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid)</span><br><span class="line">    &#123;</span><br><span class="line">        change(l,r,node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid)</span><br><span class="line">    &#123;</span><br><span class="line">        change(l,r,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    update(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">querySum</span><span class="params">(ll l,ll r,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tree[node].l&amp;&amp;r&gt;=tree[node].r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> tree[node].sum;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mid=(tree[node].l+tree[node].r)&gt;&gt;<span class="number">1</span>,res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid)</span><br><span class="line">    &#123;</span><br><span class="line">        res+=querySum(l,r,node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid)</span><br><span class="line">    &#123;</span><br><span class="line">        res+=querySum(l,r,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">queryMax</span><span class="params">(ll l,ll r,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tree[node].l&amp;&amp;r&gt;=tree[node].r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> tree[node].maxn;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mid=(tree[node].l+tree[node].r)&gt;&gt;<span class="number">1</span>,res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid)</span><br><span class="line">    &#123;</span><br><span class="line">        res=max(res,queryMax(l,r,node&lt;&lt;<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid)</span><br><span class="line">    &#123;</span><br><span class="line">        res=max(res,queryMax(l,r,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;cnt)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%lld:\n"</span>,++ccnt);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            num[i]=read();</span><br><span class="line">        &#125;</span><br><span class="line">        create(<span class="number">1</span>,cnt,<span class="number">1</span>);</span><br><span class="line">        qcnt=read();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;qcnt;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            op=read(),l=read(),r=read();</span><br><span class="line">            <span class="keyword">if</span>(l&gt;r)</span><br><span class="line">            &#123;</span><br><span class="line">                swap(l,r);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(op)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,querySum(l,r,<span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(queryMax(l,r,<span class="number">1</span>)&gt;<span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    change(l,r,<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(num,<span class="number">0</span>,<span class="keyword">sizeof</span>(num));</span><br><span class="line">        <span class="built_in">memset</span>(tree,<span class="number">0</span>,<span class="keyword">sizeof</span>(tree));</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 待修改 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> SPOJ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P2742」【模板】二维凸包</title>
      <link href="/2018/10/21/%E3%80%8CLuogu-P2742%E3%80%8D%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E4%BA%8C%E7%BB%B4%E5%87%B8%E5%8C%85/"/>
      <url>/2018/10/21/%E3%80%8CLuogu-P2742%E3%80%8D%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E4%BA%8C%E7%BB%B4%E5%87%B8%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<p>给定一个点集，求它的凸包的周长。<br><a id="more"></a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.org/problemnew/show/P2742" target="_blank" rel="noopener">Luogu P2742</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>二维凸包的模板题，没有什么好说的。<br><a href="https://karry5307.github.io/2018/10/21/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E4%BA%8C%E7%BB%B4%E5%87%B8%E5%8C%85/">不会凸包的右转这里</a><br>但是最后求周长是一定要算点的距离，而不是向量的长度。<del>被卡了两次</del></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">1e4</span>+<span class="number">51</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span>&#123;</span></span><br><span class="line">    db x,y;</span><br><span class="line">    Point(ll x=<span class="number">0</span>,ll y=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;x=x,<span class="keyword">this</span>-&gt;y=y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> Point &amp;rhs)<span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> y==rhs.y?x&lt;rhs.x:y&lt;rhs.y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> db <span class="title">polar</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">atan2</span>(y,x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> Point Vector;</span><br><span class="line">Point p[MAXN];</span><br><span class="line">ll cnt,minn;</span><br><span class="line">db res;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Vector <span class="keyword">operator</span> +(Vector x,Vector y)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> Vector(x.x+y.x,x.y+y.y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Vector <span class="keyword">operator</span> -(Vector x,Vector y)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> Vector(x.x-y.x,x.y-y.y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Vector <span class="keyword">operator</span> *(Vector x,db y)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> Vector(x.x*y,x.y*y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Vector <span class="keyword">operator</span> /(Vector x,db y)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> Vector(x.x/y,x.y/y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> db <span class="title">dot</span><span class="params">(Vector x,Vector y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.x*y.x+x.y*y.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> db <span class="title">length</span><span class="params">(Vector x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(dot(x,x));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> db <span class="title">angle</span><span class="params">(Vector x,Vector y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">acos</span>(dot(x,y)/length(x)/length(y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> db <span class="title">cross</span><span class="params">(Vector x,Vector y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.x*y.y-x.y*y.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> db <span class="title">dist</span><span class="params">(Vector x,Vector y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    db xx=x.x-y.x,yy=x.y-y.y;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(xx*xx+yy*yy);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Point x,Point y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> xx=cross(x-p[<span class="number">1</span>],y-p[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span>(xx&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!xx&amp;&amp;length(x-p[<span class="number">1</span>])&lt;length(y-p[<span class="number">1</span>]))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="built_in">deque</span>&lt;Point&gt; convexHull(Point *p,ll size)</span><br><span class="line">&#123;</span><br><span class="line">    Point top;</span><br><span class="line">    <span class="built_in">deque</span>&lt;Point&gt;vec;</span><br><span class="line">    <span class="keyword">if</span>(size==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        vec.push_back(p[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> vec;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(size==<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        vec.push_back(p[<span class="number">1</span>]),vec.push_back(p[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">return</span> vec;</span><br><span class="line">    &#125;</span><br><span class="line">    vec.push_back(p[<span class="number">1</span>]),vec.push_back(p[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=size;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        top=vec.back();</span><br><span class="line">        <span class="keyword">while</span>(cross(top-vec[vec.size()<span class="number">-2</span>],p[i]-top)&lt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            vec.pop_back(),top=vec.back();</span><br><span class="line">        &#125;</span><br><span class="line">        vec.push_back(p[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> vec;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt=read();</span><br><span class="line">    p[<span class="number">0</span>].x=p[<span class="number">0</span>].y=<span class="number">100000000000.0</span>;</span><br><span class="line">    <span class="keyword">if</span>(cnt==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"0.00"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>,&amp;p[i].x,&amp;p[i].y);</span><br><span class="line">        <span class="keyword">if</span>(p[i]&lt;p[minn])</span><br><span class="line">        &#123;</span><br><span class="line">            minn=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(p[minn],p[<span class="number">1</span>]),sort(p+<span class="number">2</span>,p+cnt+<span class="number">1</span>,cmp);</span><br><span class="line">    <span class="built_in">deque</span>&lt;Point&gt;pt=convexHull(p,cnt);</span><br><span class="line">    <span class="keyword">if</span>(pt.size()==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.2lf"</span>,<span class="number">0.0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;pt.size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            res+=dist(pt[i],pt[i<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        res+=dist(pt[<span class="number">0</span>],pt[pt.size()<span class="number">-1</span>]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.2lf"</span>,res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
            <tag> 计算几何 </tag>
            
            <tag> 凸包 </tag>
            
            <tag> 二维凸包 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>学习笔记·二维凸包</title>
      <link href="/2018/10/21/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E4%BA%8C%E7%BB%B4%E5%87%B8%E5%8C%85/"/>
      <url>/2018/10/21/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E4%BA%8C%E7%BB%B4%E5%87%B8%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<p>二维凸包是指一个面积最小的凸多边形，使得一个给定的点集都分布在这个凸多边形的内部或者边上。<br><a id="more"></a></p><h3 id="前置技能"><a href="#前置技能" class="headerlink" title="前置技能"></a>前置技能</h3><p><strong>计算几何基础</strong>，这个大概不用说了。</p><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><p>咕咕咕，这里我们使用比较好想的<script type="math/tex">Graham</script>算法进行求解。<br>前方大图警告。<br>首先呢，是一个点集。<br><img src="/2018/10/21/学习笔记·二维凸包/ch0.jpg" alt=""><br>因为<script type="math/tex">y</script>坐标最小的点肯定在这个凸包上，所以我们先找出<script type="math/tex">y</script>坐标最小的点,记为<script type="math/tex">P_1</script>。<br><img src="/2018/10/21/学习笔记·二维凸包/ch1.jpg" alt=""><br>接着考虑把剩下的点对于<script type="math/tex">P_1</script>从右往左编号。<br><img src="/2018/10/21/学习笔记·二维凸包/ch2.jpg" alt=""><br>PS:截图的锅，<script type="math/tex">P_{11}</script>上面那个点是<script type="math/tex">P_{12}</script>。<br>预处理完毕，接下来我们需要一个栈。由于<script type="math/tex">P_1</script>和<script type="math/tex">P_2</script>在凸包边界上，考虑将<script type="math/tex">P_1</script>和<script type="math/tex">P_2</script>入栈。<br>未完成的凸包用红色线条表示。<br><img src="/2018/10/21/学习笔记·二维凸包/ch4.JPG" alt=""><br>考虑<script type="math/tex">P_3</script>，加入它之后红色边界仍然是凸的，<script type="math/tex">P_3</script>入栈。<br><img src="/2018/10/21/学习笔记·二维凸包/ch5.jpg" alt=""><br>接下来考虑<script type="math/tex">P_4</script>，加入它之后边界是凹的，把当前栈顶<script type="math/tex">P_3</script>出栈。<br><img src="/2018/10/21/学习笔记·二维凸包/ch6.jpg" alt=""><br>考虑加入<script type="math/tex">P_4</script>当前红色边界加入<script type="math/tex">P_4</script>仍然是凸的，所以<script type="math/tex">P_4</script>入栈。<br><img src="/2018/10/21/学习笔记·二维凸包/ch7.JPG" alt=""><br>由于连续加入<script type="math/tex">P_5</script>，<script type="math/tex">P_6</script>，<script type="math/tex">P_7</script>后所得的红色边界仍然是凸的，所以将它们依次入栈。<br><img src="/2018/10/21/学习笔记·二维凸包/ch8.jpg" alt=""><br><img src="/2018/10/21/学习笔记·二维凸包/ch9.JPG" alt=""><br><img src="/2018/10/21/学习笔记·二维凸包/ch10.JPG" alt=""><br>在考虑<script type="math/tex">P_8</script>时，发现边界是凹的，将栈顶<script type="math/tex">P_7</script>出栈，而<script type="math/tex">P_8</script>入栈。<br><img src="/2018/10/21/学习笔记·二维凸包/ch11.JPG" alt=""><br><img src="/2018/10/21/学习笔记·二维凸包/ch12.JPG" alt=""><br>考虑<script type="math/tex">P_9</script>。在连续出栈<script type="math/tex">P_8</script>和<script type="math/tex">P_6</script>都不能满足红色边界为凸的，所以一出栈，将<script type="math/tex">P_9</script>入栈。<br><img src="/2018/10/21/学习笔记·二维凸包/ch13.JPG" alt=""><br><img src="/2018/10/21/学习笔记·二维凸包/ch14.JPG" alt=""><br><img src="/2018/10/21/学习笔记·二维凸包/ch15.JPG" alt=""><br>依次进行以下操作，可以得到一个处理到最后一个点的图像，然后就完结撒花了！<br><img src="/2018/10/21/学习笔记·二维凸包/ch16.JPG" alt=""><br><img src="/2018/10/21/学习笔记·二维凸包/complete.JPG" alt=""><br>所以说，<script type="math/tex">code</script>呢？<br>对不起，没有<del>个鬼</del>。<br><a href="https://karry5307.github.io/2018/10/21/%E3%80%8CLuogu-P2742%E3%80%8D%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E4%BA%8C%E7%BB%B4%E5%87%B8%E5%8C%85/">出门右转看代码</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算几何 </tag>
            
            <tag> 凸包 </tag>
            
            <tag> 二维凸包 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「CodeForces 1060C」Maximum Subrectangle</title>
      <link href="/2018/10/15/%E3%80%8CCodeForces-1060C%E3%80%8DMaximum-Subrectangle/"/>
      <url>/2018/10/15/%E3%80%8CCodeForces-1060C%E3%80%8DMaximum-Subrectangle/</url>
      
        <content type="html"><![CDATA[<p>给一个数<script type="math/tex">x</script>，序列<script type="math/tex">a</script>和另一个序列<script type="math/tex">b</script>，构造一个矩阵<script type="math/tex">c</script>使得<script type="math/tex">c_{i,j}=a_{i}\times b_{j}</script>。在矩阵中找出一个最大的矩形使得矩形内所有数的和小于<script type="math/tex">x</script>。<br><a id="more"></a><br>因为要求子矩阵的和，所以考虑二维前缀和。<br>但是由于矩阵的特殊性质<script type="math/tex">c_{i,j}=a_{i}\times b_{j}</script>，所以可以将二维前缀和转化为两个一维前缀和的乘积。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 未完待续 </tag>
            
            <tag> CodeForces </tag>
            
            <tag> 前缀和 </tag>
            
            <tag> 贪心 </tag>
            
            <tag> two pointers </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P4315」月下“毛景树”</title>
      <link href="/2018/10/15/%E3%80%8CLuogu-P4315%E3%80%8D%E6%9C%88%E4%B8%8B%E6%AF%9B%E6%99%AF%E6%A0%91/"/>
      <url>/2018/10/15/%E3%80%8CLuogu-P4315%E3%80%8D%E6%9C%88%E4%B8%8B%E6%AF%9B%E6%99%AF%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>给一棵树，支持修改边上的权值，将两点间路经全部增加<script type="math/tex">k</script>或全部覆盖为<script type="math/tex">k</script>，多次求当前树上两点间路径上的边权最大值。<br><a id="more"></a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.org/problemnew/show/P4315" target="_blank" rel="noopener">Luogu P4315</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p><del>我不会告诉你这道毒瘤题我调了两个月</del><br>吐槽一下毒瘤出题人，这份代码我足足写了<script type="math/tex">297</script>行，无语……<del>好吧当时交题的时候并没有把求<script type="math/tex">lca</script>删掉</del><br>此题一眼看过去是树剖+边权下放，把边权下放之后就是普通的树剖。<br>这里还有个奇淫技巧，就是在最后修改与查询时，为了不统计<script type="math/tex">LCA</script>，将<script type="math/tex">id[x]</script>改成<script type="math/tex">id[x]+1</script>，具体看注释。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    ll to,prev;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegmentTree</span>&#123;</span></span><br><span class="line">    ll l,r,maxn,tag,cover;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">2e5</span>+<span class="number">51</span>; </span><br><span class="line">edge ed[MAXN];</span><br><span class="line">SegmentTree tree[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line">ll last[MAXN],val[MAXN],depth[MAXN],fa[MAXN],size[MAXN],heavy[MAXN];</span><br><span class="line">ll id[MAXN],pre[MAXN],top[MAXN],from[MAXN],to[MAXN],dist[MAXN];</span><br><span class="line">ll tot,nc,ccnt,tx,x,y,z;</span><br><span class="line"><span class="built_in">string</span> op;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(ll from,ll to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ed[++tot].prev=last[from];</span><br><span class="line">    ed[tot].to=to;</span><br><span class="line">    last[from]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[node].maxn=max(tree[node&lt;&lt;<span class="number">1</span>].maxn,tree[(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].maxn);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">(ll l,ll r,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[node].l=l,tree[node].r=r,tree[node].cover=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[node].maxn=val[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    create(l,mid,node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    create(mid+<span class="number">1</span>,r,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">    update(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">spread</span><span class="params">(ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[node].cover!=<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[node&lt;&lt;<span class="number">1</span>].maxn=tree[node].cover;</span><br><span class="line">        tree[(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].maxn=tree[node].cover;        </span><br><span class="line">        tree[node&lt;&lt;<span class="number">1</span>].cover=tree[node].cover;</span><br><span class="line">        tree[(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].cover=tree[node].cover;</span><br><span class="line">        tree[node&lt;&lt;<span class="number">1</span>].tag=tree[(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].tag=<span class="number">0</span>;</span><br><span class="line">        tree[node].cover=<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(tree[node].tag)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[node&lt;&lt;<span class="number">1</span>].maxn+=tree[node].tag;</span><br><span class="line">        tree[(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].maxn+=tree[node].tag;</span><br><span class="line">        tree[node&lt;&lt;<span class="number">1</span>].tag+=tree[node].tag;</span><br><span class="line">        tree[(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].tag+=tree[node].tag;</span><br><span class="line">        tree[node].tag=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(ll pos,ll val,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[node].l==tree[node].r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[node].maxn=val;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mid=(tree[node].l+tree[node].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    spread(node);</span><br><span class="line">    <span class="keyword">if</span>(pos&lt;=mid)</span><br><span class="line">    &#123;</span><br><span class="line">        change(pos,val,node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        change(pos,val,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    update(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cover</span><span class="params">(ll l,ll r,ll val,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tree[node].l&amp;&amp;r&gt;=tree[node].r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[node].maxn=val;</span><br><span class="line">        tree[node].cover=val;</span><br><span class="line">        tree[node].tag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    spread(node);</span><br><span class="line">    ll mid=(tree[node].l+tree[node].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid)</span><br><span class="line">    &#123;</span><br><span class="line">        cover(l,r,val,node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid)</span><br><span class="line">    &#123;</span><br><span class="line">        cover(l,r,val,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    update(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(ll l,ll r,ll val,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tree[node].l&amp;&amp;r&gt;=tree[node].r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[node].maxn+=val;</span><br><span class="line">        tree[node].tag+=val;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    spread(node);</span><br><span class="line">    ll mid=(tree[node].l+tree[node].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid)</span><br><span class="line">    &#123;</span><br><span class="line">        add(l,r,val,node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid)</span><br><span class="line">    &#123;</span><br><span class="line">        add(l,r,val,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    update(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">queryMax</span><span class="params">(ll l,ll r,ll node)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tree[node].l&amp;&amp;r&gt;=tree[node].r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> tree[node].maxn;</span><br><span class="line">    &#125;</span><br><span class="line">    spread(node);</span><br><span class="line">    ll mid=(tree[node].l+tree[node].r)&gt;&gt;<span class="number">1</span>,val=-(<span class="number">1</span>&lt;&lt;<span class="number">30</span>);</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid)</span><br><span class="line">    &#123;</span><br><span class="line">        val=max(val,queryMax(l,r,node&lt;&lt;<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid)</span><br><span class="line">    &#123;</span><br><span class="line">        val=max(val,queryMax(l,r,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(ll node,ll f,ll dep)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    depth[node]=dep,fa[node]=f,size[node]=<span class="number">1</span>;</span><br><span class="line">    ll maxn=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=last[node];i;i=ed[i].prev)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ed[i].to!=f)</span><br><span class="line">        &#123;</span><br><span class="line">            dfs(ed[i].to,node,dep+<span class="number">1</span>);</span><br><span class="line">            size[node]+=size[ed[i].to];</span><br><span class="line">            <span class="keyword">if</span>(size[ed[i].to]&gt;maxn)</span><br><span class="line">            &#123;</span><br><span class="line">                heavy[node]=ed[i].to,maxn=size[ed[i].to];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ddfs</span><span class="params">(ll node,ll link)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    id[node]=++ccnt,val[ccnt]=pre[node],top[node]=link;</span><br><span class="line">    <span class="keyword">if</span>(!heavy[node])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ddfs(heavy[node],link);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=last[node];i;i=ed[i].prev)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ed[i].to!=fa[node]&amp;&amp;ed[i].to!=heavy[node])</span><br><span class="line">        &#123;</span><br><span class="line">            ddfs(ed[i].to,ed[i].to);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">queryPathMax</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans=-(<span class="number">1</span>&lt;&lt;<span class="number">30</span>);</span><br><span class="line">    <span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(depth[top[x]]&lt;depth[top[y]])</span><br><span class="line">        &#123;</span><br><span class="line">            swap(x,y);</span><br><span class="line">        &#125;</span><br><span class="line">        ans=max(ans,queryMax(id[top[x]],id[x],<span class="number">1</span>));</span><br><span class="line">        x=fa[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(depth[x]&gt;depth[y])</span><br><span class="line">    &#123;</span><br><span class="line">        swap(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    ans=max(ans,queryMax(id[x]+<span class="number">1</span>,id[y],<span class="number">1</span>));<span class="comment">//</span></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">changePoint</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    change(id[x],y,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">changePath</span><span class="params">(ll x,ll y,ll val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(depth[top[x]]&lt;depth[top[y]])</span><br><span class="line">        &#123;</span><br><span class="line">            swap(x,y);</span><br><span class="line">        &#125;</span><br><span class="line">        add(id[top[x]],id[x],val,<span class="number">1</span>);</span><br><span class="line">        x=fa[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(depth[x]&gt;depth[y])</span><br><span class="line">    &#123;</span><br><span class="line">        swap(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    add(id[x]+<span class="number">1</span>,id[y],val,<span class="number">1</span>);<span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">coverPath</span><span class="params">(ll x,ll y,ll val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(depth[top[x]]&lt;depth[top[y]])</span><br><span class="line">        &#123;</span><br><span class="line">            swap(x,y);</span><br><span class="line">        &#125;</span><br><span class="line">        cover(id[top[x]],id[x],val,<span class="number">1</span>);</span><br><span class="line">        x=fa[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(depth[x]&gt;depth[y])</span><br><span class="line">    &#123;</span><br><span class="line">        swap(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    cover(id[x]+<span class="number">1</span>,id[y],val,<span class="number">1</span>);<span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    nc=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nc<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        from[i]=read(),to[i]=read(),dist[i]=read();</span><br><span class="line">        addEdge(from[i],to[i]),addEdge(to[i],from[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>),ddfs(<span class="number">1</span>,<span class="number">1</span>),create(<span class="number">1</span>,nc,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nc<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    changePoint(depth[from[i]]&gt;depth[to[i]]?from[i]:to[i],dist[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;op,op!=<span class="string">"Stop"</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">if</span>(op==<span class="string">"Max"</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            x=read(),y=read();</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;queryPathMax(x,y)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="string">"Change"</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            x=read(),y=read();</span><br><span class="line">            tx=depth[from[x<span class="number">-1</span>]]&gt;depth[to[x<span class="number">-1</span>]]?from[x<span class="number">-1</span>]:to[x<span class="number">-1</span>];</span><br><span class="line">    changePoint(tx,y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="string">"Add"</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            x=read(),y=read(),z=read();</span><br><span class="line">            changePath(x,y,z);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="string">"Cover"</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            x=read(),y=read(),z=read();</span><br><span class="line">            coverPath(x,y,z);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 树链剖分 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>NOIP2018之前的琐记</title>
      <link href="/2018/10/09/NOIP2018%E4%B9%8B%E5%89%8D%E7%9A%84%E7%90%90%E8%AE%B0/"/>
      <url>/2018/10/09/NOIP2018%E4%B9%8B%E5%89%8D%E7%9A%84%E7%90%90%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>既然$\texttt{Karry5307}$已经变成了初二的小蒟蒻了，那么还是写点$\texttt{NOIP2018}$之前的琐记吧。<br><a id="more"></a></p><h3 id="考试"><a href="#考试" class="headerlink" title="考试"></a>考试</h3><p><script type="math/tex">2018.10.8</script>：出题人<script type="math/tex">xzy</script>，毒瘤题。<script type="math/tex">T1</script>什么鬼，<script type="math/tex">7</script>合<script type="math/tex">1</script>，<script type="math/tex">gg</script>。<script type="math/tex">T3</script>辣鸡模拟，让你算空间，最后交卷时发现<script type="math/tex">bitset</script>没开<script type="math/tex">long\ long</script>，写了个快速乘<script type="math/tex">\% 998244353</script>，读入出锅了，居然没看到有个空格没搞好，<script type="math/tex">0+0+10=10</script>分滚粗。（我不会告诉你我是因为没看大样例而导致的）</p><p><script type="math/tex">2018.10.9</script>：出题人<script type="math/tex">Despair</script>，毒瘤题。第一题什么鬼，<script type="math/tex">yyb</script>大佬说是迭代，结果还真的是迭代（顺便吐槽一句，题解写的矩乘看都没看懂）<script type="math/tex">T3</script>随手开了个<script type="math/tex">10^7</script>的数组，MLE了。 </p><p><script type="math/tex">2018.10.10</script>：出题人<script type="math/tex">Tyher</script>，这次我觉得海星。<script type="math/tex">T1</script>被卡精度原地爆炸，<del><script type="math/tex">log_{10}</script>改成<script type="math/tex">log_2</script>就会有<script type="math/tex">35</script>分的好成绩啦</del>，<script type="math/tex">T3</script>良心，<script type="math/tex">Task\ 4</script>特判了一下，其余线段树乱搞还有<script type="math/tex">40</script>分，拿了<script type="math/tex">20+40+25=85</script>分滚粗，<script type="math/tex">yyb</script>大佬太强了，又阿克了。</p><p><script type="math/tex">2018.10.11</script>：<script type="math/tex">T1</script>毒瘤三合一，布星啊，墙裂谴责，乱搞还没分，幸好<script type="math/tex">T2</script>乱搞有<script type="math/tex">20</script>分。<script type="math/tex">T3</script>全场切<script type="math/tex">except\ me</script>，告辞告辞，<script type="math/tex">0+20+0=20</script>滚粗。</p><p><script type="math/tex">2018.10.12</script>：出题人<script type="math/tex">DarkFire</script>，题目海星，只是我太蒟蒻了，连<script type="math/tex">T2</script>都没切。<script type="math/tex">Despair</script>大佬又阿克了，%%%，我这个小蒟蒻继续<script type="math/tex">0+20+0=20</script>滚粗。</p><p><script type="math/tex">2018.10.13</script>：上午初赛模拟，什么鬼，一个排完序后的水题硬是考递归，体验极差。<br>(最近有点懒，没更)</p><p><script type="math/tex">2018.10.26</script>：<script type="math/tex">T1</script>不会莫比乌斯反演，被吊打，只好拿<script type="math/tex">20</script>分滚粗。<script type="math/tex">T2</script>不会写，跳过。<script type="math/tex">T3</script>居然还下放了一个<script type="math/tex">game</script>，什么鬼，最后才知道这<script type="math/tex">game</script>考有限状态自动机，我太蒻了，居然没玩通关，苟且<script type="math/tex">21</script>分。总共<script type="math/tex">20+0+21=41</script>分滚粗。<script type="math/tex">tbr</script>大佬玩个游戏<script type="math/tex">T3</script>都拿了<script type="math/tex">66</script>分，我竟无言以对。<br><del>我突然觉得我连游戏都不会玩了</del></p>]]></content>
      
      
      
        <tags>
            
            <tag> 游记/考试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P4884」多少个1？</title>
      <link href="/2018/10/07/%E3%80%8CLuogu-P4884%E3%80%8D%E5%A4%9A%E5%B0%91%E4%B8%AA1%EF%BC%9F/"/>
      <url>/2018/10/07/%E3%80%8CLuogu-P4884%E3%80%8D%E5%A4%9A%E5%B0%91%E4%B8%AA1%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p>给定<script type="math/tex">p</script>和模数<script type="math/tex">yyb</script>，保证<script type="math/tex">yyb</script>为质数，求最小的<script type="math/tex">x</script>使得$111\cdots 1$(<script type="math/tex">x</script>个)<script type="math/tex">\equiv 1\pmod {yyb}</script><br><a id="more"></a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.org/problemnew/show/P4884" target="_blank" rel="noopener">Luogu P4884</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>注意到<script type="math/tex">111\cdots 1</script>(<script type="math/tex">x</script>个)<script type="math/tex">=\cfrac{10^x-1}{9}</script>,则</p><script type="math/tex; mode=display">111\cdots 1\equiv (10^x-1)\times 9^{-1}</script><script type="math/tex; mode=display">\therefore (10^x-1)\times 9^{-1}\equiv yyb</script><script type="math/tex; mode=display">\therefore 10^x \equiv 9\times yyb+1</script><p>然后这个方程就化为<script type="math/tex">BSGS</script>的标准形式了，由于模数<script type="math/tex">yyb</script>为质数，直接利用<script type="math/tex">BSGS</script>即可。<br>由于<script type="math/tex">yyb</script>会很大，所以再次建议不要用自己写的哈希表，而使用<script type="math/tex">map</script>。<del>我是不会告诉你我因为这个原因被洛谷的数据坑了好几次了</del></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>为了保险，这里开了<script type="math/tex">int128</script>，美中不足的是要自己写读写，顺便写了一个<script type="math/tex">O(1)</script>的龟速乘。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> __int128 ll;</span><br><span class="line"><span class="built_in">map</span>&lt;ll,ll&gt;ht;</span><br><span class="line">ll mod,val;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(ll num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(num&gt;<span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        write(num/<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(num%<span class="number">10</span>+<span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">qmul</span><span class="params">(ll x,ll y,ll mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll l=(y&gt;&gt;<span class="number">25</span>)*x%mod*((<span class="number">1</span>&lt;&lt;<span class="number">25</span>)%mod),r=(y&amp;((<span class="number">1</span>&lt;&lt;<span class="number">25</span>)<span class="number">-1</span>))*x%mod;</span><br><span class="line">    <span class="keyword">return</span> (l+r)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">qpow</span><span class="params">(ll base,ll exponent,ll mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!exponent)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll temp=qpow(base,exponent&gt;&gt;<span class="number">1</span>,mod);</span><br><span class="line">    ll res=qmul(temp,temp,mod);</span><br><span class="line">    <span class="keyword">if</span>(exponent&amp;<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        res=qmul(res,base,mod);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">BSGS</span><span class="params">(ll base,ll res,ll mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ht.clear(),res%=mod;</span><br><span class="line">    ll temp,val,fail;</span><br><span class="line">    temp=<span class="built_in">sqrt</span>((<span class="keyword">long</span> <span class="keyword">double</span>)(mod))+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;temp;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        val=qmul(res,qpow(base,i,mod),mod);</span><br><span class="line">        ht[val]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    base=qpow(base,temp,mod);</span><br><span class="line">    <span class="keyword">if</span>(!base)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> !res?<span class="number">1</span>:<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=temp;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        val=qpow(base,i,mod),fail=ht.find(val)==ht.end()?<span class="number">-1</span>:ht[val];</span><br><span class="line">        <span class="keyword">if</span>(fail&gt;=<span class="number">0</span>&amp;&amp;i*temp-fail&gt;=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> i*temp-fail;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    val=read(),mod=read();</span><br><span class="line">    val=(qmul(<span class="number">9</span>,val,mod)+<span class="number">1</span>)%mod;</span><br><span class="line">    write(BSGS(<span class="number">10</span>,val,mod));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> BSGS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P2756」飞行员配对方案问题</title>
      <link href="/2018/09/24/%E3%80%8CLuogu-P2756%E3%80%8D%E9%A3%9E%E8%A1%8C%E5%91%98%E9%85%8D%E5%AF%B9%E6%96%B9%E6%A1%88%E9%97%AE%E9%A2%98/"/>
      <url>/2018/09/24/%E3%80%8CLuogu-P2756%E3%80%8D%E9%A3%9E%E8%A1%8C%E5%91%98%E9%85%8D%E5%AF%B9%E6%96%B9%E6%A1%88%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>这个题是网络流24题中的第1题。<br>给一个二分图，求最大匹配以及匹配方案。<br><a id="more"></a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.org/problemnew/show/P2756" target="_blank" rel="noopener">Luogu P2756</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这个题目的模型是二分图最大匹配，有多个源点和汇点。所以可以增加一个超级源点和一个超级汇点。<br>超级源点1与2-(m+1)连流量为1的边；(m+2)-(n+1)与超级汇点n+2连流量为1的边；所给的边全部连流量为1的边。<br>最后，这个网络的最大流即为二分图的最大匹配。<br>对于每一条在二分图内的边，即它和它的反向边不连向源点和汇点，如果反向边有流量，就输出这条边连向的两个点。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">1e5</span>+<span class="number">51</span>,inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    ll to,prev,flow;</span><br><span class="line">&#125;;</span><br><span class="line">Edge ed[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line">ll l,nc,source,sink,tot=<span class="number">1</span>,from,to,flow,maxFlow;</span><br><span class="line">ll last[MAXN],depth[MAXN],inQueue[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(ll from,ll to,ll flow)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ed[++tot].prev=last[from];</span><br><span class="line">    ed[tot].to=to;</span><br><span class="line">    ed[tot].flow=flow;</span><br><span class="line">    last[from]=tot; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Min</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x:y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;ll&gt;q;</span><br><span class="line">    ll top,to;</span><br><span class="line">    <span class="built_in">memset</span>(depth,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(depth));</span><br><span class="line">    depth[source]=<span class="number">0</span>,q.push(source);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        top=q.front();</span><br><span class="line">        q.pop(),inQueue[top]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=last[top];i;i=ed[i].prev)</span><br><span class="line">        &#123;</span><br><span class="line">            to=ed[i].to;</span><br><span class="line">            <span class="keyword">if</span>(depth[to]&gt;depth[top]+<span class="number">1</span>&amp;&amp;ed[i].flow)</span><br><span class="line">            &#123;</span><br><span class="line">                depth[to]=depth[top]+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(!inQueue[to])</span><br><span class="line">                &#123;</span><br><span class="line">                    q.push(to),inQueue[to]=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(depth[sink]!=<span class="number">0x3f3f3f3f</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">dfs</span><span class="params">(ll cur,ll flow)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll low;</span><br><span class="line">    <span class="keyword">if</span>(cur==sink)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> flow;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=last[cur];i;i=ed[i].prev)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ed[i].flow&amp;&amp;depth[ed[i].to]==depth[cur]+<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(low=dfs(ed[i].to,Min(flow,ed[i].flow)))</span><br><span class="line">            &#123;</span><br><span class="line">                ed[i].flow-=low,ed[i^<span class="number">1</span>].flow+=low;</span><br><span class="line">                <span class="keyword">return</span> low;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll flow;</span><br><span class="line">    <span class="keyword">while</span>(bfs())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(flow=dfs(source,inf))</span><br><span class="line">        &#123;</span><br><span class="line">            maxFlow+=flow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxFlow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    l=read(),nc=read(),source=<span class="number">1</span>,sink=nc+<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        from=read()+<span class="number">1</span>,to=read()+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(!from||!to)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        addEdge(from,to,<span class="number">1</span>),addEdge(to,from,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=l+<span class="number">1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        addEdge(source,i,<span class="number">1</span>),addEdge(i,source,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=l+<span class="number">2</span>;i&lt;=nc+<span class="number">1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        addEdge(i,sink,<span class="number">1</span>),addEdge(sink,i,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(Dinic()==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"No solution!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,maxFlow);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=tot;i+=<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(ed[i].to!=source&amp;&amp;ed[i^<span class="number">1</span>].to!=source&amp;&amp;ed[i].to!=sink&amp;&amp;ed[i^<span class="number">1</span>].to!=sink)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(ed[i^<span class="number">1</span>].flow)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,ed[i^<span class="number">1</span>].to<span class="number">-1</span>,ed[i].to<span class="number">-1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
            <tag> 网络流 </tag>
            
            <tag> 最大流 </tag>
            
            <tag> 二分图匹配 </tag>
            
            <tag> Dinic </tag>
            
            <tag> 网络流24题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P3376」【模板】网络最大流</title>
      <link href="/2018/09/24/%E3%80%8CLuogu-P3376%E3%80%8D%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E7%BD%91%E7%BB%9C%E6%9C%80%E5%A4%A7%E6%B5%81/"/>
      <url>/2018/09/24/%E3%80%8CLuogu-P3376%E3%80%8D%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E7%BD%91%E7%BB%9C%E6%9C%80%E5%A4%A7%E6%B5%81/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 未完待续 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 网络流 </tag>
            
            <tag> 最大流 </tag>
            
            <tag> Dinic </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>学习笔记·网络流</title>
      <link href="/2018/09/24/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
      <url>/2018/09/24/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E7%BD%91%E7%BB%9C%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<p>网络流是一种解决各种神仙问题的算法，通过合理地建图，可以解决各类神仙问题。<br><a id="more"></a></p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3>]]></content>
      
      
      
        <tags>
            
            <tag> 网络流 </tag>
            
            <tag> 最大流 </tag>
            
            <tag> Dinic </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P3950」部落冲突</title>
      <link href="/2018/09/14/%E3%80%8CLuogu-P3950%E3%80%8D%E9%83%A8%E8%90%BD%E5%86%B2%E7%AA%81/"/>
      <url>/2018/09/14/%E3%80%8CLuogu-P3950%E3%80%8D%E9%83%A8%E8%90%BD%E5%86%B2%E7%AA%81/</url>
      
        <content type="html"><![CDATA[<p>给一棵树，每次可以使一条可以经过边设置为不可经过，也可以将不可经过的边设置成可以经过，多次询问两点间路径上的所有边是否都可以经过。<br><a id="more"></a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.org/problemnew/show/P3950" target="_blank" rel="noopener">Luogu P3950</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p><del>我不会告诉你这题我调了<script type="math/tex">10</script>天</del><br>将可以经过转换成<script type="math/tex">0</script>，不可经过转换成<script type="math/tex">1</script>，然后树剖+边权下放。对于每次询问，考虑两点间路径上的点权和减去<script type="math/tex">LCA</script>的点权是否等于<script type="math/tex">0</script>即可。<br>最近($2018.12.24$)数据加强了，存边数组开$7e5$过不了，要开$6e5$才能卡过。<br>但是，换一种思路，也可以用LCT过。<br>坑。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>树剖：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    ll to,prev;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegmentTree</span>&#123;</span></span><br><span class="line">    ll l,r,sum,tag;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Battle</span>&#123;</span></span><br><span class="line">    ll x,y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">700051</span>;</span><br><span class="line">Battle bt[MAXN];</span><br><span class="line">Edge ed[MAXN];</span><br><span class="line">SegmentTree tree[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line">ll last[MAXN],val[MAXN],depth[MAXN],fa[MAXN],size[MAXN],heavy[MAXN];</span><br><span class="line">ll id[MAXN],pre[MAXN],top[MAXN];</span><br><span class="line">ll tot,nc,cnt,ccnt,x,y,from,to,num,toto,tx;</span><br><span class="line"><span class="keyword">char</span> op; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(ll from,ll to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ed[++tot].prev=last[from];</span><br><span class="line">    ed[tot].to=to;</span><br><span class="line">    last[from]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[node].sum=tree[node&lt;&lt;<span class="number">1</span>].sum+tree[(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">(ll l,ll r,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[node].l=l,tree[node].r=r;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[node].sum=val[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    create(l,mid,node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    create(mid+<span class="number">1</span>,r,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">    update(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">spread</span><span class="params">(ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[node].tag)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[node&lt;&lt;<span class="number">1</span>].sum+=tree[node].tag*(tree[node&lt;&lt;<span class="number">1</span>].r-tree[node&lt;&lt;<span class="number">1</span>].l+<span class="number">1</span>);</span><br><span class="line">        tree[(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].sum+=tree[node].tag*(tree[(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].r-tree[(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].l+<span class="number">1</span>);</span><br><span class="line">        tree[node&lt;&lt;<span class="number">1</span>].tag+=tree[node].tag;</span><br><span class="line">        tree[(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].tag+=tree[node].tag;</span><br><span class="line">        tree[node].tag=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(ll pos,ll val,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[node].l==tree[node].r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[node].sum+=val;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mid=(tree[node].l+tree[node].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(pos&lt;=mid)</span><br><span class="line">    &#123;</span><br><span class="line">        change(pos,val,node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        change(pos,val,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    update(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(ll l,ll r,ll val,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tree[node].l&amp;&amp;r&gt;=tree[node].r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[node].sum+=val*(tree[node].r-tree[node].l+<span class="number">1</span>);</span><br><span class="line">        tree[node].tag+=val;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    spread(node);</span><br><span class="line">    ll mid=(tree[node].l+tree[node].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid)</span><br><span class="line">    &#123;</span><br><span class="line">        add(l,r,val,node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid)</span><br><span class="line">    &#123;</span><br><span class="line">        add(l,r,val,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    update(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">query</span><span class="params">(ll l,ll r,ll node)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tree[node].l&amp;&amp;r&gt;=tree[node].r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> tree[node].sum;</span><br><span class="line">    &#125;</span><br><span class="line">    spread(node);</span><br><span class="line">    ll mid=(tree[node].l+tree[node].r)&gt;&gt;<span class="number">1</span>,val=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid)</span><br><span class="line">    &#123;</span><br><span class="line">        val+=query(l,r,node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid)</span><br><span class="line">    &#123;</span><br><span class="line">        val+=query(l,r,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(ll node,ll f,ll dep)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    depth[node]=dep,fa[node]=f,size[node]=<span class="number">1</span>;</span><br><span class="line">    ll maxn=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=last[node];i;i=ed[i].prev)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ed[i].to!=f)</span><br><span class="line">        &#123;</span><br><span class="line">            dfs(ed[i].to,node,dep+<span class="number">1</span>);</span><br><span class="line">            size[node]+=size[ed[i].to];</span><br><span class="line">            <span class="keyword">if</span>(size[ed[i].to]&gt;maxn)</span><br><span class="line">            &#123;</span><br><span class="line">                heavy[node]=ed[i].to,maxn=size[ed[i].to];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ddfs</span><span class="params">(ll node,ll link)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    id[node]=++ccnt,val[ccnt]=pre[node],top[node]=link;</span><br><span class="line">    <span class="keyword">if</span>(!heavy[node])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ddfs(heavy[node],link);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=last[node];i;i=ed[i].prev)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ed[i].to!=fa[node]&amp;&amp;ed[i].to!=heavy[node])</span><br><span class="line">        &#123;</span><br><span class="line">            ddfs(ed[i].to,ed[i].to);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">queryPath</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(depth[top[x]]&lt;depth[top[y]])</span><br><span class="line">        &#123;</span><br><span class="line">            swap(x,y);</span><br><span class="line">        &#125;</span><br><span class="line">        ans+=query(id[top[x]],id[x],<span class="number">1</span>);</span><br><span class="line">        x=fa[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(depth[x]&gt;depth[y])</span><br><span class="line">    &#123;</span><br><span class="line">        swap(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    ans+=query(id[x],id[y],<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">querySubtree</span><span class="params">(ll root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> query(id[root],id[root]+size[root]<span class="number">-1</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">changePoint</span><span class="params">(ll x,ll val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    change(id[x],val,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">changePath</span><span class="params">(ll x,ll y,ll val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(depth[top[x]]&lt;depth[top[y]])</span><br><span class="line">        &#123;</span><br><span class="line">            swap(x,y);</span><br><span class="line">        &#125;</span><br><span class="line">        add(id[top[x]],id[x],val,<span class="number">1</span>);</span><br><span class="line">        x=fa[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(depth[x]&gt;depth[y])</span><br><span class="line">    &#123;</span><br><span class="line">        swap(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    add(id[x],id[y],val,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">changeSubtree</span><span class="params">(ll root,ll val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    add(id[root],id[root]+size[root]<span class="number">-1</span>,val,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">lca</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(depth[top[x]]&lt;depth[top[y]])</span><br><span class="line">        &#123;</span><br><span class="line">            swap(x,y);</span><br><span class="line">        &#125;</span><br><span class="line">        x=fa[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> depth[x]&lt;depth[y]?x:y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    nc=read(),cnt=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nc<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        from=read(),to=read();</span><br><span class="line">        addEdge(from,to),addEdge(to,from);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>),ddfs(<span class="number">1</span>,<span class="number">1</span>),create(<span class="number">1</span>,nc,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;op;</span><br><span class="line">        <span class="keyword">switch</span>(op)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'C'</span>:&#123;</span><br><span class="line">                x=read(),y=read();</span><br><span class="line">                bt[++num].x=x,bt[num].y=y;</span><br><span class="line">                tx=depth[x]&gt;depth[y]?x:y;</span><br><span class="line">                changePoint(tx,<span class="number">1</span>); </span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'U'</span>:&#123;</span><br><span class="line">                x=read();</span><br><span class="line">                y=bt[x].y,x=bt[x].x;</span><br><span class="line">                tx=depth[x]&gt;depth[y]?x:y;</span><br><span class="line">                changePoint(tx,<span class="number">-1</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'Q'</span>:&#123;</span><br><span class="line">                x=read(),y=read();</span><br><span class="line">                toto=queryPath(x,y)-queryPath(lca(x,y),lca(x,y));</span><br><span class="line">                toto?<span class="built_in">puts</span>(<span class="string">"No"</span>):<span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>LCT：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">3e5</span>+<span class="number">51</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Battle</span>&#123;</span></span><br><span class="line">    ll x,y;</span><br><span class="line">&#125;;</span><br><span class="line">Battle bt[MAXN];</span><br><span class="line">ll cnt,qcnt,x,y,tot;</span><br><span class="line"><span class="keyword">char</span> op;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> LCT&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">        ll fa,val,tag;</span><br><span class="line">        ll ch[<span class="number">2</span>];</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LinkCutTree</span>&#123;</span></span><br><span class="line">        Node nd[MAXN];</span><br><span class="line">        ll st[MAXN];</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">nroot</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> nd[nd[x].fa].ch[<span class="number">0</span>]==x||nd[nd[x].fa].ch[<span class="number">1</span>]==x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            nd[x].val=nd[nd[x].ch[<span class="number">0</span>]].val^nd[nd[x].ch[<span class="number">1</span>]].val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            swap(nd[x].ch[<span class="number">0</span>],nd[x].ch[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">spread</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(nd[x].tag)</span><br><span class="line">            &#123;</span><br><span class="line">                reverse(x);</span><br><span class="line">                nd[nd[x].ch[<span class="number">0</span>]].tag^=<span class="number">1</span>,nd[nd[x].ch[<span class="number">1</span>]].tag^=<span class="number">1</span>;</span><br><span class="line">                nd[x].tag=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            ll fa=nd[x].fa,gfa=nd[fa].fa;</span><br><span class="line">            ll dir=nd[fa].ch[<span class="number">1</span>]==x,son=nd[x].ch[!dir];</span><br><span class="line">            <span class="keyword">if</span>(nroot(fa))</span><br><span class="line">            &#123;</span><br><span class="line">                nd[gfa].ch[nd[gfa].ch[<span class="number">1</span>]==fa]=x;</span><br><span class="line">            &#125;</span><br><span class="line">            nd[x].ch[!dir]=fa,nd[fa].ch[dir]=son;</span><br><span class="line">            <span class="keyword">if</span>(son)</span><br><span class="line">            &#123;</span><br><span class="line">                nd[son].fa=fa;</span><br><span class="line">            &#125;</span><br><span class="line">            nd[fa].fa=x,nd[x].fa=gfa;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">splay</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            ll fa=x,gfa,cur=<span class="number">0</span>;</span><br><span class="line">            st[++cur]=fa;</span><br><span class="line">            <span class="keyword">while</span>(nroot(fa))</span><br><span class="line">            &#123;</span><br><span class="line">                st[++cur]=fa=nd[fa].fa;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(cur)</span><br><span class="line">            &#123;</span><br><span class="line">                spread(st[cur--]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(nroot(x))</span><br><span class="line">            &#123;</span><br><span class="line">                fa=nd[x].fa,gfa=nd[fa].fa;</span><br><span class="line">                <span class="keyword">if</span>(nroot(fa))</span><br><span class="line">                &#123;</span><br><span class="line">                    rotate((nd[fa].ch[<span class="number">0</span>]==x)^(nd[gfa].ch[<span class="number">0</span>]==fa)?x:fa);</span><br><span class="line">                &#125;</span><br><span class="line">                rotate(x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">access</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;x;x=nd[i=x].fa)</span><br><span class="line">            &#123;</span><br><span class="line">                splay(x),nd[x].ch[<span class="number">1</span>]=i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">makeRoot</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            access(x),splay(x),nd[x].tag^=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> ll <span class="title">findRoot</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            access(x),splay(x);</span><br><span class="line">            <span class="keyword">while</span>(nd[x].ch[<span class="number">0</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                spread(x),x=nd[x].ch[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">split</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            makeRoot(x),access(y),splay(y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">link</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            makeRoot(x),nd[x].fa=y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            split(x,y),nd[x].fa=nd[y].ch[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">LCT::LinkCutTree lct;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt=read(),qcnt=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        x=read(),y=read();</span><br><span class="line">        lct.link(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;qcnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        op=getchar();</span><br><span class="line">        <span class="keyword">while</span>(op&lt;<span class="string">'-'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            op=getchar();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="string">'Q'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            x=read(),y=read();</span><br><span class="line">            <span class="built_in">puts</span>(lct.findRoot(x)==lct.findRoot(y)?<span class="string">"Yes"</span>:<span class="string">"No"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="string">'C'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            x=read(),y=read();</span><br><span class="line">            lct.cut(x,y),bt[++tot].x=x,bt[tot].y=y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="string">'U'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            x=read();</span><br><span class="line">            lct.link(bt[x].x,bt[x].y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 树链剖分 </tag>
            
            <tag> Link Cut Tree </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P4114」Qtree1</title>
      <link href="/2018/08/16/%E3%80%8CLuogu-P4114%E3%80%8DQtree1/"/>
      <url>/2018/08/16/%E3%80%8CLuogu-P4114%E3%80%8DQtree1/</url>
      
        <content type="html"><![CDATA[<p>怎么说呢，有点裸的树链剖分加上一些常用小技巧……<br><a id="more"></a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.org/problemnew/show/P3950" target="_blank" rel="noopener">Luogu P3950</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 树链剖分 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P3178」[HAOI2015]树上操作</title>
      <link href="/2018/08/14/%E3%80%8CHAOI2015%E3%80%8D%E6%A0%91%E4%B8%8A%E6%93%8D%E4%BD%9C/"/>
      <url>/2018/08/14/%E3%80%8CHAOI2015%E3%80%8D%E6%A0%91%E4%B8%8A%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>给定一棵树和多个操作，对于每一个操作3，回答该询问的答案。<br><a id="more"></a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.org/problemnew/show/P3178" target="_blank" rel="noopener">Luogu P3178</a><br><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=4034" target="_blank" rel="noopener">BZOJ 4034</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>树链剖分板子题。对于每一个1操作，直接将起点和终点设为这个点，执行路径修改。对于操作2和操作3，直接使用树剖板子。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    ll to,prev;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegmentTree</span>&#123;</span></span><br><span class="line">    ll l,r,sum,tag;</span><br><span class="line">&#125;;</span><br><span class="line">edge ed[<span class="number">200051</span>];</span><br><span class="line">SegmentTree tree[<span class="number">200051</span>&lt;&lt;<span class="number">2</span>];</span><br><span class="line">ll last[<span class="number">200051</span>],val[<span class="number">200051</span>],depth[<span class="number">200051</span>],fa[<span class="number">200051</span>],size[<span class="number">200051</span>],heavy[<span class="number">200051</span>];</span><br><span class="line">ll id[<span class="number">200051</span>],pre[<span class="number">200051</span>],top[<span class="number">200051</span>];</span><br><span class="line">ll tot,nc,cnt,ccnt,op,x,y,from,to;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span><span class="comment">//快读</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(ll from,ll to)</span><span class="comment">//邻接表基本操作</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ed[++tot].prev=last[from];</span><br><span class="line">    ed[tot].to=to;</span><br><span class="line">    last[from]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//线段树基本操作</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(ll node)</span><span class="comment">//更新节点值，用位运算优化</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[node].sum=tree[node&lt;&lt;<span class="number">1</span>].sum+tree[(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">(ll l,ll r,ll node)</span><span class="comment">//建树</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[node].l=l,tree[node].r=r;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[node].sum=val[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    create(l,mid,node&lt;&lt;<span class="number">1</span>);<span class="comment">//建左子树</span></span><br><span class="line">    create(mid+<span class="number">1</span>,r,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);<span class="comment">//建右子树</span></span><br><span class="line">    update(node);<span class="comment">//更新当前节点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">spread</span><span class="params">(ll node)</span><span class="comment">//下传懒标记</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[node].tag)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//更新节点信息</span></span><br><span class="line">        tree[node&lt;&lt;<span class="number">1</span>].sum+=tree[node].tag*(tree[node&lt;&lt;<span class="number">1</span>].r-tree[node&lt;&lt;<span class="number">1</span>].l+<span class="number">1</span>);</span><br><span class="line">        tree[(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].sum+=tree[node].tag*(tree[(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].r-tree[(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].l+<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//下传懒标记</span></span><br><span class="line">        tree[node&lt;&lt;<span class="number">1</span>].tag+=tree[node].tag;</span><br><span class="line">        tree[(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].tag+=tree[node].tag;</span><br><span class="line">        <span class="comment">//清除当前节点懒标记</span></span><br><span class="line">        tree[node].tag=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(ll l,ll r,ll val,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tree[node].l&amp;&amp;r&gt;=tree[node].r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[node].sum+=val*(tree[node].r-tree[node].l+<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//做标记</span></span><br><span class="line">        tree[node].tag+=val;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    spread(node);<span class="comment">//标记下传</span></span><br><span class="line">    ll mid=(tree[node].l+tree[node].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid)</span><br><span class="line">    &#123;</span><br><span class="line">        add(l,r,val,node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid)</span><br><span class="line">    &#123;</span><br><span class="line">        add(l,r,val,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    update(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">query</span><span class="params">(ll l,ll r,ll node)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tree[node].l&amp;&amp;r&gt;=tree[node].r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> tree[node].sum;</span><br><span class="line">    &#125;</span><br><span class="line">    spread(node);<span class="comment">//标记下传</span></span><br><span class="line">    ll mid=(tree[node].l+tree[node].r)&gt;&gt;<span class="number">1</span>,val=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid)</span><br><span class="line">    &#123;</span><br><span class="line">        val+=query(l,r,node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid)</span><br><span class="line">    &#123;</span><br><span class="line">        val+=query(l,r,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(ll node,ll f,ll dep)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    depth[node]=dep,fa[node]=f,size[node]=<span class="number">1</span>;<span class="comment">//更新节点深度，父节点，节点为根的子树大小</span></span><br><span class="line">    ll maxn=<span class="number">-1</span>;<span class="comment">//重儿子</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=last[node];i;i=ed[i].prev)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ed[i].to!=f)<span class="comment">//遍历子节点</span></span><br><span class="line">        &#123;</span><br><span class="line">            dfs(ed[i].to,node,dep+<span class="number">1</span>);</span><br><span class="line">            size[node]+=size[ed[i].to];<span class="comment">//更新子树大小</span></span><br><span class="line">            <span class="keyword">if</span>(size[ed[i].to]&gt;maxn)</span><br><span class="line">            &#123;</span><br><span class="line">                heavy[node]=ed[i].to,maxn=size[ed[i].to];<span class="comment">//标记重儿子</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ddfs</span><span class="params">(ll node,ll link)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    id[node]=++ccnt,val[ccnt]=pre[node],top[node]=link;<span class="comment">//标记节点新编号，赋初始值，更新节点所在重链的顶部</span></span><br><span class="line">    <span class="keyword">if</span>(!heavy[node])<span class="comment">//连重儿子都没有，肯定没有轻儿子，回溯</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ddfs(heavy[node],link);<span class="comment">//先遍历重儿子</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=last[node];i;i=ed[i].prev)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ed[i].to!=fa[node]&amp;&amp;ed[i].to!=heavy[node])</span><br><span class="line">        &#123;</span><br><span class="line">            ddfs(ed[i].to,ed[i].to);<span class="comment">//遍历轻儿子，该节点所在重链顶部节点为自己</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//无脑操作</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">queryPath</span><span class="params">(ll x,ll y)</span><span class="comment">//查询路径点权和</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(depth[top[x]]&lt;depth[top[y]])</span><br><span class="line">        &#123;</span><br><span class="line">            swap(x,y);</span><br><span class="line">        &#125;</span><br><span class="line">        ans+=query(id[top[x]],id[x],<span class="number">1</span>);<span class="comment">//加上整个链的点权和</span></span><br><span class="line">        x=fa[top[x]];<span class="comment">//爬到链顶</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(depth[x]&gt;depth[y])</span><br><span class="line">    &#123;</span><br><span class="line">        swap(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    ans+=query(id[x],id[y],<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">querySubtree</span><span class="params">(ll root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> query(id[root],id[root]+size[root]<span class="number">-1</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">changePath</span><span class="params">(ll x,ll y,ll val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(depth[top[x]]&lt;depth[top[y]])</span><br><span class="line">        &#123;</span><br><span class="line">            swap(x,y);</span><br><span class="line">        &#125;</span><br><span class="line">        add(id[top[x]],id[x],val,<span class="number">1</span>);</span><br><span class="line">        x=fa[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(depth[x]&gt;depth[y])</span><br><span class="line">    &#123;</span><br><span class="line">        swap(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    add(id[x],id[y],val,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">changeSubtree</span><span class="params">(ll root,ll val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    add(id[root],id[root]+size[root]<span class="number">-1</span>,val,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    nc=read(),cnt=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=nc;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pre[i]=read();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nc<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        from=read(),to=read();</span><br><span class="line">        addEdge(from,to),addEdge(to,from);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>),ddfs(<span class="number">1</span>,<span class="number">1</span>),create(<span class="number">1</span>,nc,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        op=read();</span><br><span class="line">        <span class="keyword">switch</span>(op)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:&#123;</span><br><span class="line">                x=read(),y=read();</span><br><span class="line">                changePath(x,x,y);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:&#123;</span><br><span class="line">                x=read(),y=read();</span><br><span class="line">                changeSubtree(x,y);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:&#123;</span><br><span class="line">                x=read();</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;queryPath(x,<span class="number">1</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> BZOJ </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> HAOI </tag>
            
            <tag> 各省省选 </tag>
            
            <tag> 树链剖分 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P3384」【模板】树链剖分</title>
      <link href="/2018/08/13/%E3%80%8CLuogu-P3384%E3%80%8D%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
      <url>/2018/08/13/%E3%80%8CLuogu-P3384%E3%80%8D%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/</url>
      
        <content type="html"><![CDATA[<p>模板题，裸的树链剖分，数组记得开大一倍，否则会WA3个点<br><a id="more"></a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.org/problemnew/show/P3384" target="_blank" rel="noopener">Luogu P3384</a></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>代码有点长qwq<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    ll to,prev;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegmentTree</span>&#123;</span></span><br><span class="line">    ll l,r,sum,tag;</span><br><span class="line">&#125;;</span><br><span class="line">edge ed[<span class="number">200051</span>];</span><br><span class="line">SegmentTree tree[<span class="number">200051</span>&lt;&lt;<span class="number">2</span>];</span><br><span class="line">ll last[<span class="number">200051</span>],val[<span class="number">200051</span>],depth[<span class="number">200051</span>],fa[<span class="number">200051</span>],size[<span class="number">200051</span>],heavy[<span class="number">200051</span>];</span><br><span class="line">ll id[<span class="number">200051</span>],pre[<span class="number">200051</span>],top[<span class="number">200051</span>];</span><br><span class="line">ll tot,nc,cnt,root,ccnt,mod,op,x,y,z,from,to;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span><span class="comment">//快读</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> ll num=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)&amp;&amp;ch!=<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+(ch-<span class="string">'0'</span>);</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(ll from,ll to)</span><span class="comment">//邻接表基本操作</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ed[++tot].prev=last[from];</span><br><span class="line">    ed[tot].to=to;</span><br><span class="line">    last[from]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//线段树基本操作</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(ll node)</span><span class="comment">//更新节点值，用位运算优化</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[node].sum=(tree[node&lt;&lt;<span class="number">1</span>].sum+tree[(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].sum)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">(ll l,ll r,ll node)</span><span class="comment">//建树</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[node].l=l,tree[node].r=r;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[node].sum=val[l]%mod;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    create(l,mid,node&lt;&lt;<span class="number">1</span>);<span class="comment">//建左子树</span></span><br><span class="line">    create(mid+<span class="number">1</span>,r,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);<span class="comment">//建右子树</span></span><br><span class="line">    update(node);<span class="comment">//更新当前节点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">spread</span><span class="params">(ll node)</span><span class="comment">//下传懒标记</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[node].tag)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//更新节点信息</span></span><br><span class="line">        tree[node&lt;&lt;<span class="number">1</span>].sum+=tree[node].tag*(tree[node&lt;&lt;<span class="number">1</span>].r-tree[node&lt;&lt;<span class="number">1</span>].l+<span class="number">1</span>);</span><br><span class="line">        tree[(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].sum+=tree[node].tag*(tree[(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].r-tree[(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].l+<span class="number">1</span>);</span><br><span class="line">        tree[node&lt;&lt;<span class="number">1</span>].sum%=mod;</span><br><span class="line">        tree[(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].sum%=mod;</span><br><span class="line">        <span class="comment">//下传懒标记</span></span><br><span class="line">        tree[node&lt;&lt;<span class="number">1</span>].tag+=tree[node].tag;</span><br><span class="line">        tree[(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].tag+=tree[node].tag;</span><br><span class="line">        tree[node&lt;&lt;<span class="number">1</span>].tag%=mod;</span><br><span class="line">        tree[(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].tag%=mod;</span><br><span class="line">        <span class="comment">//清除当前节点懒标记</span></span><br><span class="line">        tree[node].tag=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(ll l,ll r,ll val,ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tree[node].l&amp;&amp;r&gt;=tree[node].r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[node].sum+=val*(tree[node].r-tree[node].l+<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//做标记</span></span><br><span class="line">        tree[node].tag+=val;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    spread(node);<span class="comment">//标记下传</span></span><br><span class="line">    ll mid=(tree[node].l+tree[node].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid)</span><br><span class="line">    &#123;</span><br><span class="line">        add(l,r,val,node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid)</span><br><span class="line">    &#123;</span><br><span class="line">        add(l,r,val,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    update(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">query</span><span class="params">(ll l,ll r,ll node)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tree[node].l&amp;&amp;r&gt;=tree[node].r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> tree[node].sum%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    spread(node);<span class="comment">//标记下传</span></span><br><span class="line">    ll mid=(tree[node].l+tree[node].r)&gt;&gt;<span class="number">1</span>,val=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid)</span><br><span class="line">    &#123;</span><br><span class="line">        val+=query(l,r,node&lt;&lt;<span class="number">1</span>);</span><br><span class="line">        val%=mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid)</span><br><span class="line">    &#123;</span><br><span class="line">        val+=query(l,r,(node&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">        val%=mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> val%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(ll node,ll f,ll dep)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    depth[node]=dep,fa[node]=f,size[node]=<span class="number">1</span>;<span class="comment">//更新节点深度，父节点，节点为根的子树大小</span></span><br><span class="line">    ll maxn=<span class="number">-1</span>;<span class="comment">//重儿子</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=last[node];i;i=ed[i].prev)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ed[i].to!=f)<span class="comment">//遍历子节点</span></span><br><span class="line">        &#123;</span><br><span class="line">            dfs(ed[i].to,node,dep+<span class="number">1</span>);</span><br><span class="line">            size[node]+=size[ed[i].to];<span class="comment">//更新子树大小</span></span><br><span class="line">            <span class="keyword">if</span>(size[ed[i].to]&gt;maxn)</span><br><span class="line">            &#123;</span><br><span class="line">                heavy[node]=ed[i].to,maxn=size[ed[i].to];<span class="comment">//标记重儿子</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ddfs</span><span class="params">(ll node,ll link)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    id[node]=++ccnt,val[ccnt]=pre[node],top[node]=link;<span class="comment">//标记节点新编号，赋初始值，更新节点所在重链的顶部</span></span><br><span class="line">    <span class="keyword">if</span>(!heavy[node])<span class="comment">//连重儿子都没有，肯定没有轻儿子，回溯</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ddfs(heavy[node],link);<span class="comment">//先遍历重儿子</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=last[node];i;i=ed[i].prev)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ed[i].to!=fa[node]&amp;&amp;ed[i].to!=heavy[node])</span><br><span class="line">        &#123;</span><br><span class="line">            ddfs(ed[i].to,ed[i].to);<span class="comment">//遍历轻儿子，该节点所在重链顶部节点为自己</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//无脑操作</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">queryPath</span><span class="params">(ll x,ll y)</span><span class="comment">//查询路径点权和</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(depth[top[x]]&lt;depth[top[y]])</span><br><span class="line">        &#123;</span><br><span class="line">            swap(x,y);</span><br><span class="line">        &#125;</span><br><span class="line">        ans+=query(id[top[x]],id[x],<span class="number">1</span>)%mod;<span class="comment">//加上整个链的点权和</span></span><br><span class="line">        x=fa[top[x]];<span class="comment">//爬到链顶</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(depth[x]&gt;depth[y])</span><br><span class="line">    &#123;</span><br><span class="line">        swap(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    ans+=query(id[x],id[y],<span class="number">1</span>)%mod;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">querySubtree</span><span class="params">(ll root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> query(id[root],id[root]+size[root]<span class="number">-1</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">changePath</span><span class="params">(ll x,ll y,ll val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(depth[top[x]]&lt;depth[top[y]])</span><br><span class="line">        &#123;</span><br><span class="line">            swap(x,y);</span><br><span class="line">        &#125;</span><br><span class="line">        add(id[top[x]],id[x],val,<span class="number">1</span>);</span><br><span class="line">        x=fa[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(depth[x]&gt;depth[y])</span><br><span class="line">    &#123;</span><br><span class="line">        swap(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    add(id[x],id[y],val,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">changeSubtree</span><span class="params">(ll root,ll val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    add(id[root],id[root]+size[root]<span class="number">-1</span>,val,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    nc=read(),cnt=read(),root=read(),mod=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=nc;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pre[i]=read();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nc<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        from=read(),to=read();</span><br><span class="line">        addEdge(from,to),addEdge(to,from);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(root,<span class="number">0</span>,<span class="number">1</span>),ddfs(root,root),create(<span class="number">1</span>,nc,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        op=read();</span><br><span class="line">        <span class="keyword">switch</span>(op)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:&#123;</span><br><span class="line">                x=read(),y=read(),z=read();</span><br><span class="line">                changePath(x,y,z%mod);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:&#123;</span><br><span class="line">                x=read(),y=read();</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;queryPath(x,y)%mod&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:&#123;</span><br><span class="line">                x=read(),y=read();</span><br><span class="line">                changeSubtree(x,y%mod);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:&#123;</span><br><span class="line">                x=read();</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;querySubtree(x)%mod&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 树链剖分 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>学习笔记·树链剖分</title>
      <link href="/2018/08/13/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
      <url>/2018/08/13/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/</url>
      
        <content type="html"><![CDATA[<p>树链剖分是一种将一颗树通过划分不相交的来维护树上路径信息的算法。它保证每一个点仅在一个链上，并通过毒瘤数据结构来维护节点信息。<br><a id="more"></a><br>树链剖分是干什么用的呢？很简单，借助树链剖分，可以任意修改树上两点最短路径的点权和子树点权，根本用不着树上差分。<br>如果这棵树是一条链，支持修改和查询，那么我们可以重新按深度编号，这样子每棵子树上的编号都是连续的了，就可以用<strong>毒瘤数据结构</strong>来解决。<br>但是，事实上，连洛谷模板的样例都不是一条链。尽管有人说可以用LCA+树上差分过，但你觉得数据可能是纯随机的么qwq。<br>所以说，我们应该用树链剖分。</p><h3 id="前置技能"><a href="#前置技能" class="headerlink" title="前置技能"></a>前置技能</h3><p>第一个是刚才标粗的<strong>毒瘤数据结构</strong>，树链剖分是依靠毒瘤数据结构，比如线段树，树状数组，平衡树等来修改和查询，否则就GG了……<br>第二个是<strong>LCA</strong>，即<strong>最近公共祖先</strong>。<br>第三个是<strong>树的DFS序</strong>，这个有什么用后面会讲。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 树链剖分 </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P2002」消息扩散</title>
      <link href="/2018/08/11/%E3%80%8CLuogu-P2002%E3%80%8D%E6%B6%88%E6%81%AF%E6%89%A9%E6%95%A3/"/>
      <url>/2018/08/11/%E3%80%8CLuogu-P2002%E3%80%8D%E6%B6%88%E6%81%AF%E6%89%A9%E6%95%A3/</url>
      
        <content type="html"><![CDATA[<p>给出一个有向图，消息沿着边扩散，求最少需要在几个点发消息才能使整个图所有点都得到消息。<br><a id="more"></a></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    ll to,prev;</span><br><span class="line">&#125;;</span><br><span class="line">edge ed[<span class="number">500001</span>],scc[<span class="number">500001</span>];</span><br><span class="line">ll test,tot,num,top,cnt,nc,ec,ans;</span><br><span class="line">ll last[<span class="number">500001</span>],sccLast[<span class="number">500001</span>],dfn[<span class="number">500001</span>],low[<span class="number">500001</span>],ins[<span class="number">500001</span>],belong[<span class="number">500001</span>];</span><br><span class="line">ll from[<span class="number">500001</span>],to[<span class="number">500001</span>],size[<span class="number">500001</span>],in[<span class="number">500001</span>];</span><br><span class="line"><span class="built_in">stack</span>&lt;ll&gt;st;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(ll from,ll to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ed[++tot].to=to;</span><br><span class="line">    ed[tot].prev=last[from];</span><br><span class="line">    last[from]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addSCC</span><span class="params">(ll from,ll to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    scc[++tot].to=to;</span><br><span class="line">    scc[tot].prev=sccLast[from];</span><br><span class="line">    sccLast[from]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dfn[node]=low[node]=++num;</span><br><span class="line">    st.push(node),ins[node]=<span class="number">1</span>;</span><br><span class="line">    ll flag=<span class="number">0</span>,to;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=last[node];i;i=ed[i].prev)</span><br><span class="line">    &#123;</span><br><span class="line">        to=ed[i].to;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[to])</span><br><span class="line">        &#123;</span><br><span class="line">            tarjan(to);</span><br><span class="line">            low[node]=min(low[node],low[to]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(ins[to])</span><br><span class="line">            &#123;</span><br><span class="line">                low[node]=min(low[node],dfn[to]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dfn[node]==low[node])</span><br><span class="line">    &#123;</span><br><span class="line">        cnt++;</span><br><span class="line">        ll nd;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            nd=st.top(),st.pop();</span><br><span class="line">            ins[nd]=<span class="number">0</span>;</span><br><span class="line">            belong[nd]=cnt;</span><br><span class="line">            size[cnt]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(node!=nd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">mergePoint</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tot=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ec;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(belong[from[i]]!=belong[to[i]])</span><br><span class="line">        &#123;</span><br><span class="line">            addSCC(belong[from[i]],belong[to[i]]);</span><br><span class="line">            in[belong[to[i]]]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;nc&gt;&gt;ec;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ec;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;from[i]&gt;&gt;to[i];</span><br><span class="line">        addEdge(from[i],to[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=nc;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[i])</span><br><span class="line">        &#123;</span><br><span class="line">            tarjan(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mergePoint();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">if</span>(!in[i])</span><br><span class="line">    &#123;</span><br><span class="line">    ans++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 强连通分量 </tag>
            
            <tag> 洛谷 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「CodeForces 402E」Strictly Positive Matrix</title>
      <link href="/2018/08/11/%E3%80%8CCodeForces-402E%E3%80%8DStrictly-Positive-Matrix/"/>
      <url>/2018/08/11/%E3%80%8CCodeForces-402E%E3%80%8DStrictly-Positive-Matrix/</url>
      
        <content type="html"><![CDATA[<p>给你一个$n*n$大小的矩阵，问你是否有一个正整数$k$使得这个矩阵的$k$次幂均为正数。<br><a id="more"></a><br>未完，贴代码</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    ll to,prev;</span><br><span class="line">&#125;;</span><br><span class="line">edge ed[<span class="number">5000001</span>];</span><br><span class="line">ll tot,num,dist,top,cnt,nc;</span><br><span class="line">ll last[<span class="number">5000001</span>],dfn[<span class="number">5000001</span>],low[<span class="number">5000001</span>],ins[<span class="number">5000001</span>],belong[<span class="number">5000001</span>],size[<span class="number">5000001</span>];</span><br><span class="line"><span class="built_in">stack</span>&lt;ll&gt;st;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(ll from,ll to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ed[++tot].to=to;</span><br><span class="line">    ed[tot].prev=last[from];</span><br><span class="line">    last[from]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dfn[node]=low[node]=++num;</span><br><span class="line">    st.push(node),ins[node]=<span class="number">1</span>;</span><br><span class="line">    ll flag=<span class="number">0</span>,to;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=last[node];i;i=ed[i].prev)</span><br><span class="line">    &#123;</span><br><span class="line">        to=ed[i].to;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[to])</span><br><span class="line">        &#123;</span><br><span class="line">            tarjan(to);</span><br><span class="line">            low[node]=min(low[node],low[to]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(ins[to])</span><br><span class="line">            &#123;</span><br><span class="line">                low[node]=min(low[node],dfn[to]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dfn[node]==low[node])</span><br><span class="line">    &#123;</span><br><span class="line">        cnt++;</span><br><span class="line">        ll nd;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            nd=st.top(),st.pop();</span><br><span class="line">            ins[nd]=<span class="number">0</span>;</span><br><span class="line">            belong[nd]=cnt;</span><br><span class="line">            size[cnt]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(node!=nd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;nc);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nc;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;nc;j++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;dist);</span><br><span class="line">    <span class="keyword">if</span>(dist)</span><br><span class="line">    &#123;</span><br><span class="line">    addEdge(i+<span class="number">1</span>,j+<span class="number">1</span>); </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=nc;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[i])</span><br><span class="line">        &#123;</span><br><span class="line">            tarjan(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cnt==<span class="number">1</span>?<span class="built_in">printf</span>(<span class="string">"YES\n"</span>):<span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CodeForces </tag>
            
            <tag> 图论 </tag>
            
            <tag> 强连通分量 </tag>
            
            <tag> 邻接矩阵 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P2341」[HAOI2006]受欢迎的牛</title>
      <link href="/2018/08/09/%E3%80%8CHAOI2006%E3%80%8D%E5%8F%97%E6%AC%A2%E8%BF%8E%E7%9A%84%E7%89%9B/"/>
      <url>/2018/08/09/%E3%80%8CHAOI2006%E3%80%8D%E5%8F%97%E6%AC%A2%E8%BF%8E%E7%9A%84%E7%89%9B/</url>
      
        <content type="html"><![CDATA[<p>给定一个有向图，找出与其他点均可达的点的个数。<br><a id="more"></a></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    ll to,prev;</span><br><span class="line">&#125;;</span><br><span class="line">edge ed[<span class="number">150001</span>],scc[<span class="number">150001</span>];</span><br><span class="line">ll sccno,tot,num,top,cnt,nc,ec,ans;</span><br><span class="line">ll last[<span class="number">150001</span>],sccLast[<span class="number">150001</span>],dfn[<span class="number">150001</span>],low[<span class="number">150001</span>],ins[<span class="number">150001</span>],belong[<span class="number">150001</span>];</span><br><span class="line">ll from[<span class="number">150001</span>],to[<span class="number">150001</span>],size[<span class="number">150001</span>],out[<span class="number">150001</span>];</span><br><span class="line"><span class="built_in">stack</span>&lt;ll&gt;st;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(ll from,ll to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ed[++tot].to=to;</span><br><span class="line">    ed[tot].prev=last[from];</span><br><span class="line">    last[from]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addSCC</span><span class="params">(ll from,ll to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    scc[++tot].to=to;</span><br><span class="line">    scc[tot].prev=sccLast[from];</span><br><span class="line">    sccLast[from]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dfn[node]=low[node]=++num;</span><br><span class="line">    st.push(node),ins[node]=<span class="number">1</span>;</span><br><span class="line">    ll flag=<span class="number">0</span>,to;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=last[node];i;i=ed[i].prev)</span><br><span class="line">    &#123;</span><br><span class="line">        to=ed[i].to;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[to])</span><br><span class="line">        &#123;</span><br><span class="line">            tarjan(to);</span><br><span class="line">            low[node]=min(low[node],low[to]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(ins[to])</span><br><span class="line">            &#123;</span><br><span class="line">                low[node]=min(low[node],dfn[to]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dfn[node]==low[node])</span><br><span class="line">    &#123;</span><br><span class="line">        cnt++;</span><br><span class="line">        ll nd;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            nd=st.top(),st.pop();</span><br><span class="line">            ins[nd]=<span class="number">0</span>;</span><br><span class="line">            belong[nd]=cnt;</span><br><span class="line">            size[cnt]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(node!=nd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">mergePoint</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tot=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ec;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(belong[from[i]]!=belong[to[i]])</span><br><span class="line">        &#123;</span><br><span class="line">            addSCC(belong[from[i]],belong[to[i]]);</span><br><span class="line">            out[belong[from[i]]]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;nc&gt;&gt;ec;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ec;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;from[i]&gt;&gt;to[i];</span><br><span class="line">        addEdge(from[i],to[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=nc;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[i])</span><br><span class="line">        &#123;</span><br><span class="line">            tarjan(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mergePoint();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">if</span>(!out[i])</span><br><span class="line">    &#123;</span><br><span class="line">    ans++;</span><br><span class="line">    sccno=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ans!=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;size[sccno];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> BZOJ </tag>
            
            <tag> 图论 </tag>
            
            <tag> 强连通分量 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> HAOI </tag>
            
            <tag> 缩点 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「UVa 11324」The Largest Clique</title>
      <link href="/2018/08/08/%E3%80%8CUVa-11324%E3%80%8DThe-Largest-Clique/"/>
      <url>/2018/08/08/%E3%80%8CUVa-11324%E3%80%8DThe-Largest-Clique/</url>
      
        <content type="html"><![CDATA[<p>给定一个有向图，找出一个子图使得对于该子图的任意两个点$u$,$v$,$u$可以到达$v$或$v$可以到达$u$,判断这样的最大子图的节点个数。<br><a id="more"></a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>登不了UVa，只能用洛谷的链接惹qwq<br><a href="https://www.luogu.org/problemnew/show/UVA11324" target="_blank" rel="noopener">UVa 11324</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>求出图中的强连通分量，缩点，变成DAG。每一个点给一个权值，权值设为每个强连通分量的结点数。最后用记忆化搜索给出最长路。<br>求最长路时写炸了，<del>输入居然可以决定最长路的总权值</del></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    ll to,prev;</span><br><span class="line">&#125;;</span><br><span class="line">edge ed[<span class="number">150001</span>],scc[<span class="number">150001</span>];</span><br><span class="line">ll test,tot,num,top,cnt,nc,ec,ans;</span><br><span class="line">ll last[<span class="number">150001</span>],sccLast[<span class="number">150001</span>],dfn[<span class="number">150001</span>],low[<span class="number">150001</span>],ins[<span class="number">150001</span>],belong[<span class="number">150001</span>];</span><br><span class="line">ll from[<span class="number">150001</span>],to[<span class="number">150001</span>],size[<span class="number">150001</span>],dp[<span class="number">150001</span>];</span><br><span class="line"><span class="built_in">stack</span>&lt;ll&gt;st;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(ll from,ll to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ed[++tot].to=to;</span><br><span class="line">    ed[tot].prev=last[from];</span><br><span class="line">    last[from]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addSCC</span><span class="params">(ll from,ll to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    scc[++tot].to=to;</span><br><span class="line">    scc[tot].prev=sccLast[from];</span><br><span class="line">    sccLast[from]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dfn[node]=low[node]=++num;</span><br><span class="line">    st.push(node),ins[node]=<span class="number">1</span>;</span><br><span class="line">    ll flag=<span class="number">0</span>,to;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=last[node];i;i=ed[i].prev)</span><br><span class="line">    &#123;</span><br><span class="line">        to=ed[i].to;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[to])</span><br><span class="line">        &#123;</span><br><span class="line">            tarjan(to);</span><br><span class="line">            low[node]=min(low[node],low[to]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(ins[to])</span><br><span class="line">            &#123;</span><br><span class="line">                low[node]=min(low[node],dfn[to]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dfn[node]==low[node])</span><br><span class="line">    &#123;</span><br><span class="line">        cnt++;</span><br><span class="line">        ll nd;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            nd=st.top(),st.pop();</span><br><span class="line">            ins[nd]=<span class="number">0</span>;</span><br><span class="line">            belong[nd]=cnt;</span><br><span class="line">            size[cnt]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(node!=nd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">mergePoint</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tot=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ec;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(belong[from[i]]!=belong[to[i]])</span><br><span class="line">        &#123;</span><br><span class="line">            addSCC(belong[from[i]],belong[to[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">search</span><span class="params">(ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dp[node]) </span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dp[node]=size[node];</span><br><span class="line">    ll maxn=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=sccLast[node];i;i=scc[i].prev)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!dp[scc[i].to])</span><br><span class="line">        &#123;</span><br><span class="line">        search(scc[i].to);</span><br><span class="line">        &#125;</span><br><span class="line">        maxn=max(maxn,dp[scc[i].to]);</span><br><span class="line">    &#125;</span><br><span class="line">    dp[node]+=maxn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;test;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;test;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;nc&gt;&gt;ec;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ec;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;from[i]&gt;&gt;to[i];</span><br><span class="line">            addEdge(from[i],to[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=nc;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!dfn[i])</span><br><span class="line">            &#123;</span><br><span class="line">                tarjan(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mergePoint();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">if</span>(!dp[i])</span><br><span class="line">        &#123;</span><br><span class="line">        search(i);</span><br><span class="line">        ans=max(ans,dp[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        tot=num=top=cnt=nc=ec=ans=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(last,<span class="number">0</span>,<span class="keyword">sizeof</span>(last));</span><br><span class="line">        <span class="built_in">memset</span>(sccLast,<span class="number">0</span>,<span class="keyword">sizeof</span>(sccLast));</span><br><span class="line">        <span class="built_in">memset</span>(dfn,<span class="number">0</span>,<span class="keyword">sizeof</span>(dfn));</span><br><span class="line">        <span class="built_in">memset</span>(low,<span class="number">0</span>,<span class="keyword">sizeof</span>(low));</span><br><span class="line">        <span class="built_in">memset</span>(ins,<span class="number">0</span>,<span class="keyword">sizeof</span>(ins));</span><br><span class="line">        <span class="built_in">memset</span>(belong,<span class="number">0</span>,<span class="keyword">sizeof</span>(belong));</span><br><span class="line">        <span class="built_in">memset</span>(from,<span class="number">0</span>,<span class="keyword">sizeof</span>(from));</span><br><span class="line">        <span class="built_in">memset</span>(to,<span class="number">0</span>,<span class="keyword">sizeof</span>(to));</span><br><span class="line">        <span class="built_in">memset</span>(size,<span class="number">0</span>,<span class="keyword">sizeof</span>(size));</span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">150001</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            ed[i].prev=ed[i].to=scc[i].prev=scc[i].to=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 强连通分量 </tag>
            
            <tag> 缩点 </tag>
            
            <tag> UVa </tag>
            
            <tag> 记忆化搜索 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「Luogu P3128」最大流</title>
      <link href="/2018/08/08/%E3%80%8CLuogu-P3128%E3%80%8D%E6%9C%80%E5%A4%A7%E6%B5%81/"/>
      <url>/2018/08/08/%E3%80%8CLuogu-P3128%E3%80%8D%E6%9C%80%E5%A4%A7%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<p>给出一棵树和一些操作，每次操作都将两点间所有经过的点的点权+1，求出点权最大的点的权值。<br><a id="more"></a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.luogu.org/problemnew/show/P3128" target="_blank" rel="noopener">Luogu P3128</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>怎么说呢，一道<strong>树上点差分</strong>模板题，当然树链剖分也可以做。<br>定义$diff[i]$为点$i$的差分值，那么对于每一次修改的参数$start$和$end$，将$diff[start++,diff[end++,diff[\operatorname{lca}(start,end)—]$。为了不让路线修改蔓延到祖先，把LCA的父节点的差分值-1。<br>最后用DFS求出子树差分数组的和就得到该节点修改后的点权啦。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    ll to,prev;  </span><br><span class="line">&#125;;</span><br><span class="line">ll nc,ec,query,root,from,to;</span><br><span class="line">ll depth[<span class="number">500010</span>],anc[<span class="number">500010</span>][<span class="number">31</span>],last[<span class="number">500010</span>],diff[<span class="number">500010</span>],LCA,maxn;</span><br><span class="line">edge ed[<span class="number">500010</span>*<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(ll from,ll to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ed[++ec].prev=last[from];</span><br><span class="line">    ed[ec].to=to;</span><br><span class="line">    last[from]=ec;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll son;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=last[node];i!=<span class="number">0</span>;i=ed[i].prev)</span><br><span class="line">    &#123;</span><br><span class="line">        son=ed[i].to;</span><br><span class="line">        <span class="keyword">if</span>(!depth[son])</span><br><span class="line">        &#123;</span><br><span class="line">            depth[son]=depth[node]+<span class="number">1</span>;</span><br><span class="line">            anc[son][<span class="number">0</span>]=node;</span><br><span class="line">            dfs(son);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">LCASetup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    depth[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    anc[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    dfs(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">21</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=nc;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            anc[j][i]=anc[anc[j][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">lca</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(depth[x]&gt;depth[y])</span><br><span class="line">    &#123;</span><br><span class="line">        swap(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">21</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(depth[anc[y][i]]&gt;=depth[x])</span><br><span class="line">        &#123;</span><br><span class="line">            y=anc[y][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x==y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">21</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(anc[x][i]!=anc[y][i])</span><br><span class="line">        &#123;</span><br><span class="line">            x=anc[x][i];</span><br><span class="line">            y=anc[y][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> anc[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">ddfs</span><span class="params">(ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=last[node];i;i=ed[i].prev)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ed[i].to==anc[node][<span class="number">0</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ddfs(ed[i].to);</span><br><span class="line">        diff[node]+=diff[ed[i].to];</span><br><span class="line">    &#125;</span><br><span class="line">    maxn=max(maxn,diff[node]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;nc,&amp;query);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nc<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;from,&amp;to);</span><br><span class="line">        addEdge(from,to);</span><br><span class="line">        addEdge(to,from);</span><br><span class="line">    &#125;</span><br><span class="line">    LCASetup();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;query;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;from,&amp;to);</span><br><span class="line">        LCA=lca(from,to);</span><br><span class="line">        diff[from]++,diff[to]++,diff[LCA]--,diff[anc[LCA][<span class="number">0</span>]]--;</span><br><span class="line">    &#125;</span><br><span class="line">    ddfs(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;maxn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> LCA </tag>
            
            <tag> 树上差分 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 树链剖分 </tag>
            
            <tag> USACO </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「CodeForces 191C」Fools and Roads</title>
      <link href="/2018/08/07/%E3%80%8CCodeForces-191C%E3%80%8DFools-and-Roads/"/>
      <url>/2018/08/07/%E3%80%8CCodeForces-191C%E3%80%8DFools-and-Roads/</url>
      
        <content type="html"><![CDATA[<p>给一棵有根树和一些路线，路线上的边权都+1，求所有边的权值<br><a id="more"></a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="http://codeforces.com/problemset/problem/191/C" target="_blank" rel="noopener">CodeForces 191C</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这个题目的输出是每一条边所经过的次数，所以想到<strong>树上边差分</strong>。<br>在差分之后确实是晕了，没有想到好的方法，但是突然想到了<strong>DFS求树上前缀和</strong>，对于每一条边，只要计算深度小的前缀和-深度大的前缀和即得答案。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    ll to,prev;  </span><br><span class="line">&#125;;</span><br><span class="line">ll nc,ec,query,root,from,to;</span><br><span class="line">ll depth[<span class="number">500010</span>],anc[<span class="number">500010</span>][<span class="number">31</span>],last[<span class="number">500010</span>],diff[<span class="number">500010</span>],prefix[<span class="number">500010</span>],LCA,maxn;</span><br><span class="line">ll From[<span class="number">500010</span>],To[<span class="number">500010</span>];</span><br><span class="line">edge ed[<span class="number">500010</span>*<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(ll from,ll to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ed[++ec].prev=last[from];</span><br><span class="line">    ed[ec].to=to;</span><br><span class="line">    last[from]=ec;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll son;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=last[node];i!=<span class="number">0</span>;i=ed[i].prev)</span><br><span class="line">    &#123;</span><br><span class="line">        son=ed[i].to;</span><br><span class="line">        <span class="keyword">if</span>(!depth[son])</span><br><span class="line">        &#123;</span><br><span class="line">            depth[son]=depth[node]+<span class="number">1</span>;</span><br><span class="line">            anc[son][<span class="number">0</span>]=node;</span><br><span class="line">            dfs(son);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">LCASetup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    depth[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    anc[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    dfs(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">21</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=nc;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            anc[j][i]=anc[anc[j][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">lca</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(depth[x]&gt;depth[y])</span><br><span class="line">    &#123;</span><br><span class="line">        swap(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">21</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(depth[anc[y][i]]&gt;=depth[x])</span><br><span class="line">        &#123;</span><br><span class="line">            y=anc[y][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x==y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">21</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(anc[x][i]!=anc[y][i])</span><br><span class="line">        &#123;</span><br><span class="line">            x=anc[x][i];</span><br><span class="line">            y=anc[y][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> anc[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ddfs</span><span class="params">(ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=last[node];i;i=ed[i].prev)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ed[i].to==anc[node][<span class="number">0</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ddfs(ed[i].to);</span><br><span class="line">        diff[node]+=diff[ed[i].to];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dffs</span><span class="params">(ll node,ll val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    prefix[node]=diff[node]+val;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=last[node];i;i=ed[i].prev)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ed[i].to==anc[node][<span class="number">0</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dffs(ed[i].to,prefix[node]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;nc);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nc<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;from,&amp;to);</span><br><span class="line">        From[i]=from,To[i]=to;</span><br><span class="line">        addEdge(from,to);</span><br><span class="line">        addEdge(to,from);</span><br><span class="line">    &#125;</span><br><span class="line">    LCASetup();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;query);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;query;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;from,&amp;to);</span><br><span class="line">        LCA=lca(from,to);</span><br><span class="line">        diff[from]++,diff[to]++,diff[LCA]-=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ddfs(<span class="number">1</span>);</span><br><span class="line">    dffs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nc<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">if</span>(depth[From[i]]&lt;depth[To[i]])</span><br><span class="line">    &#123;</span><br><span class="line">    swap(From[i],To[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,prefix[From[i]]-prefix[To[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 待修改 </tag>
            
            <tag> CodeForces </tag>
            
            <tag> LCA </tag>
            
            <tag> 树上差分 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
